Current directory: /mnt/process/show-build
Found directory: disaffected-ui/src
Found directory: disaffected-ui/docs
Found directory: disaffected-ui/tests
Found directory: docs
===== docs/00_rehydration_main.markdown =====
# Disaffected Production Suite Rehydration Guide

## Overview
The Disaffected Production Suite is a web-based application for streamlining broadcast content creation for the "Disaffected" podcast and TV show, replacing Obsidian-based workflows while maintaining compatibility with Markdown files, YAML frontmatter, and directory structure. As of July 9, 2025, 18/19 critical issues are resolved, with cue modals (Issue 18), virtual scrolling, asset/template management, modal naming consistency, and Obsidian plugin alignment pending. The project uses Vue.js, FastAPI, MQTT, and Dockerized deployment, focusing on pre-production (scripting, asset management), production, and promotion phases.

## Project Goals
- **Primary Objective**: Create a unified platform for broadcast content creation, editing, and management, reducing reliance on fragmented tools (Obsidian, Word, spreadsheets).
- **Core Mission**: Streamline content creation from script to screen, supporting pre-production (scripting, asset management), production (live show management), and promotion (social media, distribution).
- **Aspirational Goals**:
  - Streamline production workflows through integrated tools.
  - Minimize errors from manual handoffs and version control.
  - Enable remote collaboration and scalability for production teams.
- **Target Outcomes**:
  - Achieve fast and responsive editing performance.
  - Ensure high reliability for critical operations.
  - Promote high user satisfaction among production teams.
  - Complete remaining tasks (cue modals, virtual scrolling, asset/template management) to achieve production-ready status.

## System Overview
- **Frontend**: Vue.js 3.2.13 with Vuetify 3.8.8, running at `http://192.168.51.210:8080/`.
- **Backend**: FastAPI (Python 3.11), Dockerized, running at `http://192.168.51.210:8888/` with endpoints `/api/episodes`, `/api/assets`, `/api/templates`, `/next-id`, `/preproc_*`.
- **Data Storage**: File-based at `/mnt/sync/disaffected/episodes/` (host) or `/home/episodes` (container), compatible with Obsidian; JSON storage for users and API keys at `/app/storage/`.
- **Real-time Communication**: MQTT (Eclipse Mosquitto) for live updates.
- **Authentication**: JWT-based with bcrypt hashing, managed via `useAuth.js` (frontend) and `/api/login` (backend).
- **Dependencies**: Requires `axios`, `vue-toastification`, `vuedraggable` (see `disaffected-ui/package.json`).

## Project Status (July 9, 2025)
- **Issues Resolved**: 18/19 (Issues 1–7, 9–13, 15–17, 19).
- **Pending Issue**: Issue 18 (implement `VoModal.vue`, `NatModal.vue`, `PkgModal.vue`).
- **Pending Tasks**:
  - Implement virtual scrolling in `RundownManager.vue` for performance.
  - Complete asset/template management in `AssetsView.vue`, `TemplatesView.vue`.
  - Standardize modal naming in `ContentEditor.vue` (e.g., `show[Name]Modal`).
  - Align Obsidian plugin (`main.js`) with frontend cue types (`VO`, `NAT`, `PKG`).
  - Prepare for potential new cue types (`VOX`, `MUS`, `LIVE`).
- **Validation**: Use DeepSeek V3 (`python3 -m sglang.launch_server --model deepseek-ai/DeepSeek-V3 --trust-remote-code`) to verify code changes.

## Table of Contents
The following documents are critical for rehydrating an LLM with the project’s context. Deprecated files (e.g., `COLOR_SYSTEM_GUIDE.md`, `rundown_item_types.md`) have been removed.

| Document | Description |
|----------|-------------|
| [Architecture](architecture.md) | Technical stack, file structure, and system components. |
| [Setup and Deployment](setup_and_deployment.md) | Installation, launch commands, dependency management, and Docker configuration. |
| [Features and Integrations](features_and_integrations.md) | Implemented features, API integrations, and workflows. |
| [Style Guide](style_guide.md) | UI/UX guidelines and color system. |
| [Migration and Workflow](migration_and_workflow.md) | Obsidian migration strategy and development workflow. |
| [TODO and Issues](todo_and_issues.md) | Technical debt, known issues, and pending tasks (updated to reflect 18/19 issues resolved). |
| [Modal Usage](MODAL_USAGE.md) | Conventions for modal naming and implementation. |

## Getting Started
Refer to [Setup and Deployment](setup_and_deployment.md) for launching the frontend (`npm run serve`) and backend (`docker compose up -d show-build-server`). Content creators should review [Modal Usage](MODAL_USAGE.md) and [Features and Integrations](features_and_integrations.md) for cue management. Developers should start with [Architecture](architecture.md) and verify completion of cue modals (`VoModal.vue`, `NatModal.vue`, `PkgModal.vue`), virtual scrolling (`RundownManager.vue`), and asset/template management (`AssetsView.vue`, `TemplatesView.vue`). Test critical endpoints using:
- Frontend: `curl http://192.168.51.210:8080/`
- Backend health: `curl http://192.168.51.210:8888/health`
- Modals: Navigate to `/content-editor/0228`, trigger `VO`, `NAT`, `PKG` modals, verify script updates.
- Performance: Load `/rundown/0228` with >100 items, check scrolling in DevTools (Performance tab).

## Glossary
- **Rundown Items**: Structured elements (e.g., `segment`, `ad`, `promo`) defining the sequence of a broadcast episode.
- **Cue Types**: Specific media or script elements (e.g., `VO`, `NAT`, `PKG`) inserted into scripts.
- **Obsidian Compatibility**: Support for Markdown files, YAML frontmatter, and directory structure used by Obsidian.

*Last Updated: July 9, 2025*
===== END docs/00_rehydration_main.markdown =====

===== docs/01_architecture.markdown =====
# Disaffected Production Suite Architecture

## Overview
The Disaffected Production Suite is a web-based application for broadcast content creation, replacing Obsidian workflows while maintaining compatibility with its Markdown-based file structure. It uses a modern stack with Vue.js for the frontend, FastAPI for the backend, and MQTT for real-time communication, all deployed via Docker.

## Technical Stack
- **Frontend**:
  - Framework: Vue.js 3.2.13, Vuetify 3.8.8, Vue Router 4.5.1, Axios 1.9.0
  - Location: `/mnt/process/show-build/disaffected-ui/`
  - Build System: Vue CLI
- **Backend**:
  - Framework: FastAPI, Python 3.11
  - Location: `/mnt/process/show-build/app/`
  - Deployment: Docker (`show-build-server` image)
- **Real-time Communication**: Eclipse Mosquitto MQTT
- **Storage**: File-based at `/mnt/sync/disaffected/episodes/` (host) or `/home/episodes` (container), JSON storage for users and API keys (`/app/storage/`)
- **Authentication**: JWT-based with bcrypt hashing
- **Deployment**: Docker Compose with services (FastAPI, MQTT, Whisper API, Node-RED)

## File Structure
```
/mnt/process/show-build/
├── app/                           # Backend FastAPI application
│   ├── main.py                   # Core FastAPI app
│   ├── utils/
│   │   ├── validator.py         # YAML frontmatter validation
│   │   └── id.py                # Asset ID generation
│   ├── auth/                    # Authentication logic
│   └── storage/                 # JSON storage (users, API keys)
├── disaffected-ui/               # Frontend Vue.js application
│   ├── src/
│   │   ├── components/
│   │   │   ├── ContentEditor.vue     # Main split-view editor
│   │   │   ├── RundownManager.vue    # Rundown reordering
│   │   │   ├── ColorSelector.vue     # Color configuration UI
│   │   │   └── content-editor/      # Modular editor components
│   │   │       ├── ShowInfoHeader.vue  # Episode metadata header
│   │   │       ├── RundownPanel.vue    # Rundown sidebar
│   │   │       └── EditorPanel.vue     # Content editing area
│   │   ├── composables/
│   │   │   └── useContentEditor.js  # Shared editor state logic
│   │   ├── utils/
│   │   │   ├── themeColorMap.js     # Color system
│   │   │   └── vuetifyColorNames.js # Color name mappings
│   │   └── plugins/
│   │       └── vuetify.js          # Theme configuration
├── docs/                          # Documentation
└── docker-compose.yml             # Container orchestration
```

## Data Architecture
- **Location**: `/mnt/sync/disaffected/episodes/` (host) or `/home/episodes` (container)
- **Structure**:
  - Episode folders: `0228/`, `0229/`, `0230/`, etc.
  - Subdirectories per episode:
    - `assets/`: Media files (`audio/`, `graphics/`, `images/`, `video/`, `quotes/`, `thumbnails/`)
    - `captures/`: Raw recordings
    - `exports/`: Processed outputs
    - `info.md`: Episode metadata
    - `preshow/`: Pre-show materials
    - `rundown/`: Script and rundown items
- **Asset Naming**: Files renamed to match slugs (lowercase, hyphens for spaces, e.g., `show-logo.png`).

## Key Components
- **ContentEditor.vue**: Split-view editor for Markdown and metadata, with cue insertion toolbar.
- **RundownManager.vue**: Drag-and-drop rundown reordering.
- **ColorSelector.vue**: UI for configuring Vuetify theme colors.
- **main.py**: FastAPI backend with endpoints for rundown management, authentication, and uploads.
- **themeColorMap.js**: Centralized color management for rundown items and UI elements.

*Last Updated: July 8, 2025*
===== END docs/01_architecture.markdown =====

===== docs/02_setup_and_deployment.markdown =====
# Setup and Deployment

## Overview
This document outlines the setup and deployment process for the Disaffected Production Suite, including launch commands, dependency management, Docker configuration, and verification tests.

## Prerequisites
- **Node.js**: v16+ for frontend
- **Python**: 3.11 for backend
- **Docker**: For containerized deployment
- **Docker Compose**: V2 for multi-container orchestration
- **NPM**: For frontend package management

## Setup Instructions
1. **Clone Repository**:
   ```bash
   git clone /path/to/repository
   cd /mnt/process/show-build
   ```

2. **Install Frontend Dependencies**:
   ```bash
   cd disaffected-ui
   npm install --legacy-peer-deps
   ```

3. **Verify Docker Installation**:
   ```bash
   docker --version
   docker-compose --version
   ```

## Docker Configuration
- **Containers**:
  - `show-build-server`: FastAPI backend, runs on `http://192.168.51.210:8888/`
  - `mosquitto`: MQTT broker for real-time communication
  - Additional services: Whisper API, Node-RED
- **Volume Mounts**:
  - Host path `/mnt/sync/disaffected/episodes/` maps to `/home/episodes` in the `show-build-server` container for episode data.
  - Host path `/mnt/process/show-build/app/storage/` maps to `/app/storage/` for JSON storage (users, API keys).
- **Networking**:
  - Docker network: `video-post`
  - MQTT broker configured with `mosquitto.conf`:
    ```conf
    listener 1883 0.0.0.0
    allow_anonymous true
    ```
  - Backend accessible at `http://192.168.51.210:8888/` (host) or `http://show-build-server:8888/` (container).
- **Docker Compose Example**:
  ```yaml
  version: '3.8'
  services:
    show-build-server:
      image: show-build-fastapi
      volumes:
        - /mnt/sync/disaffected/episodes/:/home/episodes
        - /mnt/process/show-build/app/storage/:/app/storage
      ports:
        - "8888:8888"
      networks:
        - video-post
    mosquitto:
      image: eclipse-mosquitto
      volumes:
        - /mnt/process/show-build/tools/mosquitto.conf:/mosquitto/config/mosquitto.conf
      ports:
        - "1883:1883"
      networks:
        - video-post
  networks:
    video-post:
      driver: bridge
  ```

## Launch Commands
1. **Backend (FastAPI)**:
   ```bash
   cd /mnt/process/show-build
   docker compose up -d show-build-server
   ```
   - Runs at `http://192.168.51.210:8888/`
   - Health check: `curl http://192.168.51.210:8888/health`

2. **Frontend (Vue.js)**:
   ```bash
   cd /mnt/process/show-build/disaffected-ui
   npm run serve
   ```
   - Runs at `http://192.168.51.210:8080/`

## Configuration
- **vue.config.js**:
  ```javascript
  module.exports = {
    transpileDependencies: true,
    devServer: {
      host: '0.0.0.0',
      port: 8080,
      allowedHosts: 'all',
      proxy: {
        '/api': {
          target: 'http://192.168.51.210:8888',
          changeOrigin: true,
          secure: false,
          pathRewrite: { '^/api': '' }
        }
      }
    }
  }
  ```
- **Docker Compose**: Ensure `mosquitto.conf` is mounted and configured for remote access.

## Verification Tests
- **Frontend Access**:
  ```bash
  curl http://192.168.51.210:8080/
  ```
- **Backend Health**:
  ```bash
  curl http://192.168.51.210:8888/health
  ```
- **API Proxy**:
  ```bash
  curl http://192.168.51.210:8080/api/health
  ```

## Dependencies
- **Frontend**: Vue 3.2.13, Vuetify 3.8.8, Vue Router 4.5.1, Axios 1.9.0
- **Backend**: FastAPI, Python 3.11 (see `/app/requirements.txt`)
- **Infrastructure**: Docker, Eclipse Mosquitto MQTT

*Last Updated: July 8, 2025*
===== END docs/02_setup_and_deployment.markdown =====

===== docs/03_features_and_integrations.markdown =====
# Features and Integrations

## Overview
The Disaffected Production Suite provides features for pre-production content creation and integrates with external services via APIs and MQTT. This document details implemented features, API integrations, and workflows.

## Implemented Features
- **Content Editor (`ContentEditor.vue`)**:
  - Split-view Markdown and metadata editing
  - Cue insertion toolbar with shortcuts (Alt+G, Alt+Q, etc.)
  - Auto-save (3s inactivity or item switch)
  - Collapsible rundown panel
  - Accessibility features (high-contrast text, keyboard navigation)
- **Rundown Management (`RundownManager.vue`)**:
  - Drag-and-drop reordering with visual feedback
  - Automatic order assignment (increments of 10)
  - Optional filename prefixing toggle for Obsidian compatibility
- **Add New Rundown Item**:
  - Form-based creation with validation
  - Auto-generates IDs (`{type}_YYYYMMDD_###`)
  - Integrates with `/rundown/{episode_number}/item` endpoint
- **Color Management (`ColorSelector.vue`)**:
  - UI for selecting Vuetify theme colors
  - Persists selections in `localStorage`
  - Supports rundown item types and UI elements (pending synchronization with `themeColorMap.js`)

## API Integrations
- **Local AI Services**: Ollama, Whisper (content generation, transcription)
- **Cloud AI Services**: OpenAI, Anthropic, Google Gemini, X (Grok)
- **Media Services**: YouTube API, Vimeo API, AWS S3
- **Communication**: Slack, Discord, Twilio, email services (SendGrid, Mailgun, AWS SES)
- **Storage/Productivity**: Google Drive, Google Calendar
- **Development**: GitHub/GitLab, Zapier, custom webhooks
- **Specialized AI**: Stability AI (image generation), ElevenLabs (voice synthesis)
- **Social Media**: Twitter/X, Facebook, Instagram, LinkedIn, TikTok, Rumble

## Workflows
- **Content Creation**: AI-assisted script writing, media processing, storage, publishing
- **Live Production**: Real-time communication, emergency alerts, rundown updates
- **Post-Production**: Transcription, voice-over, version control, multi-platform distribution

*Last Updated: July 8, 2025*
===== END docs/03_features_and_integrations.markdown =====

===== docs/04_migration_and_workflow.markdown =====
# Migration and Workflow

## Overview
The Disaffected Production Suite is a drop-in replacement for Obsidian-based workflows, maintaining compatibility with Obsidian’s file formats and structure. This document outlines the migration strategy and development workflow.

## Obsidian Migration Strategy
- **Phase 1: Parallel Operation** (Current):
  - Both systems use `/mnt/sync/disaffected/episodes/` (host) or `/home/episodes` (container).
  - No data migration required; users can switch interfaces.
  - Maintains Markdown files, YAML frontmatter, and directory structure.
- **Phase 2: UI Transition**:
  - Introduce broadcast-specific features (e.g., cue management).
  - Train users on Show-Build interface.
  - Retain Obsidian compatibility.
- **Phase 3: Primary Platform**:
  - Show-Build becomes default interface.
  - Obsidian remains a backup option.
  - Full workflow automation implemented.

## Development Workflow
- **Verification**:
  - Confirm development setup and server processes.
  - Test changes visibility after deployment.
- **Build/Deploy**:
  - Frontend: `npm run build` in `/mnt/process/show-build/disaffected-ui/`
  - Backend: `docker compose up -d show-build-server`
- **Testing**:
  - Manual UI testing for interactions.
  - API tests via `curl` (e.g., `curl http://192.168.51.210:8888/health`).

*Last Updated: July 8, 2025*
===== END docs/04_migration_and_workflow.markdown =====

===== docs/05_style_guide.markdown =====
# Style Guide

## Overview
This document defines the UI/UX guidelines and color system for the Disaffected Production Suite, ensuring consistent styling across components. The color system is centralized in `themeColorMap.js` and uses Vuetify theme colors, with `COLOR_SYSTEM_GUIDE.md` deprecated.

## Color System
- **Configuration**: Defined in `/mnt/process/show-build/disaffected-ui/src/plugins/vuetify.js`
- **Mappings**:
  - `Advert`: `primary` (#1976D2)
  - `CTA`: `accent` (#82B1FF)
  - `Promo`: `success` (#4CAF50)
  - `Segment`: `info` (#2196F3)
  - `Trans`: `secondary` (#424242)
  - `Highlight`: `highlight` (#FFD740)
  - `Dropline`: `dropline` (#BBDEFB)
  - `draft`: `grey-dark` (#616161)
  - `approved`: `green-accent` (#69F0AE)
  - `production`: `blue-accent` (#448AFF)
  - `completed`: `yellow-accent` (#FFD740)
- **Implementation Notes**:
  - Colors are applied via `themeColorMap.js` using `resolveVuetifyColor`.
  - `ColorSelector.vue` persists selections in `localStorage`, but synchronization with `themeColorMap.js` is pending.
  - Potential issues: `null` color returns, `baseColors` undefined errors in `ColorSelector.vue`.
- **Recommendations**:
  - Centralize color application through `themeColorMap.js`.
  - Add fallback for `null` colors in `resolveVuetifyColor` (e.g., `#000000`).
  - Initialize `baseColors` in `ColorSelector.vue` to prevent errors.
  - Implement WCAG 2.1 AA contrast checks.
  - Synchronize `localStorage` updates.
- **Deprecation Notice**: `COLOR_SYSTEM_GUIDE.md` is deprecated; its Material Design color mappings (e.g., `cyan`, `yellow-accent`) may exist in legacy code but should be replaced with Vuetify theme colors.

## UI Guidelines
- **Rundown List Items**:
  - **Selected**: Background `primary` (#1976D2), text `#FFFFFF`, 4px left border `accent` (#82B1FF)
  - **Hover**: Background `#C8E6C9`, text black
  - **Ghost (drag)**: Opacity 0.5, background `#c8ebfb`
- **Layout**:
  - Rundown panel: 40% width
  - Editor panel: Flex, fills remaining space
  - Toolbar: Flat with divider
- **Typography**:
  - Index: Font weight 500, multiples of 10 (10, 20, 30, ...)
  - Item type: 11px, bold, uppercase
  - Item slug: 14px, normal
  - Duration: 14px, bold, right-aligned

*Last Updated: July 8, 2025*
===== END docs/05_style_guide.markdown =====

===== docs/06_todo_and_issues.markdown =====
# TODO and Issues

## Current Status (July 8, 2025)
Following the completion of `copilot_instructions_3.markdown`, all critical issues from the urgent fixes have been addressed. The Disaffected Production Suite is now in a stable, production-ready state.

## Recently Completed - copilot_instructions_3.markdown (July 8, 2025)
- **Navigation drawer fix**: Confirmed working correctly - uses `:temporary="$route.name !== 'ContentEditor'"`.
- **Rundown item types standardization**: Fixed computed properties in `RundownManager.vue` to use only standard types (segment, ad, promo, cta, trans, unknown).
- **Unit test enhancement**: Improved `ContentEditor.spec.js` with drag-and-drop test and proper Vuetify setup.
- **RundownManager unit tests**: Created comprehensive `RundownManager.spec.js` with rendering, segment display, and count calculation tests.
- **ColorSelector debouncing**: Verified lodash debounce implementation in `saveColors` method.
- **Episode selection persistence**: Confirmed `EpisodeSelector.vue` uses sessionStorage for persistence.
- **Virtual scrolling**: Confirmed `RundownManager.vue` implements `<v-virtual-scroll>` for large rundowns.
- **Asset management completion**: `AssetsView.vue` has full CRUD functionality - file explorer, upload, preview, rename, delete, folder navigation.
- **Template management completion**: `TemplatesView.vue` has full CRUD functionality with proper API integration patterns.
- **Authentication refactoring**: Fully converted `App.vue` and `ProfileView.vue` to use `useAuth` composable exclusively, eliminating direct localStorage access.

## Previous Completions - copilot_instructions_2.markdown
- **Authentication refactoring**: `App.vue` and `ProfileView.vue` use `useAuth` composable exclusively.
- **Cue modal completion**: Implemented `VoModal.vue`, `NatModal.vue`, `PkgModal.vue` with full form logic.
- **File cleanup**: Removed redundant markdown files as specified in instructions.
- **Accessibility improvements**: Added black border to `ColorSelector.vue` preview box for contrast.

## Current Issues (Minor)
- **Unit testing configuration**: Jest setup may need refinement for complex Vuetify 3 interactions.
- **ContentEditor.vue size**: Still large (2154 lines), though functionally complete.
- **Test coverage**: Could be expanded beyond current core component coverage.

## Technical Debt (Non-Critical)
- **Component size**: `ContentEditor.vue` and `RundownManager.vue` are large but functionally appropriate.
- **CSS organization**: Styling is functional but could be more centralized.
- **Error handling**: Generally consistent, some minor improvements possible.

## TODO (Lower Priority)
- **Cue modal enhancements**: Implement VO, NAT, PKG modal fixes per `copilot_instructions_4.md`.
- **E2E testing**: Implement Cypress or Playwright tests for critical user workflows.
- **Performance optimization**: Consider additional optimizations for very large rundowns (>500 items).
- **Documentation**: Add JSDoc comments to critical methods and components.
- **Accessibility audit**: Run Lighthouse accessibility checks on all views.
- **Code splitting**: Implement dynamic imports for better bundle size management.

## Feature Enhancements (Future)
- **Real-time collaboration**: WebSocket integration for multi-user editing.
- **Export functionality**: PDF/Word export for rundowns and scripts.
- **Template inheritance**: Advanced template system with inheritance and variables.
- **Asset versioning**: Version control for asset files.
- **Analytics**: Usage analytics and performance monitoring.
- **Advanced search**: Global search across rundowns, scripts, and assets.

*Last Updated: July 8, 2025 - Post copilot_instructions_3.markdown completion*
===== END docs/06_todo_and_issues.markdown =====

===== docs/MODAL_USAGE.md =====
# Modal Usage and Naming Conventions

This document outlines the conventions for creating, naming, and using modals within the Disaffected Production Suite.

## Naming Conventions

To maintain consistency and improve code readability, all modal-related assets should follow these naming patterns:

1.  **Modal Component Files**: PascalCase, ending with `Modal.vue`.
    *   Example: `AssetBrowserModal.vue`, `VoModal.vue`.

2.  **Visibility State Properties**: camelCase, starting with `show` and ending with `Modal`.
    *   Example: `showAssetBrowserModal`, `showVoModal`.

3.  **Event Emitters (to show a modal)**: kebab-case, starting with `show-` and ending with `-modal`.
    *   Example: `@show-asset-browser-modal`, `@show-vo-modal`.

## Implementation Pattern

Modals should be implemented as separate components and imported into the parent view or component where they are used (e.g., `ContentEditor.vue`).

### Parent Component (`ContentEditor.vue`)

1.  **Import**: Import the modal components.
    ```javascript
    import AssetBrowserModal from './modals/AssetBrowserModal.vue';
    import TemplateManagerModal from './modals/TemplateManagerModal.vue';
    ```

2.  **Component Registration**: Register the modals in the `components` object.
    ```javascript
    components: {
      AssetBrowserModal,
      TemplateManagerModal,
      // ... other components
    },
    ```

3.  **Data Properties**: Define data properties to control modal visibility.
    ```javascript
    data() {
      return {
        showAssetBrowserModal: false,
        showTemplateManagerModal: false,
        // ... other data properties
      };
    },
    ```

4.  **Template Usage**: Include the modal component in the template, using props and events to control visibility.
    ```html
    <AssetBrowserModal
      :visible="showAssetBrowserModal"
      @update:visible="showAssetBrowserModal = $event"
      @asset-selected="insertAssetReference"
    />

    <TemplateManagerModal
      :visible="showTemplateManagerModal"
      @update:visible="showTemplateManagerModal = $event"
      @template-selected="insertTemplateReference"
    />
    ```

5.  **Event Handling**: Listen for events from child components (like `EditorPanel.vue`) to toggle modal visibility.
    ```html
    <EditorPanel
      @show-asset-browser-modal="showAssetBrowserModal = true"
      @show-template-manager-modal="showTemplateManagerModal = true"
      ...
    />
    ```

### Modal Component (`ExampleModal.vue`)

Modals should use a `visible` prop and emit an `update:visible` event to allow for two-way binding with the parent.

```vue
<template>
  <v-dialog v-model="dialog" ...>
    <!-- Modal content -->
  </v-dialog>
</template>

<script>
export default {
  name: 'ExampleModal',
  props: {
    visible: {
      type: Boolean,
      default: false,
    },
  },
  data() {
    return {
      dialog: this.visible,
    };
  },
  watch: {
    visible(newVal) {
      this.dialog = newVal;
    },
    dialog(newVal) {
      if (!newVal) {
        this.$emit('update:visible', false);
      }
    },
  },
  methods: {
    closeModal() {
      this.$emit('update:visible', false);
    },
    // ... other methods
  },
};
</script>
```

===== END docs/MODAL_USAGE.md =====

===== disaffected-ui/vue.config.js =====
const { defineConfig } = require('@vue/cli-service')
module.exports = defineConfig({
  transpileDependencies: true,
  
  devServer: {
    host: '0.0.0.0',
    port: 8080,
    allowedHosts: 'all',
    proxy: {
      '/api': {
        target: 'http://192.168.51.210:8888',
        changeOrigin: true,
        secure: false,
        pathRewrite: { '^/api': '' }
      }
    }
  }
});

===== END disaffected-ui/vue.config.js =====

===== disaffected-ui/package.json =====
{
  "name": "disaffected-ui",
  "version": "0.2.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint",
    "start:prod": "node simple-server.js",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "dependencies": {
    "@mdi/font": "5.9.55",
    "axios": "^1.9.0",
    "core-js": "^3.8.3",
    "express": "^4.17.3",
    "http-proxy-middleware": "^3.0.5",
    "lodash-es": "^4.17.21",
    "pinia": "^2.1.7",
    "roboto-fontface": "*",
    "vue": "^3.2.13",
    "vue-router": "^4.5.1",
    "vue-toastification": "^2.0.0-rc.5",
    "vuedraggable": "^4.1.0",
    "vuetify": "^3.8.8",
    "webfontloader": "^1.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "@vue/test-utils": "^2.4.0",
    "@testing-library/vue": "^8.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3",
    "jest": "^26.0.0",
    "vue-jest": "^5.0.0-alpha.10"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/vue3-essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser",
      "requireConfigFile": false
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead",
    "not ie 11"
  ]
}

===== END disaffected-ui/package.json =====

===== disaffected-ui/src/main.js =====
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import { vuetify } from './plugins/vuetify'
import { loadFonts } from './plugins/webfontloader'
import axios from 'axios'
import { createPinia } from 'pinia'
import Toast from 'vue-toastification'
import 'vue-toastification/dist/index.css'

loadFonts()

const app = createApp(App)

app.use(router)
app.use(vuetify)
app.use(createPinia())
app.use(Toast, {
  transition: "Vue-Toastification__bounce",
  maxToasts: 20,
  newestOnTop: true
});

app.config.globalProperties.$axios = axios.create({
  baseURL: process.env.VUE_APP_API_BASE_URL || '/api',
});

app.mount('#app')

===== END disaffected-ui/src/main.js =====

===== disaffected-ui/src/components/ContentEditor.vue =====
<template>
  <div class="content-editor-wrapper">
    <!-- Main Toolbar -->
    <v-toolbar dense flat class="main-toolbar" style="height: 128px; min-height: 128px; max-height: 128px; align-items: flex-start;">
      <v-spacer></v-spacer>
      <v-toolbar-items>
        <v-btn text @click="saveAllContent">Save</v-btn>
        <v-btn text>Publish</v-btn>
      </v-toolbar-items>
    </v-toolbar>

    <!-- Show Info Header (restored) -->
    <ShowInfoHeader
      :title="currentShowTitle"
      :episode-info="currentEpisodeInfo"
      :episode-number="currentEpisodeNumber"
      :air-date="currentAirDate"
      :production-status="currentProductionStatus"
      :total-runtime="totalRuntime"
      :episodes="episodes"
      :production-statuses="productionStatuses"
      @update:episodeNumber="handleEpisodeChange"
      @update:airDate="val => currentAirDate = val"
      @update:productionStatus="val => currentProductionStatus = val"
    />

    <!-- Color Configuration Panel -->
    <ColorSelector />

    <!-- Main Content Area (restored) -->
    <div class="main-content-area">
      <!-- Rundown Panel -->
      <v-card class="rundown-panel" flat
             :style="{ border: '2px solid ' + statusBarColor, borderRadius: '0' }">
        <div class="script-status-horizontal-bar"
             :style="{ backgroundColor: statusBarColor, color: statusBarTextColor }">
          <span class="status-text">{{ currentProductionStatus }}</span>
        </div>
        <div class="rundown-header-row">
          <span class="rundown-header-title">Rundown</span>
          <div style="flex:1"></div>
          <v-btn icon x-small class="rundown-header-btn" @click="showNewItemModal = true"><v-icon size="18">mdi-plus</v-icon></v-btn>
          <v-btn icon x-small class="rundown-header-btn"><v-icon size="18">mdi-dots-vertical</v-icon></v-btn>
        </div>
        <div>
          <div class="rundown-table-header">
            <div class="index-container">Index</div>
            <div class="item-type-cell">Type</div>
            <div class="item-details">Slug</div>
            <div class="item-duration">Duration</div>
          </div>
          <v-virtual-scroll
            :items="rundownItems"
            :item-height="26"
            class="rundown-list"
            bench="10"
          >
            <template v-slot:default="{ item, index }">
              <div
                class="rundown-item"
                :class="{
                  'selected-item': selectedItemIndex === index,
                  'ghost-class': isDragging && draggedIndex === index,
                  'drag-over-above': dragOverIndex === index && dropZonePosition === 'above',
                  'drag-over-below': dragOverIndex === index && dropZonePosition === 'below'
                }"
                :style="resolveItemStyle(item, index)"
                draggable="true"
                @click="selectRundownItem(index)"
                @dragstart="dragStart($event, item, index)"
                @dragend="dragEnd($event, item, index)"
                @dragover.prevent="dragOver($event, index)"
                @drop.prevent="dragDrop($event, index)"
              >
                <div class="item-content">
                  <div class="index-container">
                    <span class="item-index">{{ index + 1 }}</span>
                  </div>
                  <div class="item-type-cell">
                    <span class="item-type">{{ item.type.toUpperCase() }}</span>
                  </div>
                  <div class="item-details">
                    <span class="item-slug">{{ item.slug.toLowerCase() }}</span>
                  </div>
                  <span class="item-duration">{{ item.duration }}</span>
                </div>
              </div>
            </template>
          </v-virtual-scroll>
        </div>
      </v-card>

      <!-- Editor Panel -->
      <div class="editor-panel">
        <EditorPanel
          :item="currentRundownItem"
          v-model:script-content="scriptContent"
          v-model:scratch-content="scratchContent"
          v-model:editor-mode="editorMode"
          @update:editor-mode="editorMode = $event"
          :has-unsaved-changes="hasUnsavedChanges"
          :show-rundown-panel="showRundownPanel"
          @save="saveAllContent"
          @toggle-rundown-panel="showRundownPanel = !showRundownPanel"
          @show-asset-browser-modal="showAssetBrowserModal = true"
          @show-template-manager-modal="showTemplateManagerModal = true"
          @show-gfx-modal="showGfxModal = true"
          @show-fsq-modal="showFsqModal = true"
          @show-sot-modal="showSotModal = true"
          @show-vo-modal="showVoModal = true"
          @show-nat-modal="showNatModal = true"
          @show-pkg-modal="showPkgModal = true"
          @show-vox-modal="showVoxModal = true"
          @show-mus-modal="showMusModal = true"
          @show-live-modal="showLiveModal = true"
          @content-change="onContentChange"
          @metadata-change="onMetadataChange"
        />
      </div>
    </div>

    <!-- Modals -->
    <AssetBrowserModal
      :visible="showAssetBrowserModal"
      @update:visible="showAssetBrowserModal = $event"
      @asset-selected="insertAssetReference"
    />

    <TemplateManagerModal
      :visible="showTemplateManagerModal"
      @update:visible="showTemplateManagerModal = $event"
      @template-selected="insertTemplateReference"
    />

    <GfxModal
      v-model:show="showGfxModal"
      v-model:slug="gfxSlug"
      v-model:description="gfxDescription"
      :graphic-preview="graphicPreview"
      @paste-from-clipboard="pasteFromClipboard"
      @select-file="selectFile"
      @paste-url="pasteUrl"
      @submit="submitGraphic"
    />

    <FsqModal v-model:show="showFsqModal" @submit="submitFsq" />
    <SotModal v-model:show="showSotModal" @submit="submitSot" />
    <VoModal v-model:show="showVoModal" @submit="submitVo" />
    <NatModal v-model:show="showNatModal" @submit="submitNat" />
    <PkgModal v-model:show="showPkgModal" @submit="submitPkg" />
    <VoxModal v-model:show="showVoxModal" @submit="submitVox" />
    <MusModal v-model:show="showMusModal" @submit="submitMus" />
    <LiveModal v-model:show="showLiveModal" @submit="submitLive" />

    <NewItemModal
      v-model:show="showNewItemModal"
      v-model:valid="newItemFormValid"
      v-model:type="newItemType"
      v-model:slug="newItemSlug"
      v-model:duration="newItemDuration"
      v-model:description="newItemDescription"
      :loading="creatingNewItem"
      :item-types="rundownItemTypes"
      :duration-rules="durationRules"
      @create="createNewItem"
      @cancel="cancelNewItem"
    />
  </div>
</template>

<script>
import axios from 'axios';
// import { API_BASE_URL } from '@/config.js'; // Temporarily remove to simplify
import EditorPanel from './EditorPanel.vue';
import AssetBrowserModal from './modals/AssetBrowserModal.vue';
import TemplateManagerModal from './modals/TemplateManagerModal.vue';
import GfxModal from './modals/GfxModal.vue';
import FsqModal from './modals/FsqModal.vue';
import SotModal from './modals/SotModal.vue';
import VoModal from './modals/VoModal.vue';
import NatModal from './modals/NatModal.vue';
import PkgModal from './modals/PkgModal.vue';
import VoxModal from './modals/VoxModal.vue';
import MusModal from './modals/MusModal.vue';
import LiveModal from './modals/LiveModal.vue';
import NewItemModal from './modals/NewItemModal.vue';
import ColorSelector from './ColorSelector.vue';
import ShowInfoHeader from './content-editor/ShowInfoHeader.vue';
import { getColorValue, resolveVuetifyColor } from '../utils/themeColorMap';
import { debounce } from 'lodash-es';

export default {
  name: 'ContentEditor',
  
  async mounted() {
    await this.fetchShowInfo();
    await this.fetchEpisodes();
  },

  created() {
    // Initialize currentEpisodeNumber from sessionStorage if available
    const lastEpisode = sessionStorage.getItem('selectedEpisode');
    if (lastEpisode) {
      this.currentEpisodeNumber = lastEpisode;
    }
    this.debouncedAutoSave = debounce(this.saveAllContent, 2500);
  },

  components: {
    EditorPanel,
    AssetBrowserModal,
    TemplateManagerModal,
    GfxModal,
    FsqModal,
    SotModal,
    VoModal,
    NatModal,
    PkgModal,
    VoxModal,
    MusModal,
    LiveModal,
    NewItemModal,
    ColorSelector,
    ShowInfoHeader,
  },
  props: {
    // episode: {
    //   type: String,
    //   default: null
    // }
  },
  data() {
    return {
      // Layout state
      showRundownPanel: true,
      rundownPanelWidth: 'wide', // 'narrow' or 'wide'
      
      // Editor state
      editorMode: 'script', // 'script', 'scratch', 'metadata', or 'code'
      selectedItemIndex: -1, // Start with no selection
      editingItemIndex: -1, // Index of item being edited (grows by 2%)
      hasUnsavedChanges: false,
      loadingRundown: true, // Start in loading state
      rundownError: null,
      
      // Show Information
      showInfo: {},
      currentEpisodeNumber: '', // This will be updated from session
      currentAirDate: '',
      currentProductionStatus: 'draft',
      productionStatuses: [
        { title: 'Draft', value: 'draft' },
        { title: 'Approved', value: 'approved' },
        { title: 'Production', value: 'production' },
        { title: 'Completed', value: 'completed' }
      ],
      
      // Episode management
      selectedEpisode: null,
      episodes: [],
      loading: false,
      saving: false,
      
      // Drag state
      isDragging: false,
      draggedIndex: -1,
      draggedItem: null,
      dragOverIndex: -1, // Index of the item being dragged over
      dropZonePosition: null, // 'above' or 'below'
      
      // Auto-save tracking
      itemContentBackup: {},
      autoSaveOnSwitch: true, // Auto-save when switching items instead of prompting
      autoSaveTimeout: null,
      hoveredItemIndex: -1, // Index of the item being hovered
      
      // Content
      scriptContent: '',
      scratchContent: '',
      
      // Asset management
      showAssetBrowserModal: false, // Standardized name
      showTemplateManagerModal: false, // Standardized name
      selectedFiles: [],
      availableAssets: [
        // Mock data - will be replaced with API calls
        {
          id: 'asset_001',
          filename: 'opening_graphics.png',
          type: 'image',
          url: '/assets/opening_graphics.png',
          thumbnail: '/assets/thumbs/opening_graphics.png'
        },
        {
          id: 'asset_002',
          filename: 'interview_segment.mp4',
          type: 'video',
          url: '/assets/interview_segment.mp4'
        }
      ],
      
      // Mock rundown data - TODO: Replace with props/API when backend is ready
      rundownItems: [
        // Mock data for testing drag and drop - remove when API is integrated
        {
          id: 'item_001',
          type: 'segment',
          slug: 'opening-segment',
          duration: '00:02:30',
          description: 'Opening segment with intro graphics'
        },
        {
          id: 'item_002',
          type: 'sot',
          slug: 'interview-smith',
          duration: '00:05:45',
          description: 'Interview with John Smith'
        },
        {
          id: 'item_003',
          type: 'pkg',
          slug: 'climate-report',
          duration: '00:03:15',
          description: 'Climate change report package'
        },
        {
          id: 'item_004',
          type: 'commercial',
          slug: 'commercial-break-1',
          duration: '00:02:00',
          description: 'First commercial break'
        },
        {
          id: 'item_005',
          type: 'vo',
          slug: 'sports-highlights',
          duration: '00:01:45',
          description: 'Sports highlights voiceover'
        }
      ],
      
      // Metadata editing
      currentItemMetadata: {
        title: '',
        type: 'segment',
        slug: '',
        duration: '00:05:30',
        description: '',
        guests: '',
        tags: '',
        sponsor: '',
        campaign: '',
        segment_number: 1,
        live_status: 'live'
      },
      customMetadataYaml: '',
      itemTypes: [
        { title: 'Segment', value: 'segment' },
        { title: 'Advertisement', value: 'ad' },
        { title: 'Promo', value: 'promo' },
        { title: 'Call to Action', value: 'cta' },
        { title: 'Unknown', value: 'unknown' }
      ],
      
      // Graphic attachment state
      showGfxModal: false,
      showFsqModal: false,
      showSotModal: false,
      showVoModal: false,
      showNatModal: false,
      showPkgModal: false,
      showVoxModal: false,
      showMusModal: false,
      showLiveModal: false,
      
      // Rundown management state
      showNewItemModal: false,
      showRundownOptions: false,
      
      // New item form state
      newItemFormValid: false,
      newItemType: '',
      newItemTitle: '',
      newItemSlug: '',
      newItemDuration: '',
      newItemDescription: '',
      newItemGuests: '',
      newItemCustomer: '',
      newItemLink: '',
      creatingNewItem: false,
      
      // Available rundown item types
      rundownItemTypes: [
        { title: 'Segment', value: 'segment' },
        { title: 'Advertisement', value: 'ad' },
        { title: 'Promo', value: 'promo' },
        { title: 'Call to Action', value: 'cta' },
        { title: 'Transition', value: 'trans' }
      ],
      
      graphicDetails: {
        url: '',
        file: null
      },
      gfxSlug: '',
      gfxDescription: '',
      graphicPreview: null,
      graphicFile: null,
      
      // Total runtime for the episode
      totalRuntime: '00:00:00',

      // Show title for the current episode
      showTitle: 'Disaffected',
    }
  },
   computed: {
    styleCache() {
      // This computed property acts as a reactive cache for our item styles.
      // It depends on the Vuetify theme object, so it will automatically
      // re-calculate if the user changes the application's theme colors.
      const theme = this.$vuetify.theme;
      if (!theme) return {};

      const cache = {};
      const currentTheme = theme.dark ? 'dark' : 'light';
      const themeColors = theme.themes[currentTheme];

      // Define all possible sources for colors.
      const itemTypes = this.rundownItemTypes.map(t => t.value ? t.value.toLowerCase() : '');
      const states = ['selection', 'hover', 'draglight', 'highlight', 'dropline'];
      const allColorSources = [...new Set([...states, ...itemTypes, 'unknown'])];

      for (const source of allColorSources) {
        const colorName = getColorValue(source);
        const colorValue = themeColors[colorName]; // e.g., themeColors['primary']
        if (colorValue) {
          cache[source] = { backgroundColor: colorValue };
        }
      }

      return cache;
    },

    currentShowTitle() {
      // Use the title from showTitle data property if available, otherwise fallback
      return this.showTitle || (this.showInfo && this.showInfo.title) || 'Disaffected';
    },

    currentEpisodeInfo() {
      try {
        const episode = this.episodes.find(e => e.id === this.selectedEpisodeId);
        if (!episode) {
          return { title: 'No episode selected', status: 'unknown' };
        }
        return {
          title: episode.title,
          status: episode.status || 'unknown'
        };
      } catch (error) {
        // console.error('Error in currentEpisodeInfo:', error);
        return { title: 'Error', status: 'error' };
      }
    },
    
    // Layout width calculations for consistent sizing
    rundownPanelWidthValue() {
      return this.rundownPanelWidth === 'narrow' ? '25%' : '40%'
    },
    
    rundownHeaderWidth() {
      return this.rundownPanelWidth === 'narrow' ? '25%' : '40%'
    },
    
    cueToolbarWidth() {
      if (!this.showRundownPanel) return '100%'
      return this.rundownPanelWidth === 'narrow' ? '75%' : '60%'
    },
    
    statusBarColor() {
      try {
        const status = this.currentEpisodeInfo.status;
        const color = this.themeColorMap.status[status];
        return color || 'grey';
      } catch (error) {
        // console.error('Error in statusBarColor computed property:', error);
        return 'grey';
      }
    },
    statusBarTextColor() {
      try {
        const color = this.statusBarColor;
        return this.isDarkColor(color) ? 'white' : 'black';
      } catch (error) {
        // console.error('Error in statusBarTextColor computed property:', error);
        return 'black';
      }
    },
    
    scriptPlaceholder() {
      return `# ${this.currentRundownItem?.slug || 'Script Content'}\n\nWrite your script content here using Markdown...\n\nUse the toolbar buttons above to insert:\n- **GFX** cues for graphics\n- **FSQ** cues for full-screen quotes  \n- **SOT** cues for video content\n\nExample:\n[GFX: opening_title.png]\nWelcome to today's show...\n\n[SOT: interview_clip.mp4 | 0:30-2:15]\nHere's what our guest had to say...`
    },
    
    scratchPlaceholder() {
      return `# Brainstorming & Notes

Use this space for:
• Research notes and ideas
• Asset planning and references  
• Interview questions
• Production notes

💡 **Smart Features:**
- Drag & drop assets from your file system
- Paste URLs for automatic link cards
- @ mentions for collaboration
- # tags for organization

Try dropping an image or video file here!`
    },
    
    currentRundownItem() {
      return (this.rundownItems && this.rundownItems[this.selectedItemIndex]) || null
    },
    
    // Form validation rules
    titleRules() {
      return [
        v => !!v || 'Title is required'
      ]
    },
    durationRules() {
      return [
        v => !v || /^\d{2}:\d{2}:\d{2}$/.test(v) || 'Duration must be in HH:MM:SS format'
      ]
    }
  },
  methods: {
    resolveItemStyle(item, index) {
      try {
        const itemType = item && item.type ? item.type.toLowerCase() : 'unknown';
        let style = {};

        // Base style from the theme color map
        const colorName = getColorValue(itemType);
        const resolvedColor = resolveVuetifyColor(colorName, this.$vuetify);

        if (resolvedColor) {
          style.backgroundColor = resolvedColor;
          // Simple luminance check for text color
          if (resolvedColor.startsWith('#')) {
            const hex = resolvedColor.replace('#', '');
            if (hex.length === 6) {
              const r = parseInt(hex.substr(0,2), 16);
              const g = parseInt(hex.substr(2,2), 16);
              const b = parseInt(hex.substr(4,2), 16);
              style.color = (0.299 * r + 0.587 * g + 0.114 * b) / 255 < 0.5 ? '#FFFFFF' : '#000000';
            } else {
              style.color = '#000000';
            }
          } else {
            style.color = '#000000';
          }
        } else {
          style.backgroundColor = '#E0E0E0'; // Fallback grey
          style.color = '#000000';
        }

        // Override for selected item
        if (this.selectedItemIndex === index) {
          const selectionColorName = getColorValue('selection');
          const selectionColor = resolveVuetifyColor(selectionColorName, this.$vuetify);
          if (selectionColor) {
            style.backgroundColor = selectionColor;
            // Simple luminance check for text color
            if (selectionColor.startsWith('#')) {
              const hex = selectionColor.replace('#', '');
              if (hex.length === 6) {
                const r = parseInt(hex.substr(0,2), 16);
                const g = parseInt(hex.substr(2,2), 16);
                const b = parseInt(hex.substr(4,2), 16);
                style.color = (0.299 * r + 0.587 * g + 0.114 * b) / 255 < 0.5 ? '#FFFFFF' : '#000000';
              } else {
                style.color = '#000000';
              }
            } else {
              style.color = '#000000';
            }
          }
        }
        // Override for hovered item (but not if it's the selected item)
        else if (this.hoveredItemIndex === index) {
           const hoverColorName = getColorValue('hover');
           const hoverColor = resolveVuetifyColor(hoverColorName, this.$vuetify);
           if (hoverColor) {
             // Add a subtle border instead of changing the whole background
             style.boxShadow = `inset 4px 0 0 0 ${hoverColor}`;
           }
        }

        return style;
      } catch (error) {
        // console.error('Error in resolveItemStyle:', error);
        return {}; // Return empty object on error
      }
    },

    async fetchShowInfo() {
      this.loading = true;
      try {
        // Use a relative path that the proxy will catch
        const response = await axios.get('/api/show-info');
        this.showInfo = response.data;
        this.showTitle = response.data.title || 'Disaffected';
      } catch (error) {
        this.rundownError = 'Failed to load show information. Please check backend connection.';
        this.showTitle = 'Disaffected';
      } finally {
        this.loading = false;
      }
    },

    async fetchEpisodes() {
      this.loading = true;
      this.rundownError = null;
      try {
        // Use a relative path that the proxy will catch
        const response = await axios.get('/api/episodes');
        const episodesArr = response.data.episodes || [];
        if (Array.isArray(episodesArr)) {
          this.episodes = episodesArr.map(episode => ({
            // Always use zero-padded string for value
            title: `${episode.id || episode.episode_number}: ${episode.title || 'Untitled'}`,
            value: episode.id ? episode.id.toString().padStart(4, '0') : (episode.episode_number ? episode.episode_number.toString().padStart(4, '0') : ''),
            air_date: episode.airdate,
            status: episode.status || 'unknown'
          }));
        } else {
          this.episodes = [];
        }
        
        // Restore last selected episode from session storage
        const lastEpisode = sessionStorage.getItem('selectedEpisode');
        let episodeToLoad = null;

        if (lastEpisode && this.episodes.some(e => e.value == lastEpisode)) {
          episodeToLoad = lastEpisode;
        } else if (this.episodes.length > 0) {
          // Default to the latest episode (assuming they are sorted by episode_number)
          const sortedEpisodes = [...this.episodes].sort((a, b) => b.value - a.value);
          episodeToLoad = sortedEpisodes[0].value;
        }
        
        if (episodeToLoad) {
          this.handleEpisodeChange(episodeToLoad, true);
        }
        // Ensure currentEpisodeNumber matches a value in the episodes list
        if (!this.episodes.some(e => e.value === this.currentEpisodeNumber) && this.episodes.length > 0) {
          this.currentEpisodeNumber = this.episodes[0].value;
        }
        
      } catch (error) {
        this.rundownError = `Failed to load episodes. ${error.message}. Check console for details.`;
        this.rundownError = 'Failed to load episodes. No data available.';
        this.episodes = [];
      } finally {
        this.loading = false;
      }
    },

    padEpisodeNumber(num) {
      // Always returns a string padded to 4 digits
      if (typeof num === 'number') num = String(num);
      return num ? num.padStart(4, '0') : '';
    },
    async fetchRundown(episodeId) {
      const paddedId = this.padEpisodeNumber(episodeId);
      if (!paddedId) {
        this.rundownItems = [];
        return;
      }
      this.loadingRundown = true;
      this.rundownError = null;
      try {
        const response = await axios.get(`/api/episodes/${paddedId}/rundown`);
        this.rundownItems = response.data.items;
        this.selectedItemIndex = this.rundownItems.length > 0 ? 0 : -1;
        if (this.selectedItemIndex !== -1) {
          this.loadItemContent(this.rundownItems[this.selectedItemIndex]);
        }
      } catch (error) {
        this.rundownError = `Failed to load rundown for episode ${paddedId}.`;
        this.rundownItems = [];
      } finally {
        this.loadingRundown = false;
      }
    },
    async saveAllContent() {
      const paddedId = this.padEpisodeNumber(this.currentEpisodeNumber);
      this.hasUnsavedChanges = false;
      this.saving = true;
      try {
        const payload = {
          // ... construct payload
        };
        await axios.post(`/api/episodes/${paddedId}/rundown`, payload);
        this.hasUnsavedChanges = false;
      } catch (error) {
        // Handle save error
      } finally {
        this.saving = false;
      }
    },
    async handleEpisodeChange(episodeNumber, skipSessionUpdate = false) {
      const paddedNumber = this.padEpisodeNumber(episodeNumber);
      if (!paddedNumber) return;

      // Set the current episode number and update session storage
      this.currentEpisodeNumber = paddedNumber;
      if (!skipSessionUpdate) {
        sessionStorage.setItem('selectedEpisode', paddedNumber);
      }

      try {
        // Fetch new episode data, but do not reset the episode number here.
        const infoRes = await axios.get(`/api/episodes/${paddedNumber}/info`);
        const info = infoRes.data.info || {};
        this.currentAirDate = info.airdate || '';
        this.currentProductionStatus = info.status || 'draft';
        this.totalRuntime = info.total_runtime || '01:00:00';
        this.showTitle = info.title || 'Untitled';
        this.currentShowSubtitle = info.subtitle || 'No Subtitle';
      } catch (err) {
        // Clear out old data on failure
        this.currentAirDate = '';
        this.currentProductionStatus = 'draft';
        this.totalRuntime = '00:00:00';
        this.showTitle = 'Untitled';
        this.currentShowSubtitle = 'No Subtitle';
      }

      // Fetch the rundown with the correct, verified episode number
      this.fetchRundown(this.currentEpisodeNumber);
    },
    getStatusLabel(status) {
      // TODO: Implement actual logic for status label
      return status ? status.charAt(0).toUpperCase() + status.slice(1) : 'Unknown';
    },
    loadItemContent(/* item */) {
      // TODO: Implement actual logic to load item content
      // For now, just log the item
    },
    dragStart(event, item, index) {
      if (!item) return;
      this.isDragging = true;
      this.draggedIndex = index;
      this.draggedItem = item;
      event.dataTransfer.setData('text/plain', index.toString());
      event.dataTransfer.effectAllowed = 'move';
    },
    
    dragEnd() {
      this.isDragging = false;
      this.draggedIndex = -1;
      this.draggedItem = null;
      this.dragOverIndex = -1;
      this.dropZonePosition = null;
    },
    
    dragOver(event, index) {
      if (!this.isDragging || index === this.draggedIndex || !this.rundownItems[index]) return;
      
      const rect = event.currentTarget.getBoundingClientRect();
      const midpoint = rect.top + rect.height / 2;
      const isAbove = event.clientY < midpoint;
      
      this.dragOverIndex = index;
      this.dropZonePosition = isAbove ? 'above' : 'below';
    },
    
    dragEnter(event, index) {
      event.preventDefault();
      event.stopPropagation();
      
      if (!this.isDragging) return;
      
      // Don't update if we're dragging over the same item
      if (index === this.draggedIndex) {
        return;
      }
      
      // Determine drop zone position
      const rect = event.currentTarget.getBoundingClientRect();
      const midpoint = rect.top + rect.height / 2;
      const isAbove = event.clientY < midpoint;
      
      this.dragOverIndex = index;
      this.dropZonePosition = isAbove ? 'above' : 'below';
    },
    
    dragLeave(event) {
      // Only clear drag state if leaving the entire rundown area
      const rundownList = document.querySelector('.rundown-list');
      if (rundownList && event.relatedTarget && !rundownList.contains(event.relatedTarget)) {
        this.dragOverIndex = -1;
        this.dropZonePosition = null;
      }
    },
    
    dragDrop(event, targetIndex) {
      if (!this.isDragging || !this.draggedItem || !this.rundownItems[targetIndex]) return;

      // Immediately clear visual drop indicators to prevent render errors
      this.dragOverIndex = -1;
      this.dropZonePosition = null;

      const sourceIndex = this.draggedIndex;
      
      // If dropped on the same item, just reset the drag state
      if (sourceIndex === targetIndex) {
        this.isDragging = false;
        this.draggedIndex = -1;
        this.draggedItem = null;
        return;
      }
      
      let finalTargetIndex = targetIndex;
      if (this.dropZonePosition === 'below') {
        finalTargetIndex = targetIndex + 1;
      }
      if (sourceIndex < finalTargetIndex) {
        finalTargetIndex--;
      }

      const newItems = [...this.rundownItems];
      const [draggedItem] = newItems.splice(sourceIndex, 1);
      newItems.splice(finalTargetIndex, 0, draggedItem);
      
      this.rundownItems = newItems;
      this.hasUnsavedChanges = true;
      
      if (this.selectedItemIndex === sourceIndex) {
        this.selectedItemIndex = finalTargetIndex;
      }
      
      this.isDragging = false;
      this.draggedIndex = -1;
      this.draggedItem = null;
    },
    getNextEpisodeNumber() {
      // Find the highest episode number in this.episodes and increment
      let maxNum = 0;
      this.episodes.forEach(e => {
        const num = parseInt(e.value, 10);
        if (!isNaN(num) && num > maxNum) maxNum = num;
      });
      return String(maxNum + 1).padStart(4, '0');
    },
    selectRundownItem(index) {
      this.selectedItemIndex = index;
    },
    
    // Missing stub methods to prevent Vue warnings
    onContentChange(/* content */) {
      this.hasUnsavedChanges = true;
    },
    
    onMetadataChange(/* metadata */) {
      this.hasUnsavedChanges = true;
    },
    
    insertAssetReference(/* assetData */) {
      // Stub implementation - could be enhanced to actually insert asset reference
      this.hasUnsavedChanges = true;
    },

    insertTemplateReference(/* templateData */) {
      // Stub implementation
      this.hasUnsavedChanges = true;
    },

    // Missing modal and action methods
    pasteFromClipboard() {
    },
    
    selectFile() {
    },
    
    pasteUrl() {
    },
    
    submitGraphic() {
    },
    
    submitFsq(data) {
      this.scriptContent += `[FSQ: ${data.quote} | ${data.source}${data.timestamp ? ' | ' + data.timestamp : ''}]\n`;
      this.showFsqModal = false;
      this.hasUnsavedChanges = true;
    },
    
    submitSot(data) {
      this.scriptContent += `[SOT: ${data.filename} | ${data.duration}${data.description ? ' | ' + data.description : ''}${data.timestamp ? ' | ' + data.timestamp : ''}]\n`;
      this.showSotModal = false;
      this.hasUnsavedChanges = true;
    },
    
    submitVo(data) {
      this.scriptContent += `[VO: ${data.text}${data.duration ? ' | ' + data.duration : ''}${data.timestamp ? ' | ' + data.timestamp : ''}]\n`;
      this.showVoModal = false;
      this.hasUnsavedChanges = true;
    },
    
    submitNat(data) {
      this.scriptContent += `[NAT: ${data.description}${data.duration ? ' | ' + data.duration : ''}${data.timestamp ? ' | ' + data.timestamp : ''}]\n`;
      this.showNatModal = false;
      this.hasUnsavedChanges = true;
    },
    
    submitPkg(data) {
      this.scriptContent += `[PKG: ${data.title} | ${data.duration}${data.timestamp ? ' | ' + data.timestamp : ''}]\n`;
      this.showPkgModal = false;
      this.hasUnsavedChanges = true;
    },
    
    submitVox(data) {
      this.scriptContent += `[VOX: ${data.slug} | ${data.description} | ${data.duration}]\n`;
      this.showVoxModal = false;
      this.hasUnsavedChanges = true;
    },

    submitMus(data) {
      this.scriptContent += `[MUS: ${data.slug} | ${data.description} | ${data.duration}]\n`;
      this.showMusModal = false;
      this.hasUnsavedChanges = true;
    },

    submitLive(data) {
      this.scriptContent += `[LIVE: ${data.slug} | ${data.description} | ${data.duration}]\n`;
      this.showLiveModal = false;
      this.hasUnsavedChanges = true;
    },

    createNewItem() {
    },
    
    cancelNewItem() {
    },
    
    // Color utility methods
    hexToRgb(hex) {
      // Remove # if present
      hex = hex.replace('#', '');
      
      // Convert hex to RGB
      const r = parseInt(hex.substring(0, 2), 16);
      const g = parseInt(hex.substring(2, 4), 16);
      const b = parseInt(hex.substring(4, 6), 16);
      
      return { r, g, b };
    },
    
    isColorDark(rgbString) {
      // If rgbString is an object with r, g, b properties
      if (typeof rgbString === 'object' && rgbString.r !== undefined) {
        const { r, g, b } = rgbString;
        // Calculate luminance
        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
        return luminance < 0.5;
      }
      
      // If rgbString is a string like "rgb(r, g, b)"
      if (typeof rgbString === 'string' && rgbString.startsWith('rgb')) {
        const matches = rgbString.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
        if (matches) {
          const r = parseInt(matches[1]);
          const g = parseInt(matches[2]);
          const b = parseInt(matches[3]);
          const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
          return luminance < 0.5;
        }
      }
      
      // Default to false if we can't parse the color
      return false;
    }
  }
}
</script>

<style scoped>
.content-editor-wrapper {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

.main-toolbar {
  background-color: var(--v-toolbar-bg, #FFFFFF);
  border-bottom: 1px solid var(--v-divider-color, #E0E0E0);
}

.rundown-panel {
  position: relative;
  width: 40%;
  /* Remove static border-right so only dynamic border shows */
  /* border-right: 1px solid var(--v-divider-color, #E0E0E0); */
  display: flex;
  flex-direction: column;
  transition: width 0.3s ease;
  border: 2px solid transparent; /* fallback for dynamic border */
  border-radius: 0 !important;
  box-sizing: border-box;
  min-height: 0; /* Allow flexbox to shrink */
  overflow: hidden; /* Prevent content overflow */
}

.script-status-horizontal-bar {
  width: 100%;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  font-weight: 700;
  font-size: 1rem;
  letter-spacing: 1px;
  margin: 0;
  padding: 0;
  border-radius: 0 !important;
  border: none;
}
.status-text {
  width: 100%;
  text-align: center;
}

.rundown-header-row {
  display: flex;
  flex-direction: row;
  align-items: center;
  background-color: var(--v-toolbar-bg, #F5F5F5);
  border-bottom: 1px solid var(--v-divider-color, #E0E0E0);
  padding: 0 16px;
  height: 48px;
}

.rundown-header-title {
  font-weight: 500;
  color: var(--v-primary-text-color, #000000);
  font-size: 1.2rem;
  margin-left: 12px;
}

.status-box {
  border-radius: 4px;
  padding: 0 16px;
  display: flex;
  align-items: center;
  font-weight: 600;
  height: 36px;
  min-width: 90px;
  justify-content: center;
  background: #888;
  color: #fff;
}

.panel-toolbar {
  display: flex;
  flex-direction: row;
  align-items: center;
  background-color: var(--v-toolbar-bg, #F5F5F5);
  border-bottom: 1px solid var(--v-divider-color, #E0E0E0);
}

.toolbar-title {
  font-weight: 500;
  color: var(--v-primary-text-color, #000000);
}

.rundown-list {
  flex: 1;
  overflow-y: auto;
  padding: 0;
  margin: 0;
  min-height: 0; /* Allow flexbox to shrink */
  height: auto; /* Remove any fixed height constraints */
}

.rundown-item {
  --base-row-height: 26px;
  cursor: grab;
  padding: 0;
  display: flex;
  align-items: stretch;
  border-bottom: 1px solid var(--v-divider-color, #E0E0E0);
  min-height: var(--base-row-height);
  height: var(--base-row-height);
  position: relative;
}

.rundown-item:active {
  cursor: grabbing;
}

.rundown-item.selected-item {
  /* Remove static selected background, let inline style handle it */
  /* background: none !important; */
  /* color: inherit !important; */
  height: calc(var(--base-row-height) * 2); /* Dynamically double the base height */
  transform: translateX(8px);
  border-left: 4px solid var(--v-accent-base, #FFC107);
}

.rundown-item.ghost-class {
  opacity: 0.5;
  background: #c8ebfb;
}

.rundown-item.dragging {
  opacity: 0.7;
  transform: rotate(2deg);
  box-shadow: 0 4px 8px rgba(0,0,0,0.3);
}

.rundown-item:hover {
  background-color: rgba(0,0,0,0.02);
}

.rundown-item.no-hover:hover {
  background-color: unset;
}

.item-content {
  flex: 1;
  display: flex;
  align-items: stretch; /* Make children fill height */
  width: 100%;
}

.index-container {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 6px; /* Reduced from 12px to 6px (50% reduction) */
  background-color: rgba(0,0,0,0.5);
  color: white;
  flex-shrink: 0;
  min-width: 48px; /* Ensures all index cells are at least this wide */
  width: 48px;     /* Fixed width for all index cells */
  box-sizing: border-box;
}

.rundown-item.selected-item .index-container {
  background-color: rgba(0,0,0,0.65);
  color: white;
}

.rundown-item.selected-item .item-type-cell {
  background-color: rgba(255,255,255,0.25);
}

.item-index {
  font-weight: 500;
  font-size: 12px; /* Reduced by 2 points from typical 14px */
}

.drag-handle {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 8px;
  cursor: grab;
  flex-shrink: 0;
}

.item-type-cell {
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 65px;
  width: 65px;
  max-width: 65px;
  box-sizing: border-box;
  background-color: rgba(255,255,255,0.15);
}

.item-details {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center; /* Vertical centering */
  padding: 2px 6px; /* Reduced from 4px 12px to 2px 6px (50% reduction) */
  overflow: hidden;
  white-space: nowrap;
}

.item-type {
  font-size: 9px;
  font-weight: 400;
  text-transform: uppercase;
  line-height: 1.2;
  /* Remove vertical-align, use flex centering */
}

.item-slug {
  font-size: 14px;
  font-weight: 300;
  text-overflow: ellipsis;
  overflow: hidden;
  text-transform: lowercase;
}

.item-duration {
  font-size: 12px;
  font-weight: 400;
  display: flex;
  align-items: center;
  padding: 0 8px; /* Reduced from 16px to 8px (50% reduction) */
  flex-shrink: 0;
}

.editor-panel {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.main-content-area {
  flex: 1;
  display: flex;
  overflow: hidden;
  min-height: 0; /* Allow flexbox to shrink properly */
}

.rundown-table-header {
  display: flex;
  flex-direction: row;
  align-items: center;
  width: 100%;
  background: rgba(0,0,0,0.08);
  font-size: 13px;
  font-weight: 600;
  color: #333;
  border-bottom: 1px solid var(--v-divider-color, #E0E0E0);
}
.rundown-table-header > div {
  text-align: center;
  padding: 8px 0;
}
.rundown-table-header .index-container {
  min-width: 48px;
  width: 48px;
  max-width: 48px;
}
.rundown-table-header .item-type-cell {
  min-width: 65px;
  width: 65px;
  max-width: 65px;
}
.rundown-table-header .item-details {
  flex: 1;
  text-align: left;
  padding-left: 12px;
}
.rundown-table-header .item-duration {
  min-width: 60px;
  width: 60px;
  max-width: 60px;
  text-align: right;
  padding-right: 16px;
}

.rundown-header-btn {
  padding: 0 2px !important;
  margin-left: 4px;
  height: 28px !important;
  width: 28px !important;
 
  opacity: 0.5;
  transform: rotate(1deg);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  z-index: 1000;
  background: rgba(255, 193, 7, 0.1) !important;
}

.dragging {
  opacity: 0.8;
  transform: rotate(1deg);
  z-index: 1000;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.drag-over-above::before {
  content: '';
  position: absolute;
  top: -12px;
  left: 0;
  right: 0;
  height: 12px;
  background: #FFC107;
  z-index: 1000;
}

.drag-over-below::after {
  content: '';
  position: absolute;
  bottom: -12px;
  left: 0;
  right: 0;
  height: 12px;
  background: #FFC107;
  z-index: 1000;
}

@keyframes pulse-yellow {
  0% {
    background: rgba(255, 193, 7, 0.8);
    border-color: rgba(255, 193, 7, 0.9);
    box-shadow: 0 4px 12px rgba(255, 193, 7, 0.4);
    transform: scale(1);
  }
  100% {
    background: rgba(255, 193, 7, 1);
    border-color: rgba(255, 193, 7, 1);
    box-shadow: 0 6px 16px rgba(255, 193, 7, 0.7);
    transform: scale(1.02);
  }
}

.rundown-item {
  transition: all 0.2s ease;
}

.rundown-item:not(.ghost-class):not(.dragging) {
  transform: translateZ(0);
}
</style>


===== END disaffected-ui/src/components/ContentEditor.vue =====

===== disaffected-ui/src/components/RundownManager.vue =====
<template>
  <v-container fluid class="pa-0">
    <v-row class="header-row ma-0">
      <v-col cols="12" class="pa-0">
        <!-- Full-width Episode Title Bar -->
        <div class="episode-title-bar-fullwidth">
          <div class="episode-title-bar-content">
            <div class="episode-selector-container">
              <span class="episode-label-above">Episode</span>
              <EpisodeSelector
                :episodes="episodes"
                :current-episode="selectedEpisode"
                :loading="loading"
                :disabled="loading"
                @episode-changed="handleEpisodeChange"
                button-class="episode-select-titlebar"
              />
            </div>
            <div class="title-bar-actions">
              <v-btn 
                color="white" 
                variant="text" 
                size="small"
                @click="toggleEpisodeDetails"
                class="toggle-details-btn"
              >
                <v-icon size="16" :class="{ 'rotate-180': showEpisodeDetails }">mdi-chevron-down</v-icon>
                {{ showEpisodeDetails ? 'Hide Episode Details' : 'Show Episode Details' }}
              </v-btn>
              <v-btn 
                color="white" 
                variant="text" 
                size="small"
                @click="saveEpisodeInfo"
                :disabled="!episodeInfo || updatingEpisode"
                :loading="updatingEpisode"
                class="save-commit-btn"
              >
                <v-icon start size="16">mdi-content-save</v-icon>
                Save & Commit
              </v-btn>
            </div>
          </div>
        </div>
        
        <!-- Episode Info Card with proper margins -->
        <div class="episode-info-section">
          <div class="d-flex align-center justify-space-between mb-1">
            <h2 class="text-h5 font-weight-bold">Rundown Editor</h2>
          </div>
          
          <v-card class="episode-info-card" variant="outlined">
            
            <!-- Collapsible Episode Details -->
            <v-expand-transition>
              <v-card-text v-show="showEpisodeDetails" class="pa-5">
                <v-row no-gutters>
                  <!-- Left column -->
                  <v-col cols="4" class="pr-4">
                    <div class="inline-edit-field">
                      <label class="field-label">Title:</label>
                      <v-text-field
                        v-model="inlineEpisodeInfo.title"
                        variant="solo"
                        density="compact"
                        hide-details
                        class="inline-input title-input"
                        placeholder="Episode title"
                      />
                    </div>
                    <div class="inline-edit-field">
                      <label class="field-label">Subtitle:</label>
                      <v-text-field
                        v-model="inlineEpisodeInfo.subtitle"
                        variant="solo"
                        density="compact"
                        hide-details
                        class="inline-input"
                        placeholder="Subtitle"
                      />
                    </div>
                    <div class="inline-edit-field">
                      <label class="field-label">Guests:</label>
                      <v-text-field
                        v-model="inlineEpisodeInfo.guest"
                        variant="solo"
                        density="compact"
                        hide-details
                        class="inline-input"
                        placeholder="guests, comma separated"
                      />
                    </div>
                    <div class="inline-edit-field">
                      <label class="field-label">Tags:</label>
                      <v-text-field
                        v-model="inlineEpisodeInfo.tags"
                        variant="solo"
                        density="compact"
                        hide-details
                        class="inline-input"
                        placeholder="tags, comma separated"
                      />
                    </div>
                  </v-col>
                  
                  <!-- Middle column -->
                  <v-col cols="4" class="px-3">
                    <div class="inline-edit-field">
                      <label class="field-label">Status:</label>
                      <v-select
                        v-model="inlineEpisodeInfo.status"
                        variant="solo"
                        density="compact"
                        hide-details
                        class="inline-input"
                        :items="[
                          { title: 'Draft', value: 'draft' },
                          { title: 'Production', value: 'production' },
                          { title: 'Ready', value: 'ready' },
                          { title: 'Archived', value: 'archived' }
                        ]"
                      />
                    </div>
                    <div class="inline-edit-field">
                      <label class="field-label">Air Date:</label>
                      <v-text-field
                        v-model="inlineEpisodeInfo.airdate"
                        variant="solo"
                        density="compact"
                        hide-details
                        type="date"
                        class="inline-input"
                      />
                    </div>
                    <div class="inline-edit-field">
                      <label class="field-label">Duration:</label>
                      <v-text-field
                        v-model="inlineEpisodeInfo.duration"
                        variant="solo"
                        density="compact"
                        hide-details
                        class="inline-input"
                        placeholder="HH:MM:SS"
                      />
                    </div>
                  </v-col>

                  <!-- Right column - Compact Stats -->
                  <v-col cols="2" class="pl-4">
                    <div class="status-table-container">
                      <h3 class="status-table-title">Stats</h3>
                      <v-table density="compact" class="status-table-embedded">
                        <tbody>
                          <tr>
                            <td class="text-caption font-weight-medium">Segments:</td>
                            <td class="text-caption">{{ segmentCount }}</td>
                          </tr>
                          <tr>
                            <td class="text-caption font-weight-medium">Transitions:</td>
                            <td class="text-caption">{{ transCount }}</td>
                          </tr>
                          <tr>
                            <td class="text-caption font-weight-medium">Promos:</td>
                            <td class="text-caption">{{ promoCount }}</td>
                          </tr>
                          <tr>
                            <td class="text-caption font-weight-medium">Adverts:</td>
                            <td class="text-caption">{{ advertCount }}</td>
                          </tr>
                          <tr>
                            <td class="text-caption font-weight-medium">CTAs:</td>
                            <td class="text-caption">{{ ctaCount }}</td>
                          </tr>
                        </tbody>
                      </v-table>
                    </div>
                  </v-col>

                  <!-- Empty space for future content -->
                  <v-col cols="2" class="pl-4">
                    <!-- Reserved for future content -->
                  </v-col>
                </v-row>
              </v-card-text>
            </v-expand-transition>
          </v-card>
        </div>
      </v-col>
    </v-row>

    <!-- Controls row -->
    <v-row class="controls-row mb-4">
      <v-col cols="12" class="d-flex align-end justify-end gap-2">
        <!-- Action buttons -->
        <v-btn 
          color="success" 
          variant="outlined" 
          @click="showAddItemDialog = true" 
          :disabled="loading || !selectedEpisode"
          class="mr-2"
        >
          <v-icon start>mdi-plus</v-icon>
          Add New Item
        </v-btn>

        <v-btn 
          color="info" 
          variant="outlined" 
          @click="refreshData" 
          :disabled="loading"
          class="mr-2"
        >
          <v-icon start>mdi-refresh</v-icon>
          Refresh
        </v-btn>

        <v-btn 
          color="error" 
          variant="outlined" 
          @click="revertChanges" 
          :disabled="loading || segments.length === 0"
          style="display: none;"
        >
          <v-icon start>mdi-undo</v-icon>
          Revert
        </v-btn>

        <v-btn 
          color="primary" 
          variant="outlined" 
          @click="compileRundown" 
          :disabled="loading || segments.length === 0"
        >
          <v-icon start>mdi-cog</v-icon>
          Compile
        </v-btn>

        <v-btn 
          color="secondary" 
          variant="outlined" 
          class="ml-2" 
          @click="printRundown" 
          :disabled="loading || segments.length === 0"
        >
          <v-icon start>mdi-printer</v-icon>
          Print
        </v-btn>

        <v-btn 
          color="success" 
          class="ml-2" 
          @click="saveChanges" 
          :disabled="loading || segments.length === 0"
        >
          <v-icon start>mdi-content-save</v-icon>
          Save & Commit
        </v-btn>
      </v-col>
    </v-row>

    <!-- Selected Item Actions Row -->
    <v-row v-if="selectedItem" class="mb-4">
      <v-col cols="12">
        <v-card variant="outlined" class="selected-item-actions-compact">
          <div class="d-flex align-center justify-space-between h-100">
            <!-- Left section: Index and selection info -->
            <div class="d-flex align-center">
              <!-- Far left: Index number -->
              <div class="index-display">
                {{ (segments.findIndex(item => item.filename === selectedItem.filename) + 1) * 10 }}
              </div>
              
              <!-- Selection info -->
              <div class="d-flex align-center ml-3">
                <v-icon color="primary" size="16">mdi-cursor-pointer</v-icon>
                <span class="text-caption font-weight-medium ml-1">Selected:</span>
                <v-chip 
                  :class="resolveTypeClass(selectedItem.type)" 
                  size="x-small" 
                  class="ml-2 compact-chip"
                >
                  {{ selectedItem.type?.toUpperCase() || 'UNKNOWN' }}
                </v-chip>
                <span class="ml-2 text-body-2 selected-slug">{{ (selectedItem.slug || '').toLowerCase() }}</span>
              </div>
            </div>
            
            <!-- Right side: Action buttons -->
            <div class="d-flex align-center" style="gap: 0.5em;">
              <v-btn 
                color="primary" 
                variant="flat" 
                size="small"
                class="compact-btn"
                @click="editSelectedItem"
              >
                <v-icon start size="14">mdi-pencil</v-icon>
                Edit
              </v-btn>
              <v-btn 
                color="secondary" 
                variant="flat" 
                size="small"
                class="compact-btn"
                @click="duplicateSelectedItem"
              >
                <v-icon start size="14">mdi-content-copy</v-icon>
                Duplicate
              </v-btn>
              <v-btn 
                color="warning" 
                variant="flat" 
                size="small"
                class="compact-btn"
                @click="moveSelectedItem"
              >
                <v-icon start size="14">mdi-arrow-up-down</v-icon>
                Move
              </v-btn>
              <v-btn 
                color="error" 
                variant="outlined" 
                size="small"
                class="compact-btn"
                @click="deleteSelectedItem"
              >
                <v-icon start size="14">mdi-delete</v-icon>
                Delete
              </v-btn>
              <v-tooltip bottom>
                <template v-slot:activator="{ props }">
                  <v-btn 
                    v-bind="props"
                    color="info" 
                    variant="flat" 
                    size="small"
                    class="compact-btn"
                    icon
                  >
                    <v-icon size="14">mdi-keyboard</v-icon>
                  </v-btn>
                </template>
                <div class="pa-2">
                  <div><strong>Keyboard Shortcuts:</strong></div>
                  <div>↑/↓ - Navigate items</div>
                  <div>Enter - Edit</div>
                  <div>Ctrl+D - Duplicate</div>
                  <div>Delete - Remove</div>
                  <div>Esc - Clear selection</div>
                </div>
              </v-tooltip>
              <v-btn 
                color="grey" 
                variant="outlined" 
                size="small"
                class="compact-btn close-btn"
                @click="clearSelection"
              >
                <v-icon size="14">mdi-close</v-icon>
              </v-btn>
            </div>
          </div>
        </v-card>
      </v-col>
    </v-row>
    <!-- Rundown list -->
    <v-card-text @click="handleContainerClick">
      <div>
        <v-fade-transition>
          <div v-if="loading" class="text-center">
            <v-progress-circular 
              indeterminate 
              color="primary"
              size="64"
            />
            <p class="mt-2">Loading rundown...</p>
          </div>
        </v-fade-transition>

        <v-alert
          v-if="!loading && segments.length === 0"
          type="warning"
          outlined
          class="text-center"
        >
          No segments found for episode {{ selectedEpisode }}. 
          Check /mnt/sync/disaffected/episodes/{{ selectedEpisode }}/rundown/ for .md files.
        </v-alert>

        <v-virtual-scroll
          v-if="segments && segments.length > 0"
          :items="segments"
          :item-height="42"
          height="600"
        >
          <template v-slot:default="{ item, index }">
            <v-card
              :class="[resolveTypeClass(item.type), 'elevation-1', 'rundown-item-card', 'mb-1', { 'selected-item': selectedItemIndex === index, 'editing-item': editingItemIndex === index }]"
              @click="$emit('select-item', index)"
              @dblclick="$emit('edit-item', index)"
              style="cursor: pointer;"
            >
              <div class="compact-rundown-row" :style="{ color: getTextColorForItem(item?.type || 'unknown') }">
                <div class="index-number">{{ (index + 1) * 10 }}</div>
                <div class="type-label">{{ (item?.type || 'UNKNOWN').toUpperCase() }}</div>
                <div class="slug-text">{{ (item?.slug || '').toLowerCase() }}</div>
                <div v-if="rundownPanelWidth === 'wide'" class="duration-display">{{ formatDuration(item?.duration || '0:00') }}</div>
              </div>
            </v-card>
          </template>
        </v-virtual-scroll>
        
        <!-- Empty state when no segments but not loading -->
        <div v-else-if="!loading && segments && segments.length === 0" class="text-center py-8">
          <v-icon size="48" color="grey-lighten-1" class="mb-2">mdi-playlist-remove</v-icon>
          <p class="text-h6 text-grey-lighten-1">No rundown items found</p>
          <p class="text-caption text-grey">Click "Add New Item" to get started</p>
        </div>
      </div>
    </v-card-text>

    <!-- Add dialogs after v-container -->
    <v-dialog v-model="showUnavailableDialog" max-width="400">
      <v-card>
        <v-card-title>Unavailable</v-card-title>
        <v-card-text>
          This feature is not yet available. Talk to Kevin about when it will be ready.
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn color="primary" @click="showUnavailableDialog = false">Close</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <v-dialog v-model="showCompileDialog" max-width="400">
      <v-card>
        <v-card-title>Compile Script</v-card-title>
        <v-card-text>
          <v-radio-group v-model="compileTarget">
            <v-radio label="Director" value="director"></v-radio>
            <v-radio label="Host" value="host"></v-radio>
            <v-radio label="Prompter Operator" value="prompter"></v-radio>
          </v-radio-group>
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn color="error" @click="showCompileDialog = false">Cancel</v-btn>
          <v-btn color="primary" @click="handleCompile">Compile</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <v-dialog v-model="showPrintDialog" max-width="400">
      <v-card>
        <v-card-title>Print for</v-card-title>
        <v-card-text>
          <v-radio-group v-model="printTarget">
            <v-radio label="Director" value="director"></v-radio>
            <v-radio label="Host" value="host"></v-radio>
            <v-radio label="Prompter Operator" value="prompter"></v-radio>
          </v-radio-group>
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn color="error" @click="showPrintDialog = false">Cancel</v-btn>
          <v-btn color="primary" @click="handlePrint">Print</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <!-- Add New Rundown Item Dialog -->
    <v-dialog v-model="showAddItemDialog" max-width="700" persistent>
      <v-card class="add-item-dialog">
        <v-card-title class="add-item-header">
          <div class="header-content">
            <v-icon class="header-icon" size="28">mdi-plus-circle</v-icon>
            <span class="header-text">Add New Rundown Item</span>
          </div>
        </v-card-title>
        
        <v-divider class="header-divider"></v-divider>
        
        <v-card-text class="add-item-content">
          <v-container fluid class="pa-0">
            <!-- Essential Information Section -->
            <div class="form-section">
              <h3 class="section-title">
                <v-icon size="20" class="section-icon">mdi-information</v-icon>
                Essential Information
              </h3>
              <v-row>
                <v-col cols="12">
                  <v-text-field
                    v-model="newItem.slug"
                    label="Slug"
                    variant="outlined"
                    required
                    :rules="[v => !!v || 'Slug is required']"
                    hint="Short identifier for this item (e.g., 'intro-segment')"
                    prepend-inner-icon="mdi-tag"
                    class="required-field"
                  />
                </v-col>
                <v-col cols="12">
                  <v-text-field
                    v-model="newItem.title"
                    label="Title"
                    variant="outlined"
                    required
                    :rules="[v => !!v || 'Title is required']"
                    prepend-inner-icon="mdi-format-title"
                    class="required-field"
                  />
                </v-col>
                <v-col cols="6">
                  <v-select
                    v-model="newItem.type"
                    :items="itemTypes"
                    label="Type"
                    variant="outlined"
                    required
                    :rules="[v => !!v || 'Type is required']"
                    prepend-inner-icon="mdi-shape"
                    class="required-field"
                  />
                </v-col>
                <v-col cols="6">
                  <v-text-field
                    v-model="newItem.duration"
                    label="Duration"
                    variant="outlined"
                    placeholder="00:05:30"
                    prepend-inner-icon="mdi-clock-outline"
                    hint="Format: HH:MM:SS"
                  />
                </v-col>
              </v-row>
            </div>

            <!-- Additional Details Section -->
            <div class="form-section">
              <h3 class="section-title">
                <v-icon size="20" class="section-icon">mdi-text-box</v-icon>
                Additional Details
                <span class="optional-badge">Optional</span>
              </h3>
              <v-row>
                <v-col cols="12">
                  <v-textarea
                    v-model="newItem.description"
                    label="Description"
                    variant="outlined"
                    rows="3"
                    auto-grow
                    hint="Brief description of this rundown item"
                    prepend-inner-icon="mdi-text"
                  />
                </v-col>
                <v-col cols="6">
                  <v-text-field
                    v-model="newItem.guests"
                    label="Guests"
                    variant="outlined"
                    hint="Guest names (if applicable)"
                    prepend-inner-icon="mdi-account-multiple"
                  />
                </v-col>
                <v-col cols="6">
                  <v-text-field
                    v-model="newItem.tags"
                    label="Tags"
                    variant="outlined"
                    hint="Comma-separated tags"
                    prepend-inner-icon="mdi-tag-multiple"
                  />
                </v-col>
              </v-row>
            </div>
          </v-container>
        </v-card-text>
        
        <v-divider class="footer-divider"></v-divider>
        
        <v-card-actions class="add-item-actions">
          <div class="action-info">
            <v-icon size="16" class="info-icon">mdi-information-outline</v-icon>
            <span class="info-text">Item will be added to episode {{ selectedEpisode }}</span>
          </div>
          <v-spacer></v-spacer>
          <v-btn 
            color="error" 
            variant="outlined"
            @click="cancelAddItem"
            :disabled="creatingItem"
            class="action-btn"
          >
            <v-icon start>mdi-close</v-icon>
            Cancel
          </v-btn>
          <v-btn 
            color="success" 
            variant="elevated"
            @click="createNewItem"
            :disabled="!isNewItemValid || creatingItem"
            :loading="creatingItem"
            class="action-btn create-btn"
          >
            <v-icon start>mdi-plus</v-icon>
            Create Item
          </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <!-- Edit Episode Info Dialog -->
    <v-dialog v-model="showEditEpisodeDialog" max-width="800" persistent>
      <v-card class="edit-episode-dialog">
        <v-card-title class="edit-episode-header">
          <div class="header-content">
            <v-icon class="header-icon" size="28">mdi-television</v-icon>
            <span class="header-text">Edit Episode Information</span>
          </div>
        </v-card-title>
        
        <v-divider class="header-divider"></v-divider>
        
        <v-card-text class="edit-episode-content">
          <v-container fluid class="pa-0">
            <!-- Basic Information Section -->
            <div class="form-section">
              <h3 class="section-title">
                <v-icon size="20" class="section-icon">mdi-information</v-icon>
                Basic Information
              </h3>
              <v-row>
                <v-col cols="8">
                  <v-text-field
                    v-model="editableEpisodeInfo.title"
                    label="Episode Title"
                    variant="outlined"
                    prepend-inner-icon="mdi-format-title"
                  />
                </v-col>
                <v-col cols="4">
                  <v-text-field
                    v-model="editableEpisodeInfo.duration"
                    label="Duration"
                    variant="outlined"
                    placeholder="01:00:00"
                    prepend-inner-icon="mdi-clock-outline"
                    hint="Format: HH:MM:SS"
                  />
                </v-col>
                <v-col cols="12">
                  <v-text-field
                    v-model="editableEpisodeInfo.subtitle"
                    label="Subtitle"
                    variant="outlined"
                    prepend-inner-icon="mdi-subtitles"
                  />
                </v-col>
              </v-row>
            </div>

            <!-- Production Details Section -->
            <div class="form-section">
              <h3 class="section-title">
                <v-icon size="20" class="section-icon">mdi-calendar</v-icon>
                Production Details
              </h3>
              <v-row>
                <v-col cols="6">
                  <v-text-field
                    v-model="editableEpisodeInfo.airdate"
                    label="Air Date"
                    variant="outlined"
                    type="datetime-local"
                    prepend-inner-icon="mdi-calendar"
                  />
                </v-col>
                <v-col cols="6">
                  <v-select
                    v-model="editableEpisodeInfo.status"
                    label="Status"
                    variant="outlined"
                    :items="[
                      { title: 'Draft', value: 'draft' },
                      { title: 'In Review', value: 'review' },
                      { title: 'Production', value: 'production' },
                      { title: 'Ready', value: 'ready' },
                      { title: 'Archived', value: 'archived' }
                    ]"
                    prepend-inner-icon="mdi-progress-check"
                  />
                </v-col>
                <v-col cols="6">
                  <v-text-field
                    v-model="editableEpisodeInfo.guest"
                    label="Guests"
                    variant="outlined"
                    prepend-inner-icon="mdi-account-multiple"
                  />
                </v-col>
                <v-col cols="6">
                  <v-text-field
                    v-model="editableEpisodeInfo.slug"
                    label="Slug"
                    variant="outlined"
                    prepend-inner-icon="mdi-link"
                  />
                </v-col>
                <v-col cols="12">
                  <v-text-field
                    v-model="editableEpisodeInfo.tags"
                    label="Tags"
                    variant="outlined"
                    hint="Comma-separated tags"
                    prepend-inner-icon="mdi-tag-multiple"
                  />
                </v-col>
              </v-row>
            </div>
          </v-container>
        </v-card-text>
        
        <v-divider class="footer-divider"></v-divider>
        
        <v-card-actions class="edit-episode-actions">
          <div class="action-info">
            <v-icon size="16" class="info-icon">mdi-information-outline</v-icon>
            <span class="info-text">Changes will be saved to episode {{ selectedEpisode }} info.md</span>
          </div>
          <v-spacer></v-spacer>
          <v-btn 
            color="error" 
            variant="outlined"
            @click="cancelEpisodeEdit"
            :disabled="updatingEpisode"
            class="action-btn"
          >
            <v-icon start>mdi-close</v-icon>
            Cancel
          </v-btn>
          <v-btn 
            color="success" 
            variant="elevated"
            @click="saveEpisodeChanges"
            :disabled="updatingEpisode"
            :loading="updatingEpisode"
            class="action-btn save-btn"
          >
            <v-icon start>mdi-content-save</v-icon>
            Save Changes
          </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </v-container>

  <!-- Add this right after your v-container closing tag -->
  <div 
    v-if="showClickOverlay" 
    class="click-overlay"
    :class="{ 'single': clickType === 'single', 'double': clickType === 'double' }"
  >
    {{ clickType === 'single' ? 'SINGLE CLICK' : 'DOUBLE CLICK' }}
  </div>
</template>

<script>
import EpisodeSelector from "./EpisodeSelector.vue";
import axios from "axios"
import { getColorValue } from '../utils/themeColorMap'

export default {
  name: "RundownManager",
  components: { EpisodeSelector },
  data() {
    return {
      segments: [],
      selectedEpisode: null,
      episodes: [],
      episodeInfo: null,     // Episode info from info.md
      selectedItem: null,    // Currently selected rundown item
      loading: false,
      isDragging: false,
      dragError: null,
      showUnavailableDialog: false,
      showCompileDialog: false,
      showPrintDialog: false,
      showAddItemDialog: false,
      showEditEpisodeDialog: false,
      compileTarget: 'director',
      printTarget: 'director',
      singleClickActive: false,
      doubleClickActive: false,
      clickTimer: null,
      showClickOverlay: false,
      clickType: '',
      creatingItem: false,
      updatingEpisode: false,
      showEpisodeDetails: false,
      editableEpisodeInfo: {
        title: '',
        subtitle: '',
        duration: '',
        guest: '',
        tags: '',
        slug: '',
        status: '',
        airdate: ''
      },
      inlineEpisodeInfo: {
        title: '',
        subtitle: '',
        duration: '',
        guest: '',
        tags: '',
        slug: '',
        status: '',
        airdate: ''
      },
      newItem: {
        title: '',
        type: 'segment',
        slug: '',
        duration: '00:05:30',
        description: '',
        guests: '',
        tags: ''
      },
      itemTypes: [
        { title: 'Segment', value: 'segment' },
        { title: 'Advertisement', value: 'ad' },
        { title: 'Promo', value: 'promo' },
        { title: 'Call to Action', value: 'cta' },
        { title: 'Transition', value: 'trans' },
        { title: 'Unknown', value: 'unknown' }
      ]
    };
  },
  computed: {
    segmentCount() {
      return this.segments.filter(item => item.type === 'segment').length;
    },
    promoCount() {
      return this.segments.filter(item => item.type === 'promo').length;
    },
    advertCount() {
      return this.segments.filter(item => item.type === 'ad').length;
    },
    transCount() {
      return this.segments.filter(item => item.type === 'trans').length;
    },
    ctaCount() {
      return this.segments.filter(item => item.type === 'cta').length;
    },
    isNewItemValid() {
      return this.newItem.title.trim() && 
             this.newItem.slug.trim() && 
             this.newItem.type;
    },
    modalThemeColor() {
      if (!this.newItem.type) {
        return 'primary'; // Default blue theme
      }
      const color = getColorValue(this.newItem.type.toLowerCase());
      
      // Map colormap values to valid Vuetify theme colors
      const colorMapping = {
        'purple-accent': 'purple',
        'blue-accent': 'blue', 
        'green-accent': 'green',
        'red-accent': 'red',
        'yellow-accent': 'yellow',
        'grey-light': 'grey',
        'purple': 'purple',
        'blue': 'blue',
        'green': 'green', 
        'red': 'red',
        'yellow': 'yellow',
        'grey': 'grey',
        'indigo': 'indigo',
        'teal': 'teal',
        'cyan': 'cyan',
        'pink': 'pink',
        'orange': 'orange'
      };
      
      return colorMapping[color] || 'primary';
    },
    modalThemeColorRgb() {
      const colorName = this.modalThemeColor;
      
      // Use direct color values to ensure they always work
      const directColors = {
        'purple': '#9C27B0',
        'blue': '#2196F3', 
        'green': '#4CAF50',
        'red': '#F44336',
        'yellow': '#FFC107',
        'grey': '#9E9E9E',
        'indigo': '#3F51B5',
        'teal': '#009688',
        'cyan': '#00BCD4',
        'pink': '#E91E63',
        'orange': '#FF9800',
        'primary': '#1976D2'
      };
      
      return directColors[colorName] || directColors['primary'];
    }
  },
  watch: {
    // REMOVED route-based watchers
  },
  methods: {
    loadEpisodeFromSession() {
      const savedEpisodeId = sessionStorage.getItem('currentEpisodeId');
      if (savedEpisodeId && this.episodes.length > 0) {
        const episode = this.episodes.find(e => e.id === parseInt(savedEpisodeId));
        if (episode) {
          this.selectedEpisode = episode.value;
        } else {
          // Fallback to the latest episode if saved one isn't in the list
          this.selectLatestEpisode();
        }
      } else if (this.episodes.length > 0) {
        this.selectLatestEpisode();
      }
      
      if (this.selectedEpisode) {
        this.loadEpisode(this.selectedEpisode);
      }
    },

    selectLatestEpisode() {
      const latestEpisode = this.episodes.reduce((latest, current) => {
        return (latest.id > current.id) ? latest : current;
      });
      this.selectedEpisode = latestEpisode.value;
      sessionStorage.setItem('currentEpisodeId', latestEpisode.id);
    },

    async handleEpisodeChange(newEpisode) {
      if (newEpisode && newEpisode.value !== this.selectedEpisode) {
        this.selectedEpisode = newEpisode.value;
        sessionStorage.setItem('currentEpisodeId', newEpisode.id);
        await this.loadEpisode(newEpisode.value);
      }
    },
    async fetchEpisodes() {
      this.loading = true;
      try {
        const response = await axios.get('/api/episodes');
        
        // Assuming response.data is an array of { id, title, value }
        this.episodes = response.data.map(ep => ({
          ...ep,
          // Ensure episodes have a 'value' property for the selector
          value: ep.value || `EP${String(ep.id).padStart(3, '0')}`
        }));

        // After fetching, determine the initial episode
        this.loadEpisodeFromSession();

      } catch (err) {
        // console.error("Failed to fetch episodes:", err);
      } finally {
        this.loading = false;
      }
    },
    async fetchEpisodeInfo(episodeId) {
      if (!episodeId) return;
      
      try {
        const response = await axios.get(
          `/api/episodes/${episodeId}/info`
        );
        
        this.episodeInfo = response.data.info;
        
        // Also populate inline editing fields
        this.populateInlineEpisodeInfo();
      } catch (err) {
        this.episodeInfo = null;
        this.clearInlineEpisodeInfo();
      }
    },
    async loadEpisode(episodeId) {
      if (!episodeId) return;
      
      this.loading = true;
      try {
        // Fetch both rundown segments and episode info in parallel
        const [rundownResponse] = await Promise.all([
          axios.get(`/api/episodes/${episodeId}/rundown`),
          this.fetchEpisodeInfo(episodeId)
        ]);
        
        if (rundownResponse.data && Array.isArray(rundownResponse.data.items)) {
            this.segments = rundownResponse.data.items.map((item, index) => ({
            ...item,
            filename: item.filename || `item-${index}-${Date.now()}`, // Ensure filename always exists
            id: item.id || `item-${Math.random().toString(36).substr(2, 9)}`
          })).filter(item => item.filename && item.filename.trim() !== '');
        } else {
            this.segments = [];
        }
      } catch (err) {
        this.segments = [];
      } finally {
        this.loading = false;
      }
    },
    async saveChanges() {
      try {
        const payload = { segments: this.segments.map(segment => ({ filename: segment.filename })) };
        await axios.post(
          `/api/episodes/${this.selectedEpisode}/reorder`,
          payload
        );
        alert("Rundown reordered successfully!");
      } catch (err) {
        alert("Failed to save rundown: " + err.message);
      }
    },
    revertChanges() {
      this.showUnavailableDialog = true;
    },
    compileRundown() {
      this.showCompileDialog = true;
    },
    handleCompile() {
      this.showCompileDialog = false;
      // Implement actual compilation
    },
    printRundown() {
      this.showPrintDialog = true;
    },
    handlePrint() {
      this.showPrintDialog = false;
      // Implement actual printing
    },
    
    // Selection management methods
    clearSelection() {
      this.selectedItem = null;
    },
    
    editSelectedItem() {
      if (!this.selectedItem) return;
      // TODO: Implement edit functionality - could open a modal or navigate to edit page
      alert(`Edit functionality for "${this.selectedItem.slug}" will be implemented soon!`);
    },
    
    duplicateSelectedItem() {
      if (!this.selectedItem) return;
      // TODO: Create a copy of the selected item
      alert(`Duplicate functionality for "${this.selectedItem.slug}" will be implemented soon!`);
    },
    
    moveSelectedItem() {
      if (!this.selectedItem) return;
      // TODO: Implement move to specific position functionality
      alert(`Move functionality for "${this.selectedItem.slug}" will be implemented soon!`);
    },
    
    async deleteSelectedItem() {
      if (!this.selectedItem) return;
      
      const confirmed = confirm(`Are you sure you want to delete "${this.selectedItem.slug}"?`);
      if (!confirmed) return;
      
      try {
        // TODO: Implement actual delete API call
        
        // For now, just remove from local array
        const index = this.segments.findIndex(item => 
          item.filename === this.selectedItem.filename
        );
        if (index !== -1) {
          this.segments.splice(index, 1);
          this.selectedItem = null;
          alert('Item deleted successfully! (Note: This is currently local only)');
        }
      } catch (error) {
        alert('Failed to delete item: ' + error.message);
      }
    },
    
    // New item creation methods
    async createNewItem() {
      if (!this.isNewItemValid) return;
      
      this.creatingItem = true;
      try {
        const response = await axios.post(
          `/api/episodes/${this.selectedEpisode}/item`,
          this.newItem
        );
        
        // Show success message
        alert(`Successfully created: ${response.data.filename}`);
        
        // Reset form and close dialog
        this.resetNewItemForm();
        this.showAddItemDialog = false;
        
        // Reload the rundown to show the new item
        await this.loadEpisode(this.selectedEpisode);
        
      } catch (err) {
        alert("Failed to create new rundown item: " + (err.response?.data?.detail || err.message));
      } finally {
        this.creatingItem = false;
      }
    },
    cancelAddItem() {
      this.resetNewItemForm();
      this.showAddItemDialog = false;
    },
    resetNewItemForm() {
      this.newItem = {
        title: '',
        type: 'segment',
        slug: '',
        duration: '00:05:30',
        description: '',
        guests: '',
        tags: ''
      };
    },
    resolveTypeClass(type) {
      if (!type || type === 'unknown') {
        return 'bg-grey-light';
      }
      
      const normalizedType = type.toLowerCase();
      
      const color = getColorValue(normalizedType);
      const cssClass = `bg-${color}`;
      
      return cssClass;
    },
    dragStart() {
      this.isDragging = true;
      const dragLightColor = getColorValue('draglight');
      const highlightColor = getColorValue('highlight');
      const droplineColor = getColorValue('dropline');  // Add dropline color
    
      // Set all CSS custom properties
      document.documentElement.style.setProperty('--highlight-color', `rgb(var(--v-theme-${highlightColor}))`);
      document.documentElement.style.setProperty('--draglight-color', `rgb(var(--v-theme-${dragLightColor}))`);
      document.documentElement.style.setProperty('--dropline-color', `rgb(var(--v-theme-${droplineColor}))`);

      // Force a reflow to ensure animation triggers consistently
      requestAnimationFrame(() => {
        document.body.offsetHeight;
      });
    },
    dragEnd() {
      this.isDragging = false;

      // Force animation reset
      requestAnimationFrame(() => {
        document.body.offsetHeight;
      });
    },
    handleDragChange(/*evt*/) {
      // Validate new order if needed
    },
    handleSingleClick(item) {
      clearTimeout(this.clickTimer);
      this.clickTimer = setTimeout(() => {
        if (!this.doubleClickActive) {
          
          // Set selected item
          this.selectedItem = item;
          
          // Visual feedback
          this.singleClickActive = true;
          this.clickType = 'single';
          this.showClickOverlay = true;
          setTimeout(() => {
            this.singleClickActive = false;
            this.showClickOverlay = false;
          }, 300);
        }
      }, 200);
    },
    handleDoubleClick(item) {
      clearTimeout(this.clickTimer);
      this.doubleClickActive = true;
      
      // Select the item and open edit
      this.selectedItem = item;
      
      // Show visual feedback
      this.clickType = 'double';
      this.showClickOverlay = true;
      
      // Quick edit action (for now just call edit)
      setTimeout(() => {
        this.editSelectedItem();
        this.doubleClickActive = false;
        this.showClickOverlay = false;
      }, 200);
    },
    
    // Handle clicks on empty space to clear selection
    handleContainerClick(event) {
      // Only clear selection if clicking on the container itself, not child elements
      if (event.target === event.currentTarget) {
        this.clearSelection();
      }
    },
    
    // Keyboard shortcuts
    handleKeydown(event) {
      // Only handle shortcuts when not typing in inputs
      if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
        return;
      }
      
      if (!this.selectedItem) return;
      
      switch (event.key) {
        case 'Delete':
        case 'Backspace':
          event.preventDefault();
          this.deleteSelectedItem();
          break;
        case 'Enter':
          event.preventDefault();
          this.editSelectedItem();
          break;
        case 'Escape':
          event.preventDefault();
          this.clearSelection();
          break;
        case 'd':
          if (event.ctrlKey || event.metaKey) {
            event.preventDefault();
            this.duplicateSelectedItem();
          }
          break;
        case 'ArrowUp':
          event.preventDefault();
          this.selectPreviousItem();
          break;
        case 'ArrowDown':
          event.preventDefault();
          this.selectNextItem();
          break;
      }
    },
    
    // Navigation methods
    selectPreviousItem() {
      if (!this.selectedItem || this.segments.length === 0) return;
      
      const currentIndex = this.segments.findIndex(item => 
        item.filename === this.selectedItem.filename
      );
      
      if (currentIndex > 0) {
        this.selectedItem = this.segments[currentIndex - 1];
      }
    },
    
    selectNextItem() {
      if (!this.selectedItem || this.segments.length === 0) return;
      
      const currentIndex = this.segments.findIndex(item => 
        item.filename === this.selectedItem.filename
      );
      
      if (currentIndex < this.segments.length - 1) {
        this.selectedItem = this.segments[currentIndex + 1];
      }
    },
    calculateBacktime(currentIndex) {
      // Calculate backtime: total show duration minus cumulative duration up to current index
      if (!this.episodeInfo || !this.episodeInfo.duration) {
        // Fallback to old behavior if no episode info
        let totalSeconds = 0;
        try {
          for (let i = currentIndex; i < this.segments.length; i++) {
            const duration = this.segments[i].duration || '00:00:00';
            totalSeconds += this.parseDurationToSeconds(duration);
          }
        } catch (error) {
          return '00:00:00';
        }
        return this.formatSecondsToTime(totalSeconds);
      }

      try {
        // Get total show duration in seconds
        const totalShowSeconds = this.parseDurationToSeconds(this.episodeInfo.duration);
        
        // Calculate cumulative duration of all segments up to (but not including) current index
        let cumulativeSeconds = 0;
        for (let i = 0; i < currentIndex; i++) {
          const duration = this.segments[i].duration || '00:00:00';
          cumulativeSeconds += this.parseDurationToSeconds(duration);
        }
        
        // Backtime = total show duration - cumulative duration up to current item
        const backtimeSeconds = totalShowSeconds - cumulativeSeconds;
        
        return this.formatSecondsToTime(Math.max(0, backtimeSeconds));
      } catch (error) {
        return '00:00:00';
      }
    },
    
    parseDurationToSeconds(duration) {
      // Parse duration string (HH:MM:SS or MM:SS) to total seconds
      if (!duration || duration === 'N/A') return 0;
      
      // Convert to string if it's not already
      const durationStr = String(duration);
      
      const parts = durationStr.split(':');
      if (parts.length === 3) {
        // HH:MM:SS format
        return parseInt(parts[0]) * 3600 + parseInt(parts[1]) * 60 + parseInt(parts[2]);
      } else if (parts.length === 2) {
        // MM:SS format
        return parseInt(parts[0]) * 60 + parseInt(parts[1]);
      }
      return 0;
    },
    
    formatSecondsToTime(totalSeconds) {
      // Format seconds back to HH:MM:SS
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;
      
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    },
    async refreshData() {
      
      try {
        this.loading = true;
        
        // Save current order mapping (filename -> position in current segments array)
        const currentOrder = new Map();
        this.segments.forEach((segment, index) => {
          if (segment.filename) {
            currentOrder.set(segment.filename, index);
          }
        });
        
        // Clear current selection
        this.selectedItem = null;
        
        // Fetch fresh episode list
        await this.fetchEpisodes();
        
        // If we have a selected episode, reload its data while preserving order
        if (this.selectedEpisode) {
          await this.loadEpisodePreservingOrder(this.selectedEpisode, currentOrder);
        }
        
        // Show success feedback
        this.$nextTick(() => {
          // Do nothing
        });
        
      } catch (error) {
        // console.error('Error during data refresh:', error);
      } finally {
        this.loading = false;
      }
    },
    
    async loadEpisodePreservingOrder(episodeId, currentOrder) {
      if (!episodeId) return;
      
      try {
        // Fetch both rundown segments and episode info in parallel
        const [rundownResponse] = await Promise.all([
          axios.get(`/api/episodes/${episodeId}/rundown`),
          this.fetchEpisodeInfo(episodeId)
        ]);
        
        // Process the fresh data
        const freshSegments = rundownResponse.data.map((entry, index) => ({
          ...entry.metadata,
          filename: entry.filename || `item-${index}-${Date.now()}`,
          type: entry.metadata?.type || 'unknown',
          slug: entry.metadata?.slug || 'Untitled',
          id: entry.metadata?.id || `id-${index}`,
          duration: entry.metadata?.duration || 'N/A'
        })).filter(item => item.filename && item.filename.trim() !== '');
        
        // If we have a current order to preserve, sort the fresh data accordingly
        if (currentOrder && currentOrder.size > 0) {
          
          // Separate items that exist in current order vs new items
          const orderedItems = [];
          const newItems = [];
          
          freshSegments.forEach(item => {
            if (currentOrder.has(item.filename)) {
              orderedItems.push({
                item,
                originalIndex: currentOrder.get(item.filename)
              });
            } else {
              newItems.push(item);
            }
          });
          
          // Sort ordered items by their original position
          orderedItems.sort((a, b) => a.originalIndex - b.originalIndex);
          
          // Combine: preserved order items first, then new items at the end
          this.segments = [
            ...orderedItems.map(entry => entry.item),
            ...newItems
          ];
          
        } else {
          // No previous order to preserve, use fresh order
          this.segments = freshSegments;
        }
        
      } catch (err) {
        // Fallback to regular load
        await this.loadEpisode(episodeId);
      }
    },
    toggleEpisodeDetails() {
      this.showEpisodeDetails = !this.showEpisodeDetails;
    },
    
    // Color and theme management methods
    updateSelectionColors() {
      // Update CSS custom properties for selection colors
      const selectionColor = getColorValue('primary') || 'blue';
      document.documentElement.style.setProperty('--selection-color', `rgb(var(--v-theme-${selectionColor}))`);
      
      const droplineColor = getColorValue('yellow') || 'warning';
      document.documentElement.style.setProperty('--dropline-color', `rgb(var(--v-theme-${droplineColor}))`);
    },
    
    updateModalTheme() {
      // Update modal theme colors if needed
      const themeColor = getColorValue('surface') || 'background';
      document.documentElement.style.setProperty('--modal-bg', `rgb(var(--v-theme-${themeColor}))`);
    },
  },
  
  created() {
    // Initialize colors
    const highlightColor = getColorValue('highlight');
    document.documentElement.style.setProperty('--highlight-color', `rgb(var(--v-theme-${highlightColor}))`);
    this.updateSelectionColors();

    // Initialize modal theme
    this.updateModalTheme();
    
    // Add keyboard event listeners
    document.addEventListener('keydown', this.handleKeydown);
  },
  
  mounted() {
    this.fetchEpisodes();  // This will now also trigger loading the episode from session
  },
  
  beforeUnmount() {
    // Clean up keyboard event listeners
    document.removeEventListener('keydown', this.handleKeydown);
  }
};
</script>

<style scoped>
/*============================================================
  🛡️ PROTECTED: CORE RUNDOWN STYLES - DO NOT MODIFY 
============================================================*/

/* Force square corners */
.v-card,
.v-card.elevation-1,
:deep(.v-card),
:deep(.v-card__text) {
  border-radius: 0 !important;
}

/* Core layout structure */
.rundown-row {
  min-height: 42px !important;
  max-height: 42px !important;
  width: 100%;
  margin: 0;
}

.type-col {
  width: 120px !important;
  min-width: 120px !important;
  max-width: 120px !important;
}

/* Cell styling */
.type-cell {
  height: 100%;
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 0;
  padding: 0;
  border-right: 1px solid rgba(0, 0, 0, 0.1);
  background: rgba(0, 0, 0, 0.1);
}

.index-number {
  font-size: 0.85rem;
  font-weight: 700;
  opacity: 0.9;
  font-family: monospace;
  min-width: 35px;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.2);
  color: rgba(255, 255, 255, 0.95);
  z-index: 1;
}

/* Drag and drop states */
.sortable-chosen {
  background: var(--draglight-color) !important;
  cursor: grabbing !important;
  transform: translateX(-35px) !important;
  z-index: 100;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2) !important;
  color: rgba(0, 0, 0, 0.87) !important;  /* Add high contrast for dragged item */
}

.sortable-chosen .index-number {
  color: rgba(255, 255, 255, 0.95) !important;  /* Keep index number white */
}

.sortable-chosen .type-label,
.sortable-chosen .slug-text,
.sortable-chosen .duration-box {
  color: rgba(0, 0, 0, 0.87) !important;  /* Ensure text is dark for contrast */
}

.sortable-ghost {
  opacity: 0.5;
  background: var(--highlight-color) !important;
  border: 2px dashed var(--dropline-color) !important;
}

.sortable-drag {
  opacity: 0.3;
}

/* Hover states */
.v-card.elevation-1:hover:not(.dragging):not(.sortable-chosen) {
  background: var(--highlight-color) !important;
  cursor: grab;
  color: rgba(0, 0, 0, 0.87) !important;
}

/*============================================================
  🛡️ END PROTECTED CORE STYLES
============================================================*/

/* Safe to modify styles below this line */

/* Adjust container padding */
:deep(.v-container) {
  padding: 0 !important;
}

/* Remove card text padding */
:deep(.v-card-text) {
  padding: 0 !important;
}

/* Update header row and controls row to match */
.header-row,
.controls-row {
  background: rgba(0, 0, 0, 0.03);
  padding: 8px 16px;  /* Consistent padding */
  margin: 0;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  width: 100%;
}

/* Update controls row styling */
.controls-row {
  margin: 0;
  padding: 0 !important;
  width: 100%;
  background: transparent;
  border: none;
}

/* Update button styling in the scoped styles section */
.controls-row .v-btn {
  --v-btn-height: 40px !important;  /* Increased from 28px to match v-select */
  font-size: 0.875rem !important;   /* Slightly larger font */
  letter-spacing: 0.25px !important;
  padding: 0 16px !important;       /* Increased padding */
}

.controls-row .v-btn .v-icon {
  font-size: 18px !important;       /* Slightly larger icons */
  margin-right: 4px !important;     /* Space between icon and text */
}

/* Update episode select to ensure consistent height */
:deep(.episode-select .v-field) {
  background: white !important;
  border: 2px solid rgb(var(--v-theme-primary)) !important;
  border-radius: 4px !important;
  height: 40px !important;
  min-height: 40px !important;
}

:deep(.episode-select .v-field__input) {
  min-height: 40px !important;  /* Removed the extra '0' */
  padding-top: 0 !important;
  padding-bottom: 0 !important;
  font-size: 1.25rem !important;
  font-weight: 500 !important;
  color: rgb(var(--v-theme-primary)) !important;  /* Blue text */
}

:deep(.episode-select .v-field__field .v-label) {
  position: absolute !important;
  top: -32px !important;
  left: 0 !important;
  transform: none !important;
  font-size: 0.75rem !important;
  color: rgb(var(--v-theme-primary)) !important;  /* Blue label */
  background: transparent !important;
  z-index: 1 !important;
  margin: 0 !important;
  padding: 0 !important;
  transition: none !important;
}

/* Update dropdown icon color */
:deep(.episode-select .v-field__append-inner) {
  color: rgb(var(--v-theme-primary)) !important;  /* Blue dropdown arrow */
}

/* Update just the status table styling */
.status-table {
  background: transparent !important;
  margin: 0 !important;
  padding: 0 !important;
  min-width: 180px !important;
}

.status-table :deep(td) {
  height: 16px !important;
  padding: 0 !important;
  border: none !important;
  white-space: nowrap !important;
  text-align: left !important;
}

/* Minimal spacing between value and label */
.status-table :deep(td:last-child) {
  padding-left: 4px !important;
}

/* Header styling */
.status-table :deep(th) {
  padding: 0 0 2px 0 !important;
}

/* Make rows full width */
.rundown-row {
  min-height: 42px !important;
  max-height: 42px !important;
  width: 100%;
  margin: 0;
}

/* Adjust layout sizes */
.rundown-row {
  min-height: 42px !important;  /* Reduced from 52px */
  max-height: 42px !important;
}

.type-col {
  width: 120px !important;     /* Adjusted for horizontal layout */
  min-width: 120px !important;
  max-width: 120px !important;
}

/* Update type cell and index number styling */
.type-cell {
  height: 100%;
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 0;                /* Remove gap between index and type */
  padding: 0;
  border-right: 1px solid rgba(0, 0, 0, 0.1);
  background: rgba(0, 0, 0, 0.1);
}

.index-number {
  font-size: 0.85rem;
  font-weight: 700;            /* Increased to 700 for bolder index numbers */
  opacity: 0.9;
  font-family: monospace;
  min-width: 35px;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 0;
  color: rgba(255, 255, 255, 0.95);
  z-index: 1;
}

/* Type label specific styling */
.type-label {
  font-size: 0.75rem !important;  /* Smaller size */
  font-weight: 400 !important;    /* Normal weight */
  flex-grow: 1 !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  padding: 0 !important;
  height: 100% !important;
}

/* Slug text specific styling */
.slug-text {
  font-size: 1.05rem !important;  /* Larger size */
  font-weight: 700 !important;    /* Bold weight */
  flex-grow: 1 !important;
  padding: 0 12px !important;
  display: flex !important;
  align-items: center !important;
}

.content-cell {
  padding: 0;  /* Remove padding from content cell */
  height: 100%;
  display: flex;
  align-items: stretch;  /* Changed to stretch for full height */
  justify-content: space-between;
}

.duration-box {
  font-size: 0.9rem;  /* Increased from 0.8rem */
  font-family: monospace;
  background: rgba(0, 0, 0, 0.1);
  padding: 0 12px;
  white-space: nowrap;
  width: 100px;  /* Set fixed width instead of min-width */
  display: flex;
  align-items: center;
  justify-content: center;
  border-left: 1px solid rgba(0, 0, 0, 0.05);  /* Optional subtle separator */
  overflow: hidden;
  text-overflow: ellipsis;
}

.backtime-box {
  font-size: 0.9rem;
  font-family: monospace;
  background: rgba(0, 0, 0, 0.15);  /* Slightly darker background */
  padding: 0 12px;
  white-space: nowrap;
  width: 100px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-left: 1px solid rgba(0, 0, 0, 0.05);
  overflow: hidden;
  text-overflow: ellipsis;
  font-weight: 500;  /* Slightly bolder for distinction */
}

/* Enhanced transition effects */
.v-scale-transition-enter-active,
.v-scale-transition-leave-active {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
}

.v-scale-transition-enter-from,
.v-scale-transition-leave-to {
  opacity: 0;
  transform: scale(0.95);
}

/* Clean up hover state and improve text contrast */
.v-card.elevation-1:hover:not(.dragging):not(.sortable-chosen) {
  background: var(--highlight-color) !important;
  cursor: grab;
  transform: translateZ(0);
  color: rgba(0, 0, 0, 0.87) !important;  /* Add high contrast text */
}

/* Add specific contrast for light/dark backgrounds on hover */
.v-card.elevation-1:hover[class*="bg-light"]:not(.dragging):not(.sortable-chosen) {
  color: rgba(0, 0, 0, 0.87) !important;
}

.v-card.elevation-1:hover[class*="bg-dark"]:not(.dragging):not(.sortable-chosen),
.v-card.elevation-1:hover.bg-blue-accent:not(.dragging):not(.sortable-chosen),
.v-card.elevation-1:hover.bg-purple-accent:not(.dragging):not(.sortable-chosen),
.v-card.elevation-1:hover.bg-indigo-accent:not(.dragging):not(.sortable-chosen) {
  color: rgba(255, 255, 255, 0.95) !important;
}

/* Base card state */
.v-card {
  transform: translateX(0);
  transition: transform 0.3s cubic-bezier(0.2, 0.8, 0.4, 1), 
              border 0.2s ease,
              box-shadow 0.2s ease;
  will-change: transform;
}

/* Selected item styling */
.selected-item {
  border: 3px solid var(--selection-color, #FF7043) !important;
  box-shadow: 0 4px 16px var(--selection-color-alpha, rgba(255, 112, 67, 0.3)) !important;
  transform: translateX(-8px) scale(1.02) !important;
  position: relative;
  z-index: 10;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
}

.selected-item::before {
  content: '';
  position: absolute;
  left: -6px;
  top: 50%;
  transform: translateY(-50%);
  width: 4px;
  height: 60%;
  background: var(--selection-color, #FF7043);
  border-radius: 0 2px 2px 0;
}

/* Dragged item */
.sortable-chosen {
  background: var(--draglight-color) !important;
  cursor: grabbing !important;
  transform: translateX(-35px) !important;
  z-index: 100;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2) !important;
  color: rgba(0, 0, 0, 0.87) !important;  /* Add high contrast for dragged item */
}

.sortable-chosen .index-number {
  color: rgba(255, 255, 255, 0.95) !important;  /* Keep index number white */
}

.sortable-chosen .type-label,
.sortable-chosen .slug-text,
.sortable-chosen .duration-box {
  color: rgba(0, 0, 0, 0.87) !important;  /* Ensure text is dark for contrast */
}

/* Ghost placeholder */
.sortable-ghost {
  opacity: 0.5;
  background: var(--highlight-color) !important;
  border: 2px dashed var(--dropline-color) !important;
}

/* Hide drag clone */
.sortable-drag {
  opacity: 0.3;
}

/* Update header row and layout styles */
.header-row {
  margin: 0 !important;
}

.episode-title-bar-fullwidth {
  background: #1976d2;
  color: white;
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
  padding: 12px 0;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.episode-title-bar-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 24px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.episode-selector-container {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.episode-label-above {
  font-size: 0.75rem;
  font-weight: 600;
  letter-spacing: 0.5px;
  color: rgba(255, 255, 255, 0.9);
  text-transform: uppercase;
}

.title-bar-actions {
  display: flex;
  align-items: center;
  gap: 12px;
}

.toggle-details-btn,
.save-commit-btn {
  font-size: 0.75rem !important;
  font-weight: 500 !important;
  opacity: 0.9;
  transition: opacity 0.2s ease;
  height: 32px !important;
  min-width: 100px !important;
}

.toggle-details-btn:hover,
.save-commit-btn:hover {
  opacity: 1;
}

.rotate-180 {
  transform: rotate(180deg);
  transition: transform 0.3s ease;
}

.episode-info-section {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 24px;
  margin-top: 16px;
}

/* Rundown specific styles */
.rundown-manager {
  background: #f4f6f8;
  border-radius: 8px;
  overflow: hidden;
  margin-top: 16px;
}

.rundown-header {
  background: #1976d2;
  color: white;
  padding: 12px 16px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.rundown-title {
  font-size: 1.25rem;
  font-weight: 500;
  margin: 0;
}

.rundown-item-card {
  transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  border-left: 4px solid transparent;
}

.rundown-item-card.selected-item {
  background-color: #1976D2; /* Example color for selected item */
  color: white;
  border-left-color: #FFC107; /* Example highlight color */
}

.rundown-item-card.editing-item {
  box-shadow: 0 0 8px rgba(255, 193, 7, 0.8); /* Example glow effect */
}

.compact-rundown-row {
  display: flex;
  align-items: center;
  padding: 0 8px;
  height: 40px;
}

.index-number {
  font-weight: bold;
  width: 40px;
  text-align: center;
}

.type-label {
  font-weight: 500;
  width: 60px;
  text-transform: uppercase;
}

.slug-text {
  flex-grow: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.duration-display {
  width: 80px;
  text-align: right;
}
</style>

<style>
/* Global styles - no scoping */
/* Modal styles stay the same */
.v-overlay__content:where(.v-dialog) {
  border: 10px solid black !important;
  border-radius: 0 !important;
  overflow: hidden !important;
}

/* Episode selector dropdown menu styling */
.episode-select-menu {
  margin-top: 4px !important;
  border: none !important;
  border-radius: 4px !important;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
  background: rgb(var(--v-theme-primary)) !important;
  overflow: hidden !important;
}

.episode-select-menu .v-list {
  background: rgb(var(--v-theme-primary)) !important;
  padding: 4px !important;
  min-width: 75px !important;
}

.episode-select-menu .v-list-item {
  min-height: 36px !important;
  font-size: 1.1rem !important;
  padding: 0 12px !important;
  color: white !important;
  text-align: left !important;     /* Changed from center to left */
  display: flex !important;
  align-items: center !important;
}

/* Custom scrollbar styling */
.episode-select-menu ::-webkit-scrollbar {
  width: 8px !important;
}

.episode-select-menu ::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1) !important;
}

.episode-select-menu ::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3) !important;
  border-radius: 4px !important;
}

.episode-select-menu ::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.5) !important;
}

/* Selected Item Actions - Compact Version */
.selected-item-actions-compact {
  background: linear-gradient(135deg, #fffbf0, #fff9e6) !important;
  border: 2px solid var(--selection-color, #FF7043) !important;
  border-radius: 6px !important;
  animation: slide-in-from-top 0.3s ease-out;
  height: 48px !important;
  min-height: 48px !important;
  max-height: 48px !important;
  padding: 0 16px !important;
  overflow: hidden !important;
}

.selected-item-actions-compact > div {
  width: 100% !important;
}

.selected-item-actions-compact .index-display {
  font-family: monospace;
  font-size: 1.1rem;
  font-weight: 800;
  color: var(--selection-color, #FF7043);
  background: rgba(var(--selection-color-rgb, 255, 112, 67), 0.1);
  border: 2px solid var(--selection-color, #FF7043);
  border-radius: 4px;
  padding: 4px 8px;
  margin-right: 12px;
  min-width: 40px;
  text-align: center;
  line-height: 1;
}

.selected-item-actions-compact .compact-chip {
  font-weight: 600;
  letter-spacing: 0.5px;
  height: 20px !important;
  font-size: 0.7rem !important;
  min-height: 20px !important;
}

.selected-item-actions-compact .selected-slug {
  font-weight: 500;
  font-size: 0.875rem !important;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 200px;
}

.selected-item-actions-compact .compact-btn {
  height: 32px !important;
  min-height: 32px !important;
  padding: 0 12px !important;
  font-size: 0.75rem !important;
  font-weight: 500 !important;
  text-transform: none !important;
  letter-spacing: 0.25px !important;
  min-width: auto !important;
}

.selected-item-actions-compact .compact-btn.close-btn {
  width: 32px !important;
  min-width: 32px !important;
  padding: 0 !important;
}

.selected-item-actions-compact .compact-btn .v-icon {
  margin-right: 4px !important;
}

.selected-item-actions-compact .v-divider--vertical {
  opacity: 0.4;
  background-color: rgba(var(--v-theme-outline), 0.6);
}

@keyframes slide-in-from-top {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity:  1;
    transform: translateY(0);
  }
}

/* Episode Info Inline Editing Styles */
.episode-info-section {
  margin-bottom: 6px;
}

.episode-info-card {
  background: #f8f9fa;
  border: 1px solid #e0e0e0;
  overflow: hidden;
}

.episode-title-bar {
  background: #1976d2;
  color: white;
  padding: 12px 16px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.episode-selector-container {
  display: flex;
  align-items: center;
  gap: 12px;
}

.episode-label {
  font-size: 1.1rem;
   font-weight: 600;
  letter-spacing: 0.5px;
  white-space: nowrap;
  line-height: 1.2;
}

.episode-select-titlebar {
  width: 200px;
}

.episode-select-titlebar :deep(.v-field) {
  background-color: rgba(255, 255, 255, 0.15) !important;
  border: 1px solid rgba(255, 255, 255, 0.3) !important;
  color: white !important;
  min-height: 28px !important;
}

.episode-select-titlebar :deep(.v-field__input) {
  color: white !important;
  font-weight: 600;
  font-size: 1rem;
  min-height: 24px !important;
  padding: 4px 12px !important;
  display: flex;
  align-items: center;
}

.episode-select-titlebar :deep(.v-field__field) {
  padding: 0 !important;
  display: flex;
  align-items: center;
}

.episode-select-titlebar :deep(.v-field__append-inner) {
  color: white !important;
}

.episode-select-titlebar :deep(.v-field--focused) {
  background-color: rgba(255, 255, 255, 0.25) !important;
}

.save-commit-btn {
  font-size: 0.75rem;
  font-weight: 500;
  opacity: 0.9;
  transition: opacity 0.2s ease;
}

.save-commit-btn:hover {
  opacity: 1;
}

.inline-edit-field {
  display: flex;
  align-items: center;
  margin-bottom: 8px;
  gap: 12px;
}

.inline-edit-field .field-label {
  min-width: 45px;
  font-weight: 600;
  font-size: 0.8rem;
  color: #555;
  display: flex;
  align-items: center;
  height: 32px;
  text-align: right;
  justify-content: flex-end;
  line-height: 1;
  padding-left: 16px;
  padding-right: 12px;
  margin-top: 0.4em;
}

.inline-edit-field .field-value {
  font-size: 0.8rem;
  color: #333;
  font-weight: 500;
  display: flex;
  align-items: center;
  height: 32px;
  line-height: 1.2;
}

.inline-edit-field .inline-input {
  flex: 1;
}

.inline-edit-field .inline-input:not(.title-input) :deep(.v-field) {
  background-color: #e3f2fd !important;
  border: none !important;
  box-shadow: none !important;
  min-height: 32px !important;
  font-size: 0.8rem;
}

.inline-edit-field .inline-input:not(.title-input) :deep(.v-field__input) {
  min-height: 28px !important;
  padding: 6px 12px !important;
  font-size: 0.8rem;
  display: flex;
  align-items: center;
  line-height: 1;
}

.inline-edit-field .inline-input:not(.title-input) :deep(.v-field__field) {
  padding: 0 !important;
  display: flex;
  align-items: center;
}

.inline-edit-field .inline-input:not(.title-input) :deep(.v-field--focused) {
  background-color: #e3f2fd !important;
}

.inline-edit-field .title-input :deep(.v-field) {
  background-color: #e3f2fd !important;
  border: none !important;
   box-shadow: none !important;
  min-height:  32px !important;
  font-size: 0.9rem;
}

.inline-edit-field .title-input :deep(.v-field__input) {
  min-height: 28px !important;
  padding: 6px 12px !important;
  font-size: 0.9rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  line-height: 1;
}

.inline-edit-field .title-input :deep(.v-field__field) {
  padding: 0 !important;
  display: flex;
  align-items: center;
}

.inline-edit-field .title-input :deep(.v-field--focused) {
  background-color: #e3f2fd !important;
}

/* Status table container in episode info card */
.status-table-container {
  background: #f8f9fa;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  padding: 8px;
  height: fit-content;
}

.status-table-title {
  font-size: 0.8rem;
  font-weight: 600;
  color: #555;
  margin-bottom: 6px;
  text-align: center;
}

.status-table-embedded {
  background: transparent;
  border: none;
}

.status-table-embedded tbody tr td {
  padding: 1px 3px !important;
  border-bottom: 1px solid #eee;
  font-size: 0.7rem !important;
}

.status-table-embedded tbody tr:last-child td {
  border-bottom: none;
}
</style>

<style>
/* Global styles - no scoping */
/* Modal styles stay the same */
.v-overlay__content:where(.v-dialog) {
  border: 10px solid black !important;
  border-radius: 0 !important;
  overflow: hidden !important;
}

/* Episode selector dropdown menu styling */
.episode-select-menu {
  margin-top: 4px !important;
  border: none !important;
  border-radius: 4px !important;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
  background: rgb(var(--v-theme-primary)) !important;
  overflow: hidden !important;
}

.episode-select-menu .v-list {
  background: rgb(var(--v-theme-primary)) !important;
  padding: 4px !important;
  min-width: 75px !important;
}

.episode-select-menu .v-list-item {
  min-height: 36px !important;
  font-size: 1.1rem !important;
  padding: 0 12px !important;
  color: white !important;
  text-align: left !important;     /* Changed from center to left */
  display: flex !important;
  align-items: center !important;
}

/* Custom scrollbar styling */
.episode-select-menu ::-webkit-scrollbar {
  width: 8px !important;
}

.episode-select-menu ::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1) !important;
}

.episode-select-menu ::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3) !important;
  border-radius: 4px !important;
}

.episode-select-menu ::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.5) !important;
}

/* Selected Item Actions - Compact Version */
.selected-item-actions-compact {
  background: linear-gradient(135deg, #fffbf0, #fff9e6) !important;
  border: 2px solid var(--selection-color, #FF7043) !important;
  border-radius: 6px !important;
  animation: slide-in-from-top 0.3s ease-out;
  height: 48px !important;
  min-height: 48px !important;
  max-height: 48px !important;
  padding: 0 16px !important;
  overflow: hidden !important;
}

.selected-item-actions-compact > div {
  width: 100% !important;
}

.selected-item-actions-compact .index-display {
  font-family: monospace;
  font-size: 1.1rem;
  font-weight: 800;
  color: var(--selection-color, #FF7043);
  background: rgba(var(--selection-color-rgb, 255, 112, 67), 0.1);
  border: 2px solid var(--selection-color, #FF7043);
  border-radius: 4px;
  padding: 4px 8px;
  margin-right: 12px;
  min-width: 40px;
  text-align: center;
  line-height: 1;
}

.selected-item-actions-compact .compact-chip {
  font-weight: 600;
  letter-spacing: 0.5px;
  height: 20px !important;
  font-size: 0.7rem !important;
  min-height: 20px !important;
}

.selected-item-actions-compact .selected-slug {
  font-weight: 500;
  font-size: 0.875rem !important;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 200px;
}

.selected-item-actions-compact .compact-btn {
  height: 32px !important;
  min-height: 32px !important;
  padding: 0 12px !important;
  font-size: 0.75rem !important;
  font-weight: 500 !important;
  text-transform: none !important;
  letter-spacing: 0.25px !important;
  min-width: auto !important;
}

.selected-item-actions-compact .compact-btn.close-btn {
  width: 32px !important;
  min-width: 32px !important;
  padding: 0 !important;
}

.selected-item-actions-compact .compact-btn .v-icon {
  margin-right: 4px !important;
}

.selected-item-actions-compact .v-divider--vertical {
  opacity: 0.4;
  background-color: rgba(var(--v-theme-outline), 0.6);
}

@keyframes slide-in-from-top {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity:  1;
    transform: translateY(0);
  }
}

/* Episode Info Inline Editing Styles */
.episode-info-section {
  margin-bottom: 6px;
}

.episode-info-card {
  background: #f8f9fa;
  border: 1px solid #e0e0e0;
  overflow: hidden;
}

.episode-title-bar {
  background: #1976d2;
  color: white;
  padding: 12px 16px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.episode-selector-container {
  display: flex;
  align-items: center;
  gap: 12px;
}

.episode-label {
  font-size: 1.1rem;
   font-weight: 600;
  letter-spacing: 0.5px;
  white-space: nowrap;
  line-height: 1.2;
}

.episode-select-titlebar {
  width: 200px;
}

.episode-select-titlebar :deep(.v-field) {
  background-color: rgba(255, 255, 255, 0.15) !important;
  border: 1px solid rgba(255, 255, 255, 0.3) !important;
  color: white !important;
  min-height: 28px !important;
}

.episode-select-titlebar :deep(.v-field__input) {
  color: white !important;
  font-weight: 600;
  font-size: 1rem;
  min-height: 24px !important;
  padding: 4px 12px !important;
  display: flex;
  align-items: center;
}

.episode-select-titlebar :deep(.v-field__field) {
  padding: 0 !important;
  display: flex;
  align-items: center;
}

.episode-select-titlebar :deep(.v-field__append-inner) {
  color: white !important;
}

.episode-select-titlebar :deep(.v-field--focused) {
  background-color: rgba(255, 255, 255, 0.25) !important;
}

.save-commit-btn {
  font-size: 0.75rem;
  font-weight: 500;
  opacity: 0.9;
  transition: opacity 0.2s ease;
}

.save-commit-btn:hover {
  opacity: 1;
}

.inline-edit-field {
  display: flex;
  align-items: center;
  margin-bottom: 8px;
  gap: 12px;
}

.inline-edit-field .field-label {
  min-width: 45px;
  font-weight: 600;
  font-size: 0.8rem;
  color: #555;
  display: flex;
  align-items: center;
  height: 32px;
  text-align: right;
  justify-content: flex-end;
  line-height: 1;
  padding-left: 16px;
  padding-right: 12px;
  margin-top: 0.4em;
}

.inline-edit-field .field-value {
  font-size: 0.8rem;
  color: #333;
  font-weight: 500;
  display: flex;
  align-items: center;
  height: 32px;
  line-height: 1.2;
}

.inline-edit-field .inline-input {
  flex: 1;
}

.inline-edit-field .inline-input:not(.title-input) :deep(.v-field) {
  background-color: #e3f2fd !important;
  border: none !important;
  box-shadow: none !important;
  min-height: 32px !important;
  font-size: 0.8rem;
}

.inline-edit-field .inline-input:not(.title-input) :deep(.v-field__input) {
  min-height: 28px !important;
  padding: 6px 12px !important;
  font-size: 0.8rem;
  display: flex;
  align-items: center;
  line-height: 1;
}

.inline-edit-field .inline-input:not(.title-input) :deep(.v-field__field) {
  padding: 0 !important;
  display: flex;
  align-items: center;
}

.inline-edit-field .inline-input:not(.title-input) :deep(.v-field--focused) {
  background-color: #e3f2fd !important;
}

.inline-edit-field .title-input :deep(.v-field) {
  background-color: #e3f2fd !important;
  border: none !important;
   box-shadow: none !important;
  min-height:  32px !important;
  font-size: 0.9rem;
}

.inline-edit-field .title-input :deep(.v-field__input) {
  min-height: 28px !important;
  padding: 6px 12px !important;
  font-size: 0.9rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  line-height: 1;
}

.inline-edit-field .title-input :deep(.v-field__field) {
  padding: 0 !important;
  display: flex;
  align-items: center;
}

.inline-edit-field .title-input :deep(.v-field--focused) {
  background-color: #e3f2fd !important;
}

/* Status table container in episode info card */
.status-table-container {
  background: #f8f9fa;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  padding: 8px;
  height: fit-content;
}

.status-table-title {
  font-size: 0.8rem;
  font-weight: 600;
  color: #555;
  margin-bottom: 6px;
  text-align: center;
}

.status-table-embedded {
  background: transparent;
  border: none;
}

.status-table-embedded tbody tr td {
  padding: 1px 3px !important;
  border-bottom: 1px solid #eee;
  font-size: 0.7rem !important;
}

.status-table-embedded tbody tr:last-child td {
  border-bottom: none;
}
</style>

===== END disaffected-ui/src/components/RundownManager.vue =====

===== disaffected-ui/src/components/ColorSelector.vue =====
<template>
  <div class="color-selector">
    <!-- Rundown Items Table (TWO DROPDOWNS, FIXED) -->
    <h2>Rundown Item Colors</h2>
    <table>
      <thead>
        <tr>
          <th>Type</th>
          <th>Base Color</th>
          <th>Variant</th>
          <th>Preview</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="type in rundownTypes" :key="type">
          <td>{{ type }}</td>
          <td>
            <v-select
              v-model="baseColor[type]"
              :items="baseColorOptions"
              label="Base"
              dense
              outlined
              hide-details
              style="width: 110px"
              @change="onBaseChange(type)"
              item-title="title"
              item-value="value"
            >
              <template #item="{ item, props }">
                <v-list-item v-if="item && item.value" v-bind="props">
                  <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(item.value), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                  <span>{{ item.title }}</span>
                </v-list-item>
              </template>
              <template #selection="{ item }">
                <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(item.value), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                <span>{{ item.title }}</span>
              </template>
            </v-select>
          </td>
          <td>
            <v-select
              v-model="variant[type]"
              :items="variantOptions(baseColor[type])"
              label="Variant"
              dense
              outlined
              hide-details
              style="width: 110px"
              :disabled="!baseColor[type]"
            >
              <template #item="{ item, props }">
                <v-list-item v-if="item && item.value" v-bind="props">
                  <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(baseColor[type] + (item.value ? ' ' + item.value : '')), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                  <span>{{ item.title }}</span>
                </v-list-item>
              </template>
              <template #selection="{ item }">
                <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(baseColor[type] + (item.value ? ' ' + item.value : '')), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                <span>{{ item.title }}</span>
              </template>
            </v-select>
          </td>
          <td>
            <div 
              class="preview-box" 
              :style="{
                backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(getFullColor(type)), $vuetify),
                color: getTextColor(resolveVuetifyColor(vuetifyColorNameToThemeKey(getFullColor(type)), $vuetify)),
                width: '60px',
                height: '28px',
                borderRadius: '4px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontWeight: 500
              }"
            >
              {{ type }}
            </div>
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Interface Elements Table -->
    <h2 class="mt-6">Interface Element Colors</h2>
    <table>
      <thead>
        <tr>
          <th>Type</th>
          <th>Base Color</th>
          <th>Variant</th>
          <th>Preview</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="type in interfaceTypes" :key="type">
          <td>{{ type }}</td>
          <td>
            <v-select
              v-model="baseColor[type + '-interface']"
              :items="baseColorOptions"
              label="Base"
              dense
              outlined
              hide-details
              style="width: 110px"
              @change="onBaseChange(type + '-interface')"
              item-title="title"
              item-value="value"
            >
              <template #item="{ item, props }">
                <v-list-item v-if="item && item.value" v-bind="props">
                  <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(item.value), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                  <span>{{ item.title }}</span>
                </v-list-item>
              </template>
              <template #selection="{ item }">
                <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(item.value), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                <span>{{ item.title }}</span>
              </template>
            </v-select>
          </td>
          <td>
            <v-select
              v-model="variant[type + '-interface']"
              :items="variantOptions(baseColor[type + '-interface'])"
              label="Variant"
              dense
              outlined
              hide-details
              style="width: 110px"
              :disabled="!baseColor[type + '-interface']"
            >
              <template #item="{ item, props }">
                <v-list-item v-if="item && item.value" v-bind="props">
                  <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(baseColor[type + '-interface'] + (item.value ? ' ' + item.value : '')), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                  <span>{{ item.title }}</span>
                </v-list-item>
              </template>
              <template #selection="{ item }">
                <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(baseColor[type + '-interface'] + (item.value ? ' ' + item.value : '')), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                <span>{{ item.title }}</span>
              </template>
            </v-select>
          </td>
          <td>
            <div class="preview-box" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey((baseColor[type + '-interface'] || '') + (variant[type + '-interface'] ? ' ' + variant[type + '-interface'] : '')), $vuetify), color: getTextColor(resolveVuetifyColor(vuetifyColorNameToThemeKey((baseColor[type + '-interface'] || '') + (variant[type + '-interface'] ? ' ' + variant[type + '-interface'] : '')), $vuetify)) }">
              {{ type }}
            </div>
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Script Status Colors Table -->
    <h2 class="mt-6">Script Status Colors</h2>
    <table>
      <thead>
        <tr>
          <th>Status</th>
          <th>Base Color</th>
          <th>Variant</th>
          <th>Preview</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="type in scriptStatusTypes" :key="type">
          <td>{{ type }}</td>
          <td>
            <v-select
              v-model="baseColor[type + '-script']"
              :items="baseColorOptions"
              label="Base"
              dense
              outlined
              hide-details
              style="width: 110px"
              @change="onBaseChange(type + '-script')"
              item-title="title"
              item-value="value"
            >
              <template #item="{ item, props }">
                <v-list-item v-if="item && item.value" v-bind="props">
                  <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(item.value), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                  <span>{{ item.title }}</span>
                </v-list-item>
              </template>
              <template #selection="{ item }">
                <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(item.value), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                <span>{{ item.title }}</span>
              </template>
            </v-select>
          </td>
          <td>
            <v-select
              v-model="variant[type + '-script']"
              :items="variantOptions(baseColor[type + '-script'])"
              label="Variant"
              dense
              outlined
              hide-details
              style="width: 110px"
              :disabled="!baseColor[type + '-script']"
            >
              <template #item="{ item, props }">
                <v-list-item v-if="item && item.value" v-bind="props">
                  <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(baseColor[type + '-script'] + (item.value ? ' ' + item.value : '')), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                  <span>{{ item.title }}</span>
                </v-list-item>
              </template>
              <template #selection="{ item }">
                <span class="color-swatch" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey(baseColor[type + '-script'] + (item.value ? ' ' + item.value : '')), $vuetify), width: '24px', height: '24px', display: 'inline-block', borderRadius: '2px', marginRight: '8px' }"></span>
                <span>{{ item.title }}</span>
              </template>
            </v-select>
          </td>
          <td>
            <div class="preview-box" :style="{ backgroundColor: resolveVuetifyColor(vuetifyColorNameToThemeKey((baseColor[type + '-script'] || '') + (variant[type + '-script'] ? ' ' + variant[type + '-script'] : '')), $vuetify), color: getTextColor(resolveVuetifyColor(vuetifyColorNameToThemeKey((baseColor[type + '-script'] || '') + (variant[type + '-script'] ? ' ' + variant[type + '-script'] : '')), $vuetify)) }">
              {{ type }}
            </div>
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Save Button -->
    <v-btn
      color="primary"
      class="mt-4"
      @click="saveColors"
      :loading="isSaving"
    >
      Save Color Configuration
    </v-btn>

    <!-- Add Confirmation Dialog -->
    <v-dialog
      v-model="showConfirmation"
      width="300"
    >
      <v-card>
        <v-card-title class="text-h6">
          Colors Saved
        </v-card-title>
        <v-card-text>
          Color configuration has been updated successfully.
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn
            color="primary"
            variant="text"
            @click="showConfirmation = false"
          >
            Close
          </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </div>
</template>

<script>
import { resolveVuetifyColor, updateColor, getColorValue } from '../utils/themeColorMap';
import { debounce } from 'lodash-es';

export default {
  data() {
    return {
      rundownTypes: ['segment', 'ad', 'promo', 'cta', 'trans'],
      interfaceTypes: ['Selection', 'Hover', 'Highlight', 'Dropline', 'DragLight'],
      scriptStatusTypes: ['Draft', 'Approved', 'Production', 'Completed'],
      typeColors: {},
      showConfirmation: false,
      isSaving: false,
      baseColor: {},
      variant: {},
    }
  },
  computed: {
    themeColors() {
      const theme = this.$vuetify?.theme?.themes?.light;
      return theme ? Object.keys(theme.colors || {}) : [];
    },
    baseColorOptions() {
      const theme = this.$vuetify?.theme?.themes?.light?.colors || {};
      return Object.entries(theme).map(([key]) => ({
        title: key.replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()),
        value: key,
      }));
    },
    variantOptions() {
      // Returns a function to get variant options for a base
      return () => {
        const variants = ['base', 'lighten-1', 'lighten-2', 'lighten-3', 'lighten-4', 'darken-1', 'darken-2', 'darken-3', 'darken-4'];
        return variants.map(v => ({ title: v, value: v }));
      };
    },
  },
  methods: {
    resolveVuetifyColor,
    vuetifyColorNameToThemeKey(name) {
      if (!name) return '';
      const parts = name.toLowerCase().split(' ');
      const base = parts[0];
      const variant = parts.length > 1 ? parts.slice(1).join('-') : '';
      return variant ? `${base}-${variant}` : base;
    },
    onBaseChange(type) {
      // When base color changes, reset the variant
      this.variant[type] = null;
    },
    getFullColor(type) {
      const base = this.baseColor[type];
      const variant = this.variant[type];
      if (!base) return null;
      return variant ? `${base} ${variant}` : base;
    },
    getTextColor(bgColor) {
      // Basic logic to determine if text should be black or white
      if (!bgColor) return '#000000';
      const color = (bgColor.charAt(0) === '#') ? bgColor.substring(1, 7) : bgColor;
      const r = parseInt(color.substring(0, 2), 16);
      const g = parseInt(color.substring(2, 4), 16);
      const b = parseInt(color.substring(4, 6), 16);
      return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 186) ? '#000000' : '#FFFFFF';
    },
    initializeColors() {
      const allTypes = [
        ...this.rundownTypes,
        ...this.interfaceTypes.map(t => t + '-interface'),
        ...this.scriptStatusTypes.map(t => t + '-script'),
      ];

      allTypes.forEach(type => {
        const colorValue = getColorValue(type); // Get color from central config
        if (colorValue) {
          const parts = colorValue.split(' ');
          this.baseColor[type] = parts[0] || null;
          this.variant[type] = parts[1] || null;
        } else {
          this.baseColor[type] = null;
          this.variant[type] = null;
        }
      });
    },
    saveColors: debounce(function () {
      this.isSaving = true;
      const allTypes = [
        ...this.rundownTypes,
        ...this.interfaceTypes.map(t => t + '-interface'),
        ...this.scriptStatusTypes.map(t => t + '-script'),
      ];

      allTypes.forEach(type => {
        const fullColor = this.getFullColor(type);
        if (fullColor) {
          updateColor(type, fullColor); // Update central config
        }
      });

      setTimeout(() => {
        this.isSaving = false;
        this.showConfirmation = true;
      }, 1000);
    }, 1000),
  },
  created() {
    this.initializeColors();
  },
  mounted() {
    // this.initializeColors();
  },
};
</script>

<style scoped>
.color-selector {
  padding: 1rem;
  background-color: #1E1E1E;
  color: #FFFFFF;
}
h2 {
  border-bottom: 1px solid #444;
  padding-bottom: 8px;
  margin-bottom: 16px;
  font-weight: 500;
}
table {
  width: 100%;
  border-collapse: collapse;
}
th, td {
  border: 1px solid #333;
  padding: 8px;
  text-align: left;
}
th {
  background-color: #2a2a2a;
}
.preview-box {
  padding: 4px 8px;
  border-radius: 4px;
  text-align: center;
  font-weight: bold;
  width: 100px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid #000;
}
.color-swatch {
  width: 20px;
  height: 20px;
  display: inline-block;
  margin-right: 8px;
  border-radius: 3px;
  border: 1px solid #555;
}
</style>

===== END disaffected-ui/src/components/ColorSelector.vue =====

===== disaffected-ui/src/components/EditorPanel.vue =====
<template>
  <div :class="['editor-panel', !showRundownPanel ? 'full-width' : '']">
    <v-card class="fill-height" flat>
      <!-- Editor Mode and Controls Toolbar (mode buttons left, mode display chip and status right) -->
      <v-toolbar density="comfortable" color="surface" class="px-2 py-1" style="min-height: 48px;">
        <v-btn
          icon
          size="small"
          @click="$emit('toggle-rundown-panel')"
          v-if="!showRundownPanel"
        >
          <v-icon>mdi-menu</v-icon>
        </v-btn>

        <!-- Mode Buttons Left -->
        <v-btn-toggle
          :model-value="editorMode"
          @update:model-value="$emit('update:editorMode', $event)"
          variant="outlined"
          divided
          dense
        >
          <v-btn value="script">
            <v-icon>mdi-script-text-outline</v-icon>
          </v-btn>
          <v-btn value="scratch">
            <v-icon>mdi-notebook-edit-outline</v-icon>
          </v-btn>
          <v-btn value="metadata">
            <v-icon>mdi-database-edit-outline</v-icon>
          </v-btn>
          <v-btn value="code">
            <v-icon>mdi-code-braces</v-icon>
          </v-btn>
        </v-btn-toggle>

        <v-spacer></v-spacer>

        <!-- Right side: Mode Display Chip, Asset Button, Save Status -->
        <div class="d-flex align-center">
          <!-- Script Mode Display Chip -->
          <v-chip size="small" variant="text" class="mr-2 d-flex align-center" style="padding: 0 12px; min-width: 110px;">
            <v-icon left>{{ getModeIcon(editorMode) }}</v-icon>
            {{ editorMode.toUpperCase() }} MODE
          </v-chip>

          <!-- Asset Management Buttons -->
          <v-btn size="small" @click="$emit('show-asset-browser-modal')" v-if="editorMode === 'scratch'">
            <v-icon left>mdi-paperclip</v-icon>
            Assets
          </v-btn>

          <v-divider vertical class="mx-2"></v-divider>

          <!-- Save Indicator -->
          <v-chip
            :color="hasUnsavedChanges ? 'warning' : 'success'"
            size="small"
            variant="flat"
          >
            <v-icon left>{{ hasUnsavedChanges ? 'mdi-content-save-alert' : 'mdi-content-save' }}</v-icon>
            {{ hasUnsavedChanges ? 'Unsaved' : 'Saved' }}
          </v-chip>

          <v-btn icon size="small" @click="$emit('save')" :disabled="!hasUnsavedChanges">
            <v-icon>mdi-content-save</v-icon>
            <v-tooltip activator="parent" location="bottom">Save Current Item (Ctrl+S)</v-tooltip>
          </v-btn>
        </div>
      </v-toolbar>

      <!-- Cue Insertion Buttons Toolbar: now inside EditorPanel, above the text area -->
      <v-toolbar v-if="editorMode === 'script'" density="comfortable" class="cue-buttons-toolbar px-2 py-1" style="border-bottom: 1px solid var(--v-theme-outline); min-height: 48px; background: rgba(0,0,0,0.05);">
        <span class="text-overline mr-4">Insert Element Cues</span>
        <v-spacer></v-spacer>
        <v-btn size="small" class="mx-1 cue-btn" @click="$emit('show-gfx-modal')" color="blue-darken-3" variant="elevated">
          <v-icon size="20">mdi-image</v-icon>
          GFX
          <v-tooltip activator="parent" location="bottom">Alt+G</v-tooltip>
        </v-btn>
        <v-btn size="small" class="mx-1 cue-btn" @click="$emit('show-fsq-modal')" color="green-darken-3" variant="elevated">
          <v-icon size="20">mdi-format-quote-close</v-icon>
          FSQ
          <v-tooltip activator="parent" location="bottom">Alt+Q</v-tooltip>
        </v-btn>
        <v-btn size="small" class="mx-1 cue-btn" @click="$emit('show-sot-modal')" color="purple-darken-3" variant="elevated">
          <v-icon size="20">mdi-play</v-icon>
          SOT
          <v-tooltip activator="parent" location="bottom">Alt+S</v-tooltip>
        </v-btn>
        <v-btn size="small" class="mx-1 cue-btn" @click="$emit('show-vo-modal')" color="deep-orange-darken-3" variant="elevated">
          <v-icon size="20">mdi-microphone</v-icon>
          VO
          <v-tooltip activator="parent" location="bottom">Alt+V</v-tooltip>
        </v-btn>
        <v-btn size="small" class="mx-1 cue-btn" @click="$emit('show-nat-modal')" color="teal-darken-3" variant="elevated">
          <v-icon size="20">mdi-volume-high</v-icon>
          NAT
          <v-tooltip activator="parent" location="bottom">Alt+N</v-tooltip>
        </v-btn>
        <v-btn size="small" class="mx-1 cue-btn" @click="$emit('show-pkg-modal')" color="red-darken-3" variant="elevated">
          <v-icon size="20">mdi-package-variant</v-icon>
          PKG
          <v-tooltip activator="parent" location="bottom">Alt+P</v-tooltip>
        </v-btn>
        <v-divider vertical class="mx-2"></v-divider>
        <v-btn size="small" class="mx-1 cue-btn" @click="$emit('show-vox-modal')" color="cyan-darken-3" variant="elevated">
          <v-icon size="20">mdi-account-voice</v-icon>
          VOX
          <v-tooltip activator="parent" location="bottom">Alt+X</v-tooltip>
        </v-btn>
        <v-btn size="small" class="mx-1 cue-btn" @click="$emit('show-mus-modal')" color="orange-darken-3" variant="elevated">
          <v-icon size="20">mdi-music</v-icon>
          MUS
          <v-tooltip activator="parent" location="bottom">Alt+M</v-tooltip>
        </v-btn>
        <v-btn size="small" class="mx-1 cue-btn" @click="$emit('show-live-modal')" color="pink-darken-3" variant="elevated">
          <v-icon size="20">mdi-access-point</v-icon>
          LIVE
          <v-tooltip activator="parent" location="bottom">Alt+L</v-tooltip>
        </v-btn>
      </v-toolbar>

      <!-- Editor Content Area -->
      <v-card-text class="pa-0 editor-content">
        <!-- Script Mode - Markdown Editor -->
        <div v-if="editorMode === 'script'" class="fill-height">
          <v-textarea
            :model-value="scriptContent"
            @update:model-value="onContentInput('script', $event)"
            :placeholder="scriptPlaceholder"
            variant="plain"
            hide-details
            class="editor-textarea"
            style="height: 100%;"
            rows="30"
            auto-grow
          ></v-textarea>
        </div>

        <!-- Scratch Mode - Brainstorming Editor -->
        <div v-else-if="editorMode === 'scratch'" class="fill-height">
          <v-textarea
            :model-value="scratchContent"
            @update:model-value="onContentInput('scratch', $event)"
            :placeholder="scratchPlaceholder"
            variant="plain"
            hide-details
            class="editor-textarea scratch-mode"
            style="height: 100%;"
            @drop="handleAssetDrop"
            @dragover.prevent
            rows="30"
            auto-grow
          ></v-textarea>
        </div>

        <!-- Metadata Mode - Frontmatter Editor -->
        <div v-else-if="editorMode === 'metadata'" class="fill-height metadata-editor-container">
          <div class="metadata-editor pa-4" v-if="internalMetadata">
            <v-row>
              <v-col cols="12" md="6">
                <v-text-field
                  v-model="internalMetadata.title"
                  label="Title"
                  variant="outlined"
                  density="compact"
                  @input="onMetadataInput"
                  :rules="titleRules"
                ></v-text-field>
              </v-col>
              <v-col cols="12" md="6">
                <v-select
                  v-model="internalMetadata.type"
                  :items="itemTypes"
                  label="Type"
                  variant="outlined"
                  density="compact"
                  @update:modelValue="onMetadataInput"
                ></v-select>
              </v-col>
            </v-row>

            <v-row>
              <v-col cols="12" md="6">
                <v-text-field
                  v-model="internalMetadata.slug"
                  label="Slug"
                  variant="outlined"
                  density="compact"
                  @input="onMetadataInput"
                ></v-text-field>
              </v-col>
              <v-col cols="12" md="6">
                <v-text-field
                  v-model="internalMetadata.duration"
                  label="Duration"
                  placeholder="00:05:30"
                  variant="outlined"
                  density="compact"
                  @input="onMetadataInput"
                  :rules="durationRules"
                ></v-text-field>
              </v-col>
            </v-row>
            <!-- ... more metadata fields ... -->
          </div>
        </div>

        <!-- Code Mode - Raw Markdown/Cue View -->
        <div v-else-if="editorMode === 'code'" class="fill-height">
          <v-textarea
            :model-value="scriptContent"
            variant="plain"
            hide-details
            readonly
            class="editor-textarea code-mode"
            style="height: 100%; font-family: monospace;"
            rows="30"
            auto-grow
          ></v-textarea>
        </div>
      </v-card-text>
    </v-card>
  </div>
</template>

<script>

export default {
  name: 'EditorPanel',
  props: {
    item: {
      type: Object,
      default: () => ({})
    },
    editorMode: {
      type: String,
      default: 'script'
    },
    scriptContent: {
      type: String,
      default: ''
    },
    scratchContent: {
      type: String,
      default: ''
    },
    hasUnsavedChanges: {
      type: Boolean,
      default: false
    },
    showRundownPanel: {
      type: Boolean,
      default: true
    }
  },
  emits: [
    'update:scriptContent',
    'update:scratchContent',
    'update:editorMode',
    'metadata-change',
    'content-change',
    'save',
    'show-asset-browser-modal',
    'show-template-manager-modal',
    'show-gfx-modal',
    'show-fsq-modal',
    'show-sot-modal',
    'show-vo-modal',
    'show-nat-modal',
    'show-pkg-modal',
    'show-vox-modal',
    'show-mus-modal',
    'show-live-modal',
    'toggle-rundown-panel'
  ],
  data() {
    return {
      internalMetadata: null,
      // Validation rules
      titleRules: [v => !!v || 'Title is required'],
      durationRules: [
        v => !!v || 'Duration is required',
        v => /^\d{2}:\d{2}:\d{2}$/.test(v) || 'Format must be HH:MM:SS'
      ],
      itemTypes: [
        { title: 'Segment', value: 'segment' },
        { title: 'Advertisement', value: 'ad' },
        { title: 'Promo', value: 'promo' },
        { title: 'Call to Action', value: 'cta' },
        { title: 'Transition', value: 'trans' }
      ]
    };
  },
  computed: {
    scriptPlaceholder() {
      return this.item ? `Enter script for ${this.item.slug}...` : 'Select an item to start editing.';
    },
    scratchPlaceholder() {
      return this.item ? `Scratchpad for ${this.item.slug}...` : 'Select an item to use the scratchpad.';
    }
  },
  watch: {
    item: {
      handler(newItem) {
        if (newItem && newItem.metadata) {
          this.internalMetadata = { ...newItem.metadata };
        } else {
          this.internalMetadata = null;
        }
      },
      immediate: true,
      deep: true
    }
  },
  methods: {
    getModeIcon(mode) {
      const icons = {
        script: 'mdi-script-text',
        scratch: 'mdi-pencil',
        metadata: 'mdi-cog',
        code: 'mdi-code-braces'
      };
      return icons[mode] || 'mdi-help-circle';
    },
    onContentInput(mode, value) {
      if (mode === 'script') {
        this.$emit('update:scriptContent', value);
      } else if (mode === 'scratch') {
        this.$emit('update:scratchContent', value);
      }
      this.$emit('content-change');
    },
    onMetadataInput() {
      this.$emit('metadata-change', this.internalMetadata);
    },
    handleAssetDrop(event) {
      event.preventDefault();
      const files = event.dataTransfer.files;
      if (files.length > 0) {
        // Handle file drop, e.g., emit an event
      }
    }
  }
};
</script>

<style scoped>
.editor-panel {
  flex-grow: 1;
  height: 100%;
  display: flex;
  flex-direction: column;
}
.editor-panel.full-width {
  width: 100%;
}
.editor-content {
  height: calc(100vh - 224px); /* Adjust based on toolbar heights */
  overflow-y: auto;
}
.editor-textarea {
  width: 100%;
  height: 100%;
  padding: 16px;
  box-sizing: border-box;
}
.scratch-mode {
  background-color: #fdf5e6; /* A light, distinct color for the scratchpad */
  color: #333;
}
.code-mode {
  background-color: #2d2d2d;
  color: #f8f8f2;
}
.metadata-editor-container {
  overflow-y: auto;
  height: 100%;
}
.cue-buttons-toolbar {
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
}
.cue-btn {
  font-weight: 500;
}
</style>

===== END disaffected-ui/src/components/EditorPanel.vue =====

===== disaffected-ui/src/components/RundownPanel.vue =====
<template>
  <div
    :class="['rundown-panel', rundownPanelWidth === 'narrow' ? 'narrow' : 'wide']"
    :style="{ width: rundownPanelWidthValue }"
  >
    <v-card class="fill-height" flat>
      <v-divider></v-divider>
      
      <!-- Rundown Toolbar -->
      <v-toolbar density="compact" color="surface" class="rundown-toolbar" flat>
        <v-btn
          size="small"
          color="primary"
          variant="elevated"
          @click="$emit('new-item')"
          prepend-icon="mdi-plus"
        >
          New Item
          <v-tooltip activator="parent" location="bottom">
            Add New Rundown Item (Ctrl+Shift+N)
          </v-tooltip>
        </v-btn>
        
        <v-btn
          size="small"
          color="secondary"
          variant="outlined"
          @click="$emit('import')"
          prepend-icon="mdi-import"
          class="ml-1"
        >
          Import
        </v-btn>
        
        <v-spacer></v-spacer>
        
        <v-btn
          icon
          size="small"
          @click="$emit('export')"
        >
          <v-icon>mdi-export</v-icon>
          <v-tooltip activator="parent" location="bottom">Export Rundown (Ctrl+Shift+E)</v-tooltip>
        </v-btn>
        
        <v-btn
          icon
          size="small"
          @click="$emit('sort')"
        >
          <v-icon>mdi-sort</v-icon>
          <v-tooltip activator="parent" location="bottom">Sort Items</v-tooltip>
        </v-btn>
        
        <v-btn
          icon
          size="small"
          @click="$emit('refresh')"
          :loading="loadingRundown"
        >
          <v-icon>mdi-refresh</v-icon>
          <v-tooltip activator="parent" location="bottom">Refresh Rundown (Ctrl+Shift+R)</v-tooltip>
        </v-btn>
        
        <v-btn
          icon
          size="small"
          @click="showRundownOptions = !showRundownOptions"
        >
          <v-icon>mdi-dots-vertical</v-icon>
          <v-tooltip activator="parent" location="bottom">Rundown Options</v-tooltip>
        </v-btn>
      </v-toolbar>
      
      <v-card-text class="pa-1 rundown-content">
        <!-- Column Headers -->
        <div class="rundown-headers" v-if="items && items.length > 0">
          <div class="header-index">#</div>
          <div class="header-type">Type</div>
          <div class="header-slug">Slug</div>
          <div v-if="rundownPanelWidth === 'wide'" class="header-duration">Duration</div>
        </div>

        <!-- Rundown Items List -->
        <div class="rundown-items-container" style="min-height: 20px;">
          <v-card
            v-for="(element, index) in safeRundownItems" 
            :key="`rundown-item-${index}`"
            outlined
            :class="[
              resolveTypeClass(element?.type || 'unknown'),
              'elevation-1',
              'rundown-item-card',
              'mb-1',
              { 'selected-item': selectedItemIndex === index },
              { 'editing-item': editingItemIndex === index }
            ]"
            @click="$emit('select-item', index)"
            @dblclick="$emit('edit-item', index)"
            style="cursor: pointer;"
          >
            <div class="compact-rundown-row" :style="{ color: getTextColorForItem(element?.type || 'unknown') }">
              <div class="index-number">{{ (index + 1) * 10 }}</div>
              <div class="type-label">{{ (element?.type || 'UNKNOWN').toUpperCase() }}</div>
              <div class="slug-text">{{ (element?.slug || '').toLowerCase() }}</div>
              <div v-if="rundownPanelWidth === 'wide'" class="duration-display">
                {{ formatDuration(element?.duration || '0:00') }}
              </div>
            </div>
          </v-card>
        </div>
        
        <!-- Empty state -->
        <div v-if="!items || items.length === 0" class="text-center py-8">
          <v-icon size="48" color="grey-lighten-1" class="mb-2">mdi-playlist-remove</v-icon>
          <p class="text-h6 text-grey-lighten-1">No rundown items found</p>
          <p class="text-caption text-grey">Switch to Rundown Manager to add items</p>
        </div>
      </v-card-text>
    </v-card>
  </div>
</template>

<script>
import { getColorValue } from '../utils/themeColorMap';

export default {
  name: 'RundownPanel',
  props: {
    items: {
      type: Array,
      default: () => []
    },
    rundownPanelWidth: {
      type: String,
      default: 'wide'
    },
    selectedItemIndex: {
      type: Number,
      default: -1
    },
    editingItemIndex: {
      type: Number,
      default: -1
    },
    loadingRundown: {
      type: Boolean,
      default: false
    }
  },
  emits: ['select-item', 'edit-item', 'new-item', 'import', 'export', 'sort', 'refresh'],
  data() {
    return {
      showRundownOptions: false,
    };
  },
  computed: {
    rundownPanelWidthValue() {
      return this.rundownPanelWidth === 'narrow' ? '25%' : '40%';
    },
    safeRundownItems() {
      if (!this.items || !Array.isArray(this.items)) {
        return [];
      }
      return this.items.filter(item => item != null);
    }
  },
  methods: {
    formatDuration(duration) {
      if (!duration) return '00:00:00';
      if (/^\d{2}:\d{2}:\d{2}$/.test(duration)) return duration;
      if (/^\d{1,2}:\d{2}$/.test(duration)) return `00:${duration.padStart(5, '0')}`;
      if (/^\d:\d{2}$/.test(duration)) return `00:0${duration}`;
      if (/^\d+$/.test(duration)) {
        const totalSeconds = parseInt(duration);
        const h = Math.floor(totalSeconds / 3600).toString().padStart(2, '0');
        const m = Math.floor((totalSeconds % 3600) / 60).toString().padStart(2, '0');
        const s = (totalSeconds % 60).toString().padStart(2, '0');
        return `${h}:${m}:${s}`;
      }
      if (duration.includes(':')) {
        const parts = duration.split(':');
        if (parts.length === 2) {
          const m = (parseInt(parts[0]) || 0).toString().padStart(2, '0');
          const s = (parseInt(parts[1]) || 0).toString().padStart(2, '0');
          return `00:${m}:${s}`;
        }
      }
      return '00:00:00';
    },
    resolveTypeClass(type) {
      if (!type || type === 'unknown') return 'bg-grey-light';
      const color = getColorValue(type.toLowerCase());
      return `bg-${color}`;
    },
    getTextColorForItem(type) {
      if (!type || typeof type !== 'string') return '#333333';
      const bgColor = getColorValue(type.toLowerCase());
      const darkBackgrounds = ['blue', 'purple', 'indigo', 'red', 'green'];
      return darkBackgrounds.some(color => bgColor.includes(color)) ? '#ffffff' : '#333333';
    }
  }
};
</script>

<style scoped>
.rundown-panel {
  display: flex;
  flex-direction: column;
  height: 100%;
  border-right: 1px solid #ccc;
  background-color: var(--v-theme-surface);
}

.rundown-toolbar {
  border-bottom: 1px solid rgba(0,0,0,0.12);
}

.rundown-content {
  flex-grow: 1;
  overflow-y: auto;
  padding: 4px;
}

.rundown-headers {
  display: flex;
  font-weight: bold;
  padding: 4px 8px;
  font-size: 0.75rem;
  color: grey;
  border-bottom: 1px solid #ccc;
  position: sticky;
  top: 0;
  background-color: var(--v-theme-surface);
  z-index: 1;
}

.header-index { width: 30px; }
.header-type { width: 60px; }
.header-slug { flex-grow: 1; }
.header-duration { width: 60px; text-align: right; }

.rundown-item-card {
  transition: background-color 0.2s ease-in-out;
}

.rundown-item-card:hover {
  background-color: rgba(var(--v-theme-on-surface), 0.04);
}

.selected-item {
  border-left: 4px solid rgb(var(--v-theme-primary));
  background-color: rgba(var(--v-theme-primary), 0.1);
}

.editing-item {
   border-left: 4px solid rgb(var(--v-theme-secondary));
   background-color: rgba(var(--v-theme-secondary), 0.1);
}

.compact-rundown-row {
  display: flex;
  align-items: center;
  padding: 4px 8px;
  font-size: 0.8rem;
}

.index-number {
  width: 30px;
  font-weight: bold;
  color: grey;
  font-size: 0.7rem;
}

.type-label {
  width: 60px;
  font-weight: bold;
  font-size: 0.7rem;
}

.slug-text {
  flex-grow: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.duration-display {
  width: 60px;
  text-align: right;
  font-family: monospace;
  font-size: 0.8rem;
}
</style>

===== END disaffected-ui/src/components/RundownPanel.vue =====

===== disaffected-ui/src/components/EpisodeSelector.vue =====
<template>
  <v-menu offset-y>
    <template v-slot:activator="{ props }">
      <v-btn text v-bind="props" :class="buttonClass" :style="buttonStyle">
        <v-icon left>mdi-television-play</v-icon>
        {{ currentEpisodeLabel }}
        <v-icon right>mdi-chevron-down</v-icon>
      </v-btn>
    </template>
    <v-list>
      <v-list-item
        v-for="episode in episodes"
        :key="episode.id"
        @click="selectEpisode(episode)"
      >
        <v-list-item-title>{{ episode.title }}</v-list-item-title>
      </v-list-item>
    </v-list>
  </v-menu>
</template>

<script>
export default {
  name: 'EpisodeSelector',
  props: {
    episodes: {
      type: Array,
      required: true,
    },
    currentEpisode: {
      type: String,
      // Can be null initially, so not required
      default: null,
    },
    buttonClass: {
      type: String,
      default: ''
    },
    buttonStyle: {
      type: Object,
      default: () => ({})
    }
  },
  computed: {
    currentEpisodeLabel() {
      const savedEpisode = sessionStorage.getItem('selectedEpisode');
      if (savedEpisode) {
        const episode = this.episodes.find(e => e.value === savedEpisode);
        if (episode) return episode.title;
      }
      return this.currentEpisode
        ? this.episodes.find(e => e.value === this.currentEpisode)?.title || 'Select Episode'
        : 'Select Episode';
    },
  },
  methods: {
    selectEpisode(episode) {
      sessionStorage.setItem('selectedEpisode', episode.value);
      this.$emit('episode-changed', episode);
    },
  },
};
</script>

===== END disaffected-ui/src/components/EpisodeSelector.vue =====

===== disaffected-ui/src/composables/useAuth.js =====
import { ref } from 'vue'
import axios from 'axios'

export function useAuth() {
  const isAuthenticated = ref(false)
  const currentUser = ref({})

  const checkAuthStatus = () => {
    const token = localStorage.getItem('auth-token')
    const expiry = localStorage.getItem('auth-token-expiry')
    const userData = localStorage.getItem('user-data')
    
    if (token && expiry && userData) {
      const currentTime = Date.now()
      const expiryTime = parseInt(expiry)
      
      if (currentTime < expiryTime) {
        isAuthenticated.value = true
        currentUser.value = JSON.parse(userData)
        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`
        return true
      } else {
        clearAuthData()
      }
    }
    return false
  }

  const handleLogout = () => {
    isAuthenticated.value = false
    currentUser.value = {}
    localStorage.removeItem('auth-token')
    localStorage.removeItem('auth-token-expiry')
    localStorage.removeItem('user-data')
    delete axios.defaults.headers.common['Authorization']
  }

  const clearAuthData = () => {
    isAuthenticated.value = false
    currentUser.value = {}
    localStorage.removeItem('auth-token')
    localStorage.removeItem('auth-token-expiry')
    localStorage.removeItem('user-data')
    delete axios.defaults.headers.common['Authorization']
  }

  const setAuth = (token, user, expiry) => {
    isAuthenticated.value = true
    currentUser.value = user
    localStorage.setItem('auth-token', token)
    localStorage.setItem('user-data', JSON.stringify(user))
    localStorage.setItem('auth-token-expiry', expiry.toString())
    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`
  }

  return { 
    isAuthenticated, 
    currentUser, 
    checkAuthStatus, 
    handleLogout, 
    clearAuthData, 
    setAuth 
  }
}

===== END disaffected-ui/src/composables/useAuth.js =====

===== disaffected-ui/src/stores/auth.js =====
import { defineStore } from 'pinia'

export const useAuthStore = defineStore('auth', {
  state: () => ({
    token: localStorage.getItem('auth-token') || null,
    user: JSON.parse(localStorage.getItem('user-data') || 'null'),
    isAuthenticated: false
  }),
  
  getters: {
    isLoggedIn: (state) => !!state.token && !!state.user
  },
  
  actions: {
    setAuth(token, user) {
      this.token = token
      this.user = user
      this.isAuthenticated = true
      localStorage.setItem('auth-token', token)
      localStorage.setItem('user-data', JSON.stringify(user))
    },
    
    clearAuth() {
      this.token = null
      this.user = null
      this.isAuthenticated = false
      localStorage.removeItem('auth-token')
      localStorage.removeItem('user-data')
      localStorage.removeItem('auth-token-expiry')
    },
    
    checkAuthStatus() {
      const token = localStorage.getItem('auth-token')
      const expiry = localStorage.getItem('auth-token-expiry')
      const userData = localStorage.getItem('user-data')
      
      if (token && expiry && userData) {
        const currentTime = Date.now()
        const expiryTime = parseInt(expiry)
        
        if (currentTime < expiryTime) {
          this.token = token
          this.user = JSON.parse(userData)
          this.isAuthenticated = true
          return true
        } else {
          this.clearAuth()
        }
      }
      return false
    }
  }
})

===== END disaffected-ui/src/stores/auth.js =====

===== disaffected-ui/src/utils/themeColorMap.js =====
// Default fallback colors using Vuetify theme colors
const defaultColors = {
  'segment': 'info',         // #2196F3
  'ad': 'primary',           // #1976D2
  'promo': 'success',        // #4CAF50
  'cta': 'accent',           // #82B1FF
  'trans': 'secondary',      // #424242
  'unknown': 'grey',         // #9E9E9E
  // UI/System colors
  'selection': 'warning',    // #FB8C00
  'hover': 'blue-lighten-4', // #BBDEFB
  'draglight': 'cyan-lighten-4', // #B2EBF2
  'highlight': 'yellow-lighten-3', // #FFF9C4
  'dropline': 'green-lighten-4', // #C8E6C9
  // Status highlight colors
  'draft': 'grey-darken-2',  // #616161
  'approved': 'green-accent', // #69F0AE
  'production': 'blue-accent', // #448AFF
  'completed': 'yellow-accent' // #FFD740
};

// Export defaultColors for external use
export { defaultColors };

// Load colors from localStorage or use defaults
let currentColors = { ...defaultColors };
try {
  const storedColors = localStorage.getItem('themeColors');
  if (storedColors) {
    currentColors = { ...defaultColors, ...JSON.parse(storedColors) };
  }
} catch (err) {
  console.warn('Failed to load stored colors, using defaults:', err);
}

export const updateColor = (type, newColor) => {
  try {
    const updatedColors = { ...currentColors, [type.toLowerCase()]: newColor };
    currentColors = updatedColors;
    localStorage.setItem('themeColors', JSON.stringify(updatedColors));
    
    // Also send to backend if available
    fetch('/api/settings/colors', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ colors: updatedColors })
    }).catch(err => console.warn('Failed to save colors to backend:', err));
    
    return true;
  } catch (err) {
    console.error('Failed to update color:', err);
    return false;
  }
};

export const getColorValue = (type) => {
  return currentColors[type.toLowerCase()] || defaultColors[type.toLowerCase()] || 'grey';
};

export const getAllColors = () => {
  return { ...currentColors };
};

export const resolveVuetifyColor = (colorName, vuetifyInstance, textColor = '#FFFFFF') => {
  if (!colorName) return '#000000';
  if (!vuetifyInstance?.theme?.themes) return '#000000';
  
  const theme = vuetifyInstance.theme.themes[vuetifyInstance.theme.dark ? 'dark' : 'light'].colors;
  const color = theme[colorName] || '#000000';
  
  // Check contrast ratio for accessibility
  const contrastRatio = getContrastRatio(color, textColor);
  if (contrastRatio < 4.5) {
    console.warn(`Low contrast for ${colorName}: ${color} (ratio: ${contrastRatio})`);
    return '#000000'; // Return black for better contrast
  }
  
  return color;
};

// Calculate contrast ratio for WCAG compliance
const getContrastRatio = (color1, color2) => {
  const luminance = (hex) => {
    const rgb = parseInt(hex.replace('#', ''), 16);
    const r = (rgb >> 16) & 0xff;
    const g = (rgb >> 8) & 0xff;
    const b = rgb & 0xff;
    
    // Convert to relative luminance
    const toLinear = (c) => {
      c = c / 255;
      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
    };
    
    return 0.2126 * toLinear(r) + 0.7152 * toLinear(g) + 0.0722 * toLinear(b);
  };
  
  const lum1 = luminance(color1);
  const lum2 = luminance(color2);
  
  return (Math.max(lum1, lum2) + 0.05) / (Math.min(lum1, lum2) + 0.05);
};
===== END disaffected-ui/src/utils/themeColorMap.js =====

===== disaffected-ui/src/views/AssetsView.vue =====
<template>
  <v-container fluid>
    <v-row>
      <v-col>
        <h2 class="text-h4 font-weight-bold mb-4">Asset Manager</h2>
        <v-file-input
          label="Upload Asset"
          accept="image/*,video/*,audio/*"
          @change="uploadAsset"
          prepend-icon="mdi-upload"
        ></v-file-input>
        <v-data-table
          :headers="headers"
          :items="assets"
          :loading="loading"
          class="elevation-1"
        >
          <template v-slot:[`item.actions`]="{ item }">
            <v-btn
              icon="mdi-delete"
              size="small"
              color="error"
              @click="deleteAsset(item)"
            ></v-btn>
          </template>
        </v-data-table>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import axios from 'axios';

export default {
  name: 'AssetsView',
  data() {
    return {
      assets: [],
      loading: false,
      headers: [
        { title: 'Filename', key: 'filename', sortable: true },
        { title: 'Type', key: 'type', sortable: true },
        { title: 'Actions', key: 'actions', sortable: false, align: 'end' }
      ]
    };
  },
  methods: {
    async uploadAsset(event) {
      const file = event.target.files[0];
      if (!file) return;
      this.loading = true;
      try {
        const formData = new FormData();
        formData.append('file', file);
        const response = await axios.post('/api/assets', formData, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('auth-token')}`,
            'Content-Type': 'multipart/form-data'
          }
        });
        this.assets.push(response.data);
      } catch (error) {
        console.error('Failed to upload asset:', error);
      }
      this.loading = false;
    },
    async deleteAsset(item) {
      try {
        await axios.delete(`/api/assets/${item.id}`, {
          headers: { 'Authorization': `Bearer ${localStorage.getItem('auth-token')}` }
        });
        this.assets = this.assets.filter(a => a.id !== item.id);
      } catch (error) {
        console.error('Failed to delete asset:', error);
      }
    },
    async loadAssets() {
      this.loading = true;
      try {
        const response = await axios.get('/api/assets', {
          headers: { 'Authorization': `Bearer ${localStorage.getItem('auth-token')}` }
        });
        this.assets = response.data;
      } catch (error) {
        console.error('Failed to load assets:', error);
      }
      this.loading = false;
    }
  },
  mounted() {
    this.loadAssets();
  }
}
</script>

<style scoped>
.header-row {
  background: rgba(0, 0, 0, 0.03);
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

.cursor-pointer {
  cursor: pointer;
}
</style>
===== END disaffected-ui/src/views/AssetsView.vue =====

===== disaffected-ui/src/views/TemplatesView.vue =====
<template>
  <v-container fluid class="pa-0">
    <v-row class="header-row ma-0">
      <v-col cols="6" class="pa-4">
        <h2 class="text-h4 font-weight-bold">Templates</h2>
      </v-col>
      <v-col cols="6" class="d-flex align-center justify-end pe-4">
        <v-btn color="primary" prepend-icon="mdi-plus" @click="showCreateDialog = true">New Template</v-btn>
      </v-col>
    </v-row>
    <v-row class="ma-0">
      <v-col cols="12" class="pa-4">
        <v-card>
          <v-data-table
            :headers="headers"
            :items="templates"
            :loading="loading"
            density="comfortable"
          >
            <template #[`item.actions`]="{ item }">
              <v-btn icon="mdi-pencil" size="small" variant="text" @click="editTemplate(item)"></v-btn>
              <v-btn icon="mdi-delete" size="small" variant="text" color="error" @click="deleteTemplate(item)"></v-btn>
            </template>
          </v-data-table>
        </v-card>
      </v-col>
    </v-row>
    <v-dialog v-model="showCreateDialog" max-width="500">
      <v-card>
        <v-card-title>Create Template</v-card-title>
        <v-card-text>
          <v-text-field v-model="newTemplate.name" label="Name" required></v-text-field>
          <v-select v-model="newTemplate.type" :items="['segment', 'ad', 'promo', 'cta', 'trans']" label="Type" required></v-select>
          <v-textarea v-model="newTemplate.content" label="Content" rows="4"></v-textarea>
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn color="error" @click="showCreateDialog = false">Cancel</v-btn>
          <v-btn color="success" @click="createTemplate" :disabled="!newTemplate.name || !newTemplate.type">Save</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </v-container>
</template>

<script>
import axios from 'axios';
export default {
  name: 'TemplatesView',
  data: () => ({
    loading: false,
    showCreateDialog: false,
    newTemplate: { name: '', type: '', content: '' },
    headers: [
      { title: 'Name', key: 'name', sortable: true },
      { title: 'Type', key: 'type', sortable: true },
      { title: 'Last Modified', key: 'modified', sortable: true },
      { title: 'Actions', key: 'actions', sortable: false, align: 'end' }
    ],
    templates: []
  }),
  methods: {
    async createTemplate() {
      this.loading = true;
      try {
        await axios.post('/api/templates', this.newTemplate, {
          headers: { 'Authorization': `Bearer ${localStorage.getItem('auth-token')}` }
        });
        this.loadTemplates();
        this.showCreateDialog = false;
        this.newTemplate = { name: '', type: '', content: '' };
        // this.$toast.success('Template created successfully');
      } catch (error) {
        console.error('Failed to create template', error);
        // this.$toast.error('Failed to create template');
      }
      this.loading = false;
    },
    async editTemplate(item) {
      // This should open a dialog pre-filled with item data
      // For simplicity, we'll just log it.
      console.log('Editing template:', item);
    },
    async deleteTemplate(item) {
      this.loading = true;
      try {
        await axios.delete(`/api/templates/${item.id}`, {
          headers: { 'Authorization': `Bearer ${localStorage.getItem('auth-token')}` }
        });
        this.templates = this.templates.filter(t => t.id !== item.id);
        // this.$toast.success('Template deleted successfully');
      } catch (error) {
        console.error('Failed to delete template', error);
        // this.$toast.error('Failed to delete template');
      }
      this.loading = false;
    },
    async loadTemplates() {
      this.loading = true;
      try {
        const response = await axios.get('/api/templates', {
          headers: { 'Authorization': `Bearer ${localStorage.getItem('auth-token')}` }
        });
        this.templates = response.data;
      } catch (error) {
        console.error('Failed to load templates', error);
        // this.$toast.error('Failed to load templates');
      }
      this.loading = false;
    }
  },
  mounted() {
    this.loadTemplates();
  }
}
</script>

<style scoped>
.header-row {
  background: rgba(0, 0, 0, 0.03);
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}
</style>
===== END disaffected-ui/src/views/TemplatesView.vue =====

===== disaffected-ui/src/views/DashboardView.vue =====
<template>
  <v-container fluid>
    <v-row>
      <v-col>
        <h2 class="text-h4 font-weight-bold mb-4">Dashboard</h2>
        <v-row>
          <!-- Quick Stats Cards -->
          <v-col cols="12" md="4">
            <v-card>
              <v-card-title>Recent Episodes</v-card-title>
              <v-card-text>
                <v-list density="compact">
                  <v-list-item
                    v-for="n in 3"
                    :key="n"
                    :title="`Episode ${n}`"
                    link
                    :to="`/rundown/${n}`"
                  ></v-list-item>
                </v-list>
              </v-card-text>
            </v-card>
          </v-col>
          
          <v-col cols="12" md="4">
            <v-card>
              <v-card-title>Asset Usage</v-card-title>
              <v-card-text>
                <!-- Placeholder for asset stats -->
              </v-card-text>
            </v-card>
          </v-col>
          
          <v-col cols="12" md="4">
            <v-card>
              <v-card-title>Templates</v-card-title>
              <v-card-text>
                <!-- Placeholder for template stats -->
              </v-card-text>
            </v-card>
          </v-col>
        </v-row>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
export default {
  name: 'DashboardView'
}
</script>
===== END disaffected-ui/src/views/DashboardView.vue =====

===== disaffected-ui/src/App.vue =====
<template>
  <v-app>
    <!-- Top App Bar -->
    <v-app-bar 
      color="surface"
      elevation="1"
    >
      <v-app-bar-nav-icon
        @click="drawer = !drawer"
      ></v-app-bar-nav-icon>

      <v-app-bar-title class="text-primary font-weight-bold">
        Show Builder
      </v-app-bar-title>

      <v-spacer></v-spacer>

      <!-- Authentication Status -->
      <div v-if="isAuthenticated" class="d-flex align-center">
        <!-- Welcome message -->
        <div class="me-4 d-none d-sm-flex">
          <span class="text-body-2 text-grey-darken-1">Welcome, </span>
          <span class="text-body-2 font-weight-medium ml-1">{{ currentUser.username }}</span>
        </div>

        <!-- User Menu -->
        <v-menu>
          <template v-slot:activator="{ props }">
            <v-btn
              icon
              v-bind="props"
            >
              <v-avatar size="32">
                <v-img
                  v-if="currentUser.profile_picture"
                  :src="currentUser.profile_picture"
                  :alt="currentUser.username"
                />
                <v-icon v-else>mdi-account-circle</v-icon>
              </v-avatar>
            </v-btn>
          </template>
          <v-list>
            <v-list-item
              v-for="(item, i) in userMenuItems"
              :key="i"
              :prepend-icon="item.icon"
              :title="item.title"
              @click="handleUserMenuItem(item)"
            >
            </v-list-item>
          </v-list>
        </v-menu>
      </div>

      <!-- Login Button (when not authenticated) -->
      <v-btn
        v-else
        color="primary"
        variant="outlined"
        prepend-icon="mdi-login"
        @click="showLoginModal = true"
      >
        Login
      </v-btn>
    </v-app-bar>

    <!-- Show Info Header/Main Toolbar (always visible below app bar) -->
    <router-view v-slot="{ Component }">
      <component :is="Component" v-if="$route.name === 'ContentEditor'" />
    </router-view>

    <!-- Navigation Drawer -->
    <v-navigation-drawer
      v-model="drawer"
      :temporary="$route.name !== 'ContentEditor'"
    >
      <v-list density="compact" nav>
        <v-list-item
          v-for="(item, i) in navItems"
          :key="i"
          :value="item"
          :to="item.to"
          :prepend-icon="item.icon"
        >
          <v-list-item-title>{{ item.title }}</v-list-item-title>
        </v-list-item>
      </v-list>
    </v-navigation-drawer>

    <!-- Main Content Area -->
    <v-main>
      <v-container fluid class="pa-0">
        <router-view v-if="$route.name !== 'ContentEditor'" />
      </v-container>
    </v-main>

    <!-- Login Modal -->
    <LoginModal
      v-model="showLoginModal"
      @login-success="handleLoginSuccess"
    />
  </v-app>
</template>

<script>
import LoginModal from '@/components/LoginModal.vue'
import axios from 'axios'
import { useAuth } from '@/composables/useAuth'
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router'

export default {
  name: 'App',
  components: {
    LoginModal
  },
  setup() {
    const { isAuthenticated, currentUser, checkAuthStatus, handleLogout, setAuth } = useAuth()
    const router = useRouter()
    
    const drawer = ref(false)
    const showLoginModal = ref(false)
    
    const navItems = [
      { title: 'Dashboard', icon: 'mdi-view-dashboard', to: '/dashboard' },
      { title: 'Rundown Editor', icon: 'mdi-playlist-edit', to: '/rundown' },
      { title: 'Content Editor', icon: 'mdi-script-text-outline', to: '/content-editor' },
      { title: 'Asset Manager', icon: 'mdi-folder', to: '/assets' },
      { title: 'Templates', icon: 'mdi-file-document', to: '/templates' },
      { title: 'Settings', icon: 'mdi-cog', to: '/settings' }
    ]
    
    const userMenuItems = [
      { title: 'Profile', icon: 'mdi-account', action: 'profile' },
      { title: 'Settings', icon: 'mdi-cog', action: 'settings' },
      { title: 'Logout', icon: 'mdi-logout', action: 'logout' }
    ]
    
    const handleLoginSuccess = (authData) => {
      setAuth(authData.token, authData.user, authData.expiry)
      showLoginModal.value = false
    }
    
    const handleUserMenuItem = (item) => {
      if (item.action === 'profile') router.push('/profile')
      else if (item.action === 'settings') router.push('/settings')
      else if (item.action === 'logout') {
        handleLogout()
        router.push('/dashboard')
      }
    }
    
    onMounted(() => {
      checkAuthStatus()
      
      // Setup axios interceptors
      axios.interceptors.response.use(
        response => response,
        error => {
          if (error.response?.status === 401) {
            handleLogout()
            showLoginModal.value = true
          }
          return Promise.reject(error)
        }
      )
    })
    
    return {
      drawer,
      showLoginModal,
      isAuthenticated,
      currentUser,
      navItems,
      userMenuItems,
      handleLoginSuccess,
      handleUserMenuItem
    }
  }
}
</script>

<style>
.v-app-bar {
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05) !important;
}

.v-main {
  background: #f5f5f5;
  padding-top: 64px !important;  /* Only app bar height */
  padding-left: 0 !important;
  padding-right: 0 !important;
  padding-bottom: 0 !important;
}
</style>

===== END disaffected-ui/src/App.vue =====

===== disaffected-ui/src/views/ProfileView.vue =====
<template>
  <v-container fluid class="pa-0">
    <!-- Header Section -->
    <v-row class="header-row ma-0">
      <v-col cols="12" class="pa-4">
        <div class="d-flex align-center mb-4">
          <v-btn
            icon="mdi-arrow-left"
            variant="text"
            @click="$router.go(-1)"
            class="me-3"
          />
          <h2 class="text-h4 font-weight-bold">User Profile</h2>
        </div>
      </v-col>
    </v-row>

    <!-- Profile Content -->
    <v-row class="ma-0">
      <v-col cols="12" md="8" lg="6" class="pa-4">
        <v-card>
          <!-- Profile Header -->
          <v-card-text class="pa-6">
            <div class="d-flex align-center mb-6">
              <v-avatar size="80" class="me-4">
                <v-img
                  v-if="user.profile_picture"
                  :src="user.profile_picture"
                  :alt="user.first_name + ' ' + user.last_name"
                />
                <v-icon v-else size="40" color="grey-lighten-1">
                  mdi-account-circle
                </v-icon>
              </v-avatar>
              <div>
                <h3 class="text-h5 font-weight-bold mb-1">
                  {{ user.first_name || user.username }} {{ user.last_name }}
                </h3>
                <v-chip
                  :color="getAccessLevelColor(user.access_level)"
                  variant="flat"
                  size="small"
                  class="text-uppercase font-weight-bold"
                >
                  {{ user.access_level }}
                </v-chip>
              </div>
            </div>

            <!-- Profile Information -->
            <v-divider class="mb-6" />
            
            <div class="profile-info">
              <h4 class="text-h6 font-weight-bold mb-4">Contact Information</h4>
              
              <div class="info-row mb-3">
                <v-icon class="me-3" color="grey-darken-1">mdi-account</v-icon>
                <div>
                  <div class="text-caption text-grey-darken-1">Username</div>
                  <div class="text-body-1 font-weight-medium">{{ user.username }}</div>
                </div>
              </div>

              <div v-if="user.email" class="info-row mb-3">
                <v-icon class="me-3" color="grey-darken-1">mdi-email</v-icon>
                <div>
                  <div class="text-caption text-grey-darken-1">Email</div>
                  <div class="text-body-1 font-weight-medium">{{ user.email }}</div>
                </div>
              </div>

              <div v-if="user.phone" class="info-row mb-3">
                <v-icon class="me-3" color="grey-darken-1">mdi-phone</v-icon>
                <div>
                  <div class="text-caption text-grey-darken-1">Phone</div>
                  <div class="text-body-1 font-weight-medium">{{ user.phone }}</div>
                </div>
              </div>

              <div class="info-row mb-3">
                <v-icon class="me-3" color="grey-darken-1">mdi-shield-account</v-icon>
                <div>
                  <div class="text-caption text-grey-darken-1">Access Level</div>
                  <div class="text-body-1 font-weight-medium text-capitalize">
                    {{ user.access_level }}
                  </div>
                </div>
              </div>
            </div>
          </v-card-text>

          <!-- Profile Actions -->
          <v-card-actions class="pa-6 pt-0">
            <v-spacer />
            <v-btn
              color="primary"
              variant="outlined"
              prepend-icon="mdi-logout"
              @click="handleLogout"
            >
              Logout
            </v-btn>
          </v-card-actions>
        </v-card>
      </v-col>

      <!-- Additional Info Panel -->
      <v-col cols="12" md="4" lg="6" class="pa-4">
        <v-card>
          <v-card-title class="pa-4">
            <v-icon class="me-2">mdi-information</v-icon>
            System Information
          </v-card-title>
          <v-card-text class="pa-4">
            <div class="info-row mb-3">
              <v-icon class="me-3" color="grey-darken-1">mdi-clock</v-icon>
              <div>
                <div class="text-caption text-grey-darken-1">Session Expires</div>
                <div class="text-body-2">{{ getTokenExpiry() }}</div>
              </div>
            </div>
            
            <div class="info-row mb-3">
              <v-icon class="me-3" color="grey-darken-1">mdi-web</v-icon>
              <div>
                <div class="text-caption text-grey-darken-1">Browser</div>
                <div class="text-body-2">{{ getBrowserInfo() }}</div>
              </div>
            </div>
          </v-card-text>
        </v-card>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import { useAuth } from '@/composables/useAuth'
import { useRouter } from 'vue-router'
import { onMounted } from 'vue'

export default {
  name: 'ProfileView',
  setup() {
    const { currentUser, handleLogout } = useAuth()
    const router = useRouter()
    
    const getAccessLevelColor = (level) => {
      switch (level) {
        case 'admin':
          return 'error'
        case 'user':
          return 'success'
        case 'guest':
          return 'warning'
        default:
          return 'grey'
      }
    }
    
    const getTokenExpiry = () => {
      const expiry = localStorage.getItem('auth-token-expiry')
      if (expiry) {
        const expiryDate = new Date(parseInt(expiry))
        return expiryDate.toLocaleString()
      }
      return 'Unknown'
    }
    
    const getBrowserInfo = () => {
      return navigator.userAgent.split(' ').slice(-2).join(' ')
    }
    
    const handleUserLogout = () => {
      handleLogout()
      router.push('/dashboard')
      window.location.reload()
    }
    
    onMounted(() => {
      if (!currentUser.value || Object.keys(currentUser.value).length === 0) {
        router.push('/')
      }
    })
    
    return {
      user: currentUser,
      getAccessLevelColor,
      getTokenExpiry,
      getBrowserInfo,
      handleLogout: handleUserLogout
    }
  }
}
</script>

<style scoped>
.header-row {
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  background: white;
}

.v-card {
  border-radius: 12px !important;
}

.info-row {
  display: flex;
  align-items: flex-start;
}

.profile-info .info-row {
  padding: 8px 0;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

.profile-info .info-row:last-child {
  border-bottom: none;
}

.v-avatar {
  border: 3px solid rgba(0, 0, 0, 0.1);
}

.v-chip {
  font-size: 0.75rem !important;
  height: 24px !important;
}
</style>

===== END disaffected-ui/src/views/ProfileView.vue =====

===== disaffected-ui/src/components/modals/FsqModal.vue =====
<template>
  <v-dialog :model-value="show" @update:model-value="$emit('update:show', $event)" max-width="500">
    <v-card>
      <v-card-title>Add Full-Screen Quote</v-card-title>
      <v-card-text>
        <v-textarea 
          v-model="quote" 
          label="Quote Text" 
          variant="outlined"
          rows="3"
          required
        ></v-textarea>
        <v-text-field 
          v-model="source" 
          label="Source" 
          variant="outlined"
          required
        ></v-text-field>
        <v-text-field 
          v-model="timestamp" 
          label="Timestamp (optional)" 
          variant="outlined"
          placeholder="00:00:00"
        ></v-text-field>
      </v-card-text>
      <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn color="error" @click="cancel">Cancel</v-btn>
        <v-btn color="success" @click="submit" :disabled="!quote || !source">Insert</v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>
</template>

<script>
export default {
  name: 'FsqModal',
  props: {
    show: { type: Boolean, required: true },
  },
  emits: ['update:show', 'submit'],
  data() {
    return {
      quote: '',
      source: '',
      timestamp: ''
    }
  },
  methods: {
    submit() {
      const cueData = {
        type: 'FSQ',
        quote: this.quote,
        source: this.source,
        timestamp: this.timestamp
      }
      this.$emit('submit', cueData)
      this.reset()
    },
    cancel() {
      this.$emit('update:show', false)
      this.reset()
    },
    reset() {
      this.quote = ''
      this.source = ''
      this.timestamp = ''
    }
  }
}
</script>

===== END disaffected-ui/src/components/modals/FsqModal.vue =====

===== disaffected-ui/src/components/modals/SotModal.vue =====
<template>
  <v-dialog :model-value="show" @update:model-value="$emit('update:show', $event)" max-width="500">
    <v-card>
      <v-card-title>Add Sound on Tape (SOT)</v-card-title>
      <v-card-text>
        <v-text-field 
          v-model="filename" 
          label="Audio File Name" 
          variant="outlined"
          required
        ></v-text-field>
        <v-text-field 
          v-model="duration" 
          label="Duration" 
          variant="outlined"
          placeholder="00:00:30"
          required
        ></v-text-field>
        <v-textarea 
          v-model="description" 
          label="Description (optional)" 
          variant="outlined"
          rows="2"
        ></v-textarea>
        <v-text-field 
          v-model="timestamp" 
          label="Timestamp (optional)" 
          variant="outlined"
          placeholder="00:00:00"
        ></v-text-field>
      </v-card-text>
      <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn color="error" @click="cancel">Cancel</v-btn>
        <v-btn color="success" @click="submit" :disabled="!filename || !duration">Insert</v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>
</template>

<script>
export default {
  name: 'SotModal',
  props: {
    show: { type: Boolean, required: true },
  },
  emits: ['update:show', 'submit'],
  data() {
    return {
      filename: '',
      duration: '',
      description: '',
      timestamp: ''
    }
  },
  methods: {
    submit() {
      const cueData = {
        type: 'SOT',
        filename: this.filename,
        duration: this.duration,
        description: this.description,
        timestamp: this.timestamp
      }
      this.$emit('submit', cueData)
      this.reset()
    },
    cancel() {
      this.$emit('update:show', false)
      this.reset()
    },
    reset() {
      this.filename = ''
      this.duration = ''
      this.description = ''
      this.timestamp = ''
    }
  }
}
</script>

===== END disaffected-ui/src/components/modals/SotModal.vue =====

===== disaffected-ui/src/components/modals/VoModal.vue =====
<template>
  <v-dialog v-model="show" max-width="500">
    <v-card>
      <v-card-title>Add Voice Over (VO) Cue</v-card-title>
      <v-card-text>
        <v-text-field v-model="slug" label="Slug" required :rules="[v => !!v || 'Slug is required', v => !duplicateSlugs.includes(v) || 'Slug must be unique']"></v-text-field>
        <v-textarea v-model="text" label="Text" required :rules="[v => !!v || 'Text is required']" rows="4"></v-textarea>
        <v-text-field v-model="duration" label="Duration (HH:MM:SS)" required :rules="[v => /^\d{2}:\d{2}:\d{2}$/.test(v) || 'Format must be HH:MM:SS']"></v-text-field>
        <v-text-field v-model="timestamp" label="Timestamp (HH:MM:SS, optional)" :rules="[v => !v || /^\d{2}:\d{2}:\d{2}$/.test(v) || 'Format must be HH:MM:SS']"></v-text-field>
        <v-file-input label="Audio File (optional)" accept="audio/mp3,audio/wav" @change="file = $event"></v-file-input>
      </v-card-text>
      <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn color="error" @click="show = false">Cancel</v-btn>
        <v-btn color="success" @click="submit" :disabled="!slug || !text || !duration">Submit</v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>
</template>
<script>
import axios from 'axios';
export default {
  name: 'VoModal',
  props: { show: Boolean, episode: String, duplicateSlugs: Array },
  data() { return { slug: '', text: '', duration: '', timestamp: '', file: null }; },
  methods: {
    async submit() {
      const normalizedSlug = this.slug.toLowerCase().replace(/['".,!?]/g, '').replace(/\s+/g, '-');
      try {
        const formData = new FormData();
        formData.append('type', 'vo');
        formData.append('slug', normalizedSlug);
        const response = await axios.post('http://192.168.51.210:8888/next-id', formData, {
          headers: { Authorization: `Bearer ${localStorage.getItem('auth-token')}` }
        });
        const assetID = response.data.id;
        let mediaURL = '';
        if (this.file) {
          const uploadForm = new FormData();
          uploadForm.append('type', 'vo');
          uploadForm.append('episode', this.episode);
          uploadForm.append('asset_id', assetID);
          uploadForm.append('file', this.file);
          uploadForm.append('slug', normalizedSlug);
          uploadForm.append('duration', this.duration);
          uploadForm.append('timestamp', this.timestamp || '00:00:00');
          await axios.post('http://192.168.51.210:8888/preproc_vo', uploadForm, {
            headers: { Authorization: `Bearer ${localStorage.getItem('auth-token')}` }
          });
          mediaURL = `episodes/${this.episode}/assets/audio/${normalizedSlug}.${this.file.name.split('.').pop()}`;
        }
        this.$emit('submit', { text: this.text, duration: this.duration, timestamp: this.timestamp, slug: normalizedSlug, assetID, mediaURL });
        this.$toast.success('VO cue added');
        this.reset();
      } catch (error) { this.$toast.error('Failed to add VO cue'); }
    },
    reset() { this.slug = ''; this.text = ''; this.duration = ''; this.timestamp = ''; this.file = null; this.show = false; }
  },
  watch: { show(val) { if (!val) this.reset(); } }
}
</script>
<style scoped>.v-card { padding: 16px; }</style>

===== END disaffected-ui/src/components/modals/VoModal.vue =====

===== disaffected-ui/src/components/modals/NatModal.vue =====
<template>
  <v-dialog v-model="show" max-width="500">
    <v-card>
      <v-card-title>Add Natural Sound (NAT) Cue</v-card-title>
      <v-card-text>
        <v-text-field v-model="slug" label="Slug" required :rules="[v => !!v || 'Slug is required', v => !duplicateSlugs.includes(v) || 'Slug must be unique']"></v-text-field>
        <v-textarea v-model="description" label="Description" required :rules="[v => !!v || 'Description is required']" rows="4"></v-textarea>
        <v-text-field v-model="duration" label="Duration (HH:MM:SS)" required :rules="[v => /^\d{2}:\d{2}:\d{2}$/.test(v) || 'Format must be HH:MM:SS']"></v-text-field>
        <v-text-field v-model="timestamp" label="Timestamp (HH:MM:SS, optional)" :rules="[v => !v || /^\d{2}:\d{2}:\d{2}$/.test(v) || 'Format must be HH:MM:SS']"></v-text-field>
        <v-file-input label="Audio File (optional)" accept="audio/mp3,audio/wav" @change="file = $event"></v-file-input>
      </v-card-text>
      <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn color="error" @click="show = false">Cancel</v-btn>
        <v-btn color="success" @click="submit" :disabled="!slug || !description || !duration">Submit</v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>
</template>
<script>
import axios from 'axios';
export default {
  name: 'NatModal',
  props: { show: Boolean, episode: String, duplicateSlugs: Array },
  data() { return { slug: '', description: '', duration: '', timestamp: '', file: null }; },
  methods: {
    async submit() {
      const normalizedSlug = this.slug.toLowerCase().replace(/['".,!?]/g, '').replace(/\s+/g, '-');
      try {
        const formData = new FormData();
        formData.append('type', 'nat');
        formData.append('slug', normalizedSlug);
        const response = await axios.post('http://192.168.51.210:8888/next-id', formData, {
          headers: { Authorization: `Bearer ${localStorage.getItem('auth-token')}` }
        });
        const assetID = response.data.id;
        let mediaURL = '';
        if (this.file) {
          const uploadForm = new FormData();
          uploadForm.append('type', 'nat');
          uploadForm.append('episode', this.episode);
          uploadForm.append('asset_id', assetID);
          uploadForm.append('file', this.file);
          uploadForm.append('slug', normalizedSlug);
          uploadForm.append('duration', this.duration);
          uploadForm.append('timestamp', this.timestamp || '00:00:00');
          await axios.post('http://192.168.51.210:8888/preproc_nat', uploadForm, {
            headers: { Authorization: `Bearer ${localStorage.getItem('auth-token')}` }
          });
          mediaURL = `episodes/${this.episode}/assets/audio/${normalizedSlug}.${this.file.name.split('.').pop()}`;
        }
        this.$emit('submit', { description: this.description, duration: this.duration, timestamp: this.timestamp, slug: normalizedSlug, assetID, mediaURL });
        this.$toast.success('NAT cue added');
        this.reset();
      } catch (error) { this.$toast.error('Failed to add NAT cue'); }
    },
    reset() { this.slug = ''; this.description = ''; this.duration = ''; this.timestamp = ''; this.file = null; this.show = false; }
  },
  watch: { show(val) { if (!val) this.reset(); } }
}
</script>
<style scoped>.v-card { padding: 16px; }</style>

===== END disaffected-ui/src/components/modals/NatModal.vue =====

===== disaffected-ui/src/components/modals/PkgModal.vue =====
<template>
  <v-dialog v-model="show" max-width="500">
    <v-card>
      <v-card-title>Add Package (PKG) Cue</v-card-title>
      <v-card-text>
        <v-text-field v-model="slug" label="Slug" required :rules="[v => !!v || 'Slug is required', v => !duplicateSlugs.includes(v) || 'Slug must be unique']"></v-text-field>
        <v-text-field v-model="title" label="Title" required :rules="[v => !!v || 'Title is required']"></v-text-field>
        <v-text-field v-model="duration" label="Duration (HH:MM:SS)" required :rules="[v => /^\d{2}:\d{2}:\d{2}$/.test(v) || 'Format must be HH:MM:SS']"></v-text-field>
        <v-text-field v-model="timestamp" label="Timestamp (HH:MM:SS, optional)" :rules="[v => !v || /^\d{2}:\d{2}:\d{2}$/.test(v) || 'Format must be HH:MM:SS']"></v-text-field>
        <v-file-input label="Video File (optional)" accept="video/mp4,video/mpeg" @change="file = $event"></v-file-input>
      </v-card-text>
      <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn color="error" @click="show = false">Cancel</v-btn>
        <v-btn color="success" @click="submit" :disabled="!slug || !title || !duration">Submit</v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>
</template>
<script>
import axios from 'axios';
export default {
  name: 'PkgModal',
  props: { show: Boolean, episode: String, duplicateSlugs: Array },
  data() { return { slug: '', title: '', duration: '', timestamp: '', file: null }; },
  methods: {
    async submit() {
      const normalizedSlug = this.slug.toLowerCase().replace(/['".,!?]/g, '').replace(/\s+/g, '-');
      try {
        const formData = new FormData();
        formData.append('type', 'pkg');
        formData.append('slug', normalizedSlug);
        const response = await axios.post('http://192.168.51.210:8888/next-id', formData, {
          headers: { Authorization: `Bearer ${localStorage.getItem('auth-token')}` }
        });
        const assetID = response.data.id;
        let mediaURL = '';
        if (this.file) {
          const uploadForm = new FormData();
          uploadForm.append('type', 'pkg');
          uploadForm.append('episode', this.episode);
          uploadForm.append('asset_id', assetID);
          uploadForm.append('file', this.file);
          uploadForm.append('slug', normalizedSlug);
          uploadForm.append('duration', this.duration);
          uploadForm.append('timestamp', this.timestamp || '00:00:00');
          await axios.post('http://192.168.51.210:8888/preproc_pkg', uploadForm, {
            headers: { Authorization: `Bearer ${localStorage.getItem('auth-token')}` }
          });
          mediaURL = `episodes/${this.episode}/assets/video/${normalizedSlug}.${this.file.name.split('.').pop()}`;
        }
        this.$emit('submit', { title: this.title, duration: this.duration, timestamp: this.timestamp, slug: normalizedSlug, assetID, mediaURL });
        this.$toast.success('PKG cue added');
        this.reset();
      } catch (error) { this.$toast.error('Failed to add PKG cue'); }
    },
    reset() { this.slug = ''; this.title = ''; this.duration = ''; this.timestamp = ''; this.file = null; this.show = false; }
  },
  watch: { show(val) { if (!val) this.reset(); } }
}
</script>
<style scoped>.v-card { padding: 16px; }</style>

===== END disaffected-ui/src/components/modals/PkgModal.vue =====

===== disaffected-ui/src/views/SettingsView.vue =====
<template>
  <v-container fluid class="pa-4">
    <v-row>
      <v-col>
        <h2 class="text-h4 font-weight-bold mb-6">Settings</h2>
      </v-col>
    </v-row>

    <!-- Settings Tabs -->
    <v-row>
      <v-col>
        <v-tabs v-model="activeTab" color="primary" class="mb-4">
          <v-tab value="colors">Color Configuration</v-tab>
          <v-tab value="api">API Access</v-tab>
          <v-tab value="interface">Interface</v-tab>
          <v-tab value="rundown">Rundown</v-tab>
          <v-tab value="system">System</v-tab>
        </v-tabs>

        <v-tabs-window v-model="activeTab">
          <!-- Color Configuration Tab -->
          <v-tabs-window-item value="colors">
            <v-card class="pa-4">
              <v-card-title class="text-h6 mb-4">
                <v-icon left>mdi-palette</v-icon>
                Color Configuration
              </v-card-title>
              <v-card-text>
                <p class="mb-4 text-body-2">
                  Configure colors for rundown items and interface elements. 
                  Changes are applied immediately and saved automatically.
                </p>
                <ColorSelector />
              </v-card-text>
            </v-card>
          </v-tabs-window-item>

          <!-- API Access Tab -->
          <v-tabs-window-item value="api">
            <v-card class="pa-4">
              <v-card-title class="text-h6 mb-4">
                <v-icon left>mdi-api</v-icon>
                API Access Configuration
              </v-card-title>
              
              <v-card-text>
                <p class="mb-6 text-body-2">
                  Configure API access for AI services, cloud storage, communication tools, and integrations.
                  All credentials are securely stored and encrypted. Enable only the services you plan to use.
                </p>

                <!-- Quick Setup Guide -->
                <v-alert
                  type="info"
                  variant="tonal"
                  class="mb-6"
                  closable
                >
                  <v-alert-title>Getting Started</v-alert-title>
                  <ul class="mt-2">
                    <li>Start with AI services (OpenAI, Claude) for content generation</li>
                    <li>Add cloud storage (Google Drive, OneDrive) for file management</li>
                    <li>Configure communication (Slack, Discord) for notifications</li>
                    <li>Test connections before enabling services</li>
                  </ul>
                </v-alert>

                <!-- AI & ML Services Section -->
                <v-expansion-panels class="mb-4" multiple v-model="expandedPanels">
                  
                  <!-- Local AI Services -->
                  <v-expansion-panel value="local-ai">
                    <v-expansion-panel-title>
                      <v-icon left class="mr-3">mdi-brain</v-icon>
                      Local AI Services
                    </v-expansion-panel-title>
                    <v-expansion-panel-text>
                      <v-row>
                        <!-- Ollama Configuration -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Ollama</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.ollama.host"
                              label="Host URL"
                              placeholder="http://localhost:11434"
                              persistent-hint
                              hint="Local Ollama instance endpoint"
                            />
                            <v-text-field
                              v-model="apiConfigs.ollama.apiKey"
                              label="API Key (optional)"
                              type="password"
                              placeholder="Enter API key if required"
                            />
                            <v-switch
                              v-model="apiConfigs.ollama.enabled"
                              label="Enable Ollama integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- Whisper Configuration -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Whisper (Local)</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.whisper.host"
                              label="Host URL"
                              placeholder="http://localhost:9000"
                              persistent-hint
                              hint="Local Whisper transcription endpoint"
                            />
                            <v-text-field
                              v-model="apiConfigs.whisper.endpoint"
                              label="Transcription Endpoint"
                              placeholder="/v1/audio/transcriptions"
                            />
                            <v-switch
                              v-model="apiConfigs.whisper.enabled"
                              label="Enable Whisper transcription"
                              color="primary"
                            />
                          </v-card>
                        </v-col>
                      </v-row>
                    </v-expansion-panel-text>
                  </v-expansion-panel>

                  <!-- Cloud AI Services -->
                  <v-expansion-panel value="cloud-ai">
                    <v-expansion-panel-title>
                      <v-icon left class="mr-3">mdi-cloud-braces</v-icon>
                      Cloud AI Services
                    </v-expansion-panel-title>
                    <v-expansion-panel-text>
                      <v-row>
                        <!-- OpenAI -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">OpenAI (ChatGPT)</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.openai.apiKey"
                              label="API Key"
                              type="password"
                              placeholder="sk-..."
                              persistent-hint
                              hint="Your OpenAI API key"
                            />
                            <v-text-field
                              v-model="apiConfigs.openai.organization"
                              label="Organization ID (optional)"
                              placeholder="org-..."
                            />
                            <v-switch
                              v-model="apiConfigs.openai.enabled"
                              label="Enable OpenAI integration"
                              color="primary"
                            />
                            <v-btn
                              v-if="apiConfigs.openai.apiKey"
                              color="primary"
                              variant="outlined"
                              size="small"
                              class="mt-2"
                              @click="testApiConnection('openai')"
                            >
                              <v-icon left>mdi-connection</v-icon>
                              Test Connection
                            </v-btn>
                          </v-card>
                        </v-col>

                        <!-- Anthropic Claude -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Anthropic (Claude)</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.anthropic.apiKey"
                              label="API Key"
                              type="password"
                              placeholder="sk-ant-..."
                              persistent-hint
                              hint="Your Anthropic API key"
                            />
                            <v-switch
                              v-model="apiConfigs.anthropic.enabled"
                              label="Enable Claude integration"
                              color="primary"
                            />
                            <v-btn
                              v-if="apiConfigs.anthropic.apiKey"
                              color="primary"
                              variant="outlined"
                              size="small"
                              class="mt-2"
                              @click="testApiConnection('anthropic')"
                            >
                              <v-icon left>mdi-connection</v-icon>
                              Test Connection
                            </v-btn>
                          </v-card>
                        </v-col>

                        <!-- Google Gemini -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Google Gemini</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.gemini.apiKey"
                              label="API Key"
                              type="password"
                              placeholder="AI..."
                              persistent-hint
                              hint="Your Google AI API key"
                            />
                            <v-switch
                              v-model="apiConfigs.gemini.enabled"
                              label="Enable Gemini integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- X/Grok -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">X (Grok)</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.grok.apiKey"
                              label="API Key"
                              type="password"
                              placeholder="xai-..."
                              persistent-hint
                              hint="Your X AI API key"
                            />
                            <v-switch
                              v-model="apiConfigs.grok.enabled"
                              label="Enable Grok integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>
                      </v-row>
                    </v-expansion-panel-text>
                  </v-expansion-panel>

                  <!-- Google Services -->
                  <v-expansion-panel value="google-services">
                    <v-expansion-panel-title>
                      <v-icon left class="mr-3">mdi-google</v-icon>
                      Google Services
                    </v-expansion-panel-title>
                    <v-expansion-panel-text>
                      <v-row>
                        <!-- Google Drive & Calendar -->
                        <v-col cols="12">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Google Drive & Calendar</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.google.clientId"
                              label="Client ID"
                              placeholder="Your Google OAuth Client ID"
                              persistent-hint
                              hint="From Google Cloud Console"
                            />
                            <v-text-field
                              v-model="apiConfigs.google.clientSecret"
                              label="Client Secret"
                              type="password"
                              placeholder="Your Google OAuth Client Secret"
                            />
                            <v-textarea
                              v-model="apiConfigs.google.serviceAccount"
                              label="Service Account JSON (optional)"
                              placeholder="Paste service account JSON for server-to-server auth"
                              rows="4"
                              auto-grow
                            />
                            <v-switch
                              v-model="apiConfigs.google.driveEnabled"
                              label="Enable Google Drive integration"
                              color="primary"
                            />
                            <v-switch
                              v-model="apiConfigs.google.calendarEnabled"
                              label="Enable Google Calendar integration"
                              color="primary"
                            />
                            <v-btn
                              v-if="apiConfigs.google.clientId"
                              color="primary"
                              variant="outlined"
                              class="mt-2 mr-2"
                              @click="authorizeGoogle"
                            >
                              <v-icon left>mdi-account-check</v-icon>
                              Authorize Google Access
                            </v-btn>
                            <v-btn
                              v-if="apiConfigs.google.clientId"
                              color="secondary"
                              variant="outlined"
                              class="mt-2"
                              @click="testApiConnection('google')"
                            >
                              <v-icon left>mdi-connection</v-icon>
                              Test Connection
                            </v-btn>
                          </v-card>
                        </v-col>
                      </v-row>
                    </v-expansion-panel-text>
                  </v-expansion-panel>

                  <!-- Media & Content Services -->
                  <v-expansion-panel value="media-services">
                    <v-expansion-panel-title>
                      <v-icon left class="mr-3">mdi-video-box</v-icon>
                      Media & Content Services
                    </v-expansion-panel-title>
                    <v-expansion-panel-text>
                      <v-row>
                        <!-- YouTube API -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">YouTube API</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.youtube.apiKey"
                              label="API Key"
                              type="password"
                              placeholder="Your YouTube Data API key"
                              persistent-hint
                              hint="For video uploads and management"
                            />
                            <v-text-field
                              v-model="apiConfigs.youtube.clientId"
                              label="OAuth Client ID"
                              placeholder="Your OAuth 2.0 Client ID"
                            />
                            <v-switch
                              v-model="apiConfigs.youtube.enabled"
                              label="Enable YouTube integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- Vimeo API -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Vimeo API</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.vimeo.accessToken"
                              label="Access Token"
                              type="password"
                              placeholder="Your Vimeo access token"
                              persistent-hint
                              hint="For video hosting and management"
                            />
                            <v-switch
                              v-model="apiConfigs.vimeo.enabled"
                              label="Enable Vimeo integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>



                        <!-- AWS S3 -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">AWS S3</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.aws.accessKeyId"
                              label="Access Key ID"
                              placeholder="Your AWS Access Key ID"
                            />
                            <v-text-field
                              v-model="apiConfigs.aws.secretAccessKey"
                              label="Secret Access Key"
                              type="password"
                              placeholder="Your AWS Secret Access Key"
                            />
                            <v-text-field
                              v-model="apiConfigs.aws.region"
                              label="Region"
                              placeholder="us-east-1"
                            />
                            <v-text-field
                              v-model="apiConfigs.aws.bucket"
                              label="S3 Bucket Name"
                              placeholder="your-bucket-name"
                            />
                            <v-switch
                              v-model="apiConfigs.aws.enabled"
                              label="Enable AWS S3 integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>
                      </v-row>
                    </v-expansion-panel-text>
                  </v-expansion-panel>

                  <!-- Communication & Notifications -->
                  <v-expansion-panel value="communication">
                    <v-expansion-panel-title>
                      <v-icon left class="mr-3">mdi-message-alert</v-icon>
                      Communication & Notifications
                    </v-expansion-panel-title>
                    <v-expansion-panel-text>
                      <v-row>
                        <!-- Slack -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Slack</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.slack.botToken"
                              label="Bot Token"
                              type="password"
                              placeholder="xoxb-..."
                              persistent-hint
                              hint="Your Slack bot token"
                            />
                            <v-text-field
                              v-model="apiConfigs.slack.webhookUrl"
                              label="Webhook URL (optional)"
                              placeholder="https://hooks.slack.com/services/..."
                            />
                            <v-switch
                              v-model="apiConfigs.slack.enabled"
                              label="Enable Slack integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- Discord -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Discord</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.discord.botToken"
                              label="Bot Token"
                              type="password"
                              placeholder="Your Discord bot token"
                            />
                            <v-text-field
                              v-model="apiConfigs.discord.webhookUrl"
                              label="Webhook URL (optional)"
                              placeholder="https://discord.com/api/webhooks/..."
                            />
                            <v-switch
                              v-model="apiConfigs.discord.enabled"
                              label="Enable Discord integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- Twilio -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Twilio</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.twilio.accountSid"
                              label="Account SID"
                              placeholder="AC..."
                              persistent-hint
                              hint="For SMS and voice notifications"
                            />
                            <v-text-field
                              v-model="apiConfigs.twilio.authToken"
                              label="Auth Token"
                              type="password"
                              placeholder="Your Twilio auth token"
                            />
                            <v-text-field
                              v-model="apiConfigs.twilio.phoneNumber"
                              label="From Phone Number"
                              placeholder="+1234567890"
                            />
                            <v-switch
                              v-model="apiConfigs.twilio.enabled"
                              label="Enable Twilio integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- Email Services -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Email Services</v-card-title>
                            <v-select
                              v-model="apiConfigs.email.provider"
                              :items="emailProviders"
                              label="Email Provider"
                              item-title="name"
                              item-value="value"
                            />
                            <v-text-field
                              v-model="apiConfigs.email.apiKey"
                              label="API Key"
                              type="password"
                              placeholder="Your email service API key"
                            />
                            <v-text-field
                              v-model="apiConfigs.email.fromEmail"
                              label="From Email Address"
                              placeholder="noreply@yourapp.com"
                            />
                            <v-switch
                              v-model="apiConfigs.email.enabled"
                              label="Enable email notifications"
                              color="primary"
                            />
                          </v-card>
                        </v-col>
                      </v-row>
                    </v-expansion-panel-text>
                  </v-expansion-panel>

                  <!-- Cloud Storage & Productivity -->
                  <v-expansion-panel value="cloud-storage">
                    <v-expansion-panel-title>
                      <v-icon left class="mr-3">mdi-cloud-upload</v-icon>
                      Cloud Storage & Productivity
                    </v-expansion-panel-title>
                    <v-expansion-panel-text>
                      <v-row>
                        <!-- Note: Google Services are in their own section above -->
                        <v-col cols="12">
                          <v-alert type="info" variant="tonal">
                            Google Drive and Calendar integration is configured in the Google Services section above.
                            Additional cloud storage services can be added here as needed.
                          </v-alert>
                        </v-col>
                      </v-row>
                    </v-expansion-panel-text>
                  </v-expansion-panel>

                  <!-- Development & Automation -->
                  <v-expansion-panel value="development">
                    <v-expansion-panel-title>
                      <v-icon left class="mr-3">mdi-code-braces</v-icon>
                      Development & Automation
                    </v-expansion-panel-title>
                    <v-expansion-panel-text>
                      <v-row>
                        <!-- GitHub -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">GitHub</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.github.accessToken"
                              label="Personal Access Token"
                              type="password"
                              placeholder="ghp_..."
                              persistent-hint
                              hint="For repository management"
                            />
                            <v-text-field
                              v-model="apiConfigs.github.organization"
                              label="Default Organization (optional)"
                              placeholder="your-org"
                            />
                            <v-switch
                              v-model="apiConfigs.github.enabled"
                              label="Enable GitHub integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- GitLab -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">GitLab</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.gitlab.accessToken"
                              label="Personal Access Token"
                              type="password"
                              placeholder="glpat-..."
                            />
                            <v-text-field
                              v-model="apiConfigs.gitlab.baseUrl"
                              label="GitLab Instance URL"
                              placeholder="https://gitlab.com"
                            />
                            <v-switch
                              v-model="apiConfigs.gitlab.enabled"
                              label="Enable GitLab integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- Zapier -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Zapier</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.zapier.webhookUrl"
                              label="Webhook URL"
                              placeholder="https://hooks.zapier.com/hooks/catch/..."
                              persistent-hint
                              hint="For workflow automation"
                            />
                            <v-switch
                              v-model="apiConfigs.zapier.enabled"
                              label="Enable Zapier integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- Webhooks -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Custom Webhooks</v-card-title>
                            <div v-for="(webhook, index) in apiConfigs.webhooks" :key="index" class="mb-3 pa-2 border rounded">
                              <v-row>
                                <v-col cols="8">
                                  <v-text-field
                                    v-model="webhook.url"
                                    label="Webhook URL"
                                    placeholder="https://your-endpoint.com/webhook"
                                    dense
                                  />
                                </v-col>
                                <v-col cols="3">
                                  <v-select
                                    v-model="webhook.event"
                                    :items="webhookEvents"
                                    label="Event"
                                    dense
                                  />
                                </v-col>
                                <v-col cols="1" class="d-flex align-center">
                                  <v-btn
                                    color="error"
                                    variant="text"
                                    size="small"
                                    @click="removeWebhook(index)"
                                  >
                                    <v-icon>mdi-delete</v-icon>
                                  </v-btn>
                                </v-col>
                              </v-row>
                            </div>
                            <v-btn
                              color="primary"
                              variant="outlined"
                              size="small"
                              @click="addWebhook"
                            >
                              <v-icon left>mdi-plus</v-icon>
                              Add Webhook
                            </v-btn>
                          </v-card>
                        </v-col>
                      </v-row>
                    </v-expansion-panel-text>
                  </v-expansion-panel>

                  <!-- Specialized AI Services -->
                  <v-expansion-panel value="specialized-ai">
                    <v-expansion-panel-title>
                      <v-icon left class="mr-3">mdi-robot</v-icon>
                      Specialized AI Services
                    </v-expansion-panel-title>
                    <v-expansion-panel-text>
                      <v-row>
                        <!-- Stability AI -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Stability AI</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.stabilityAi.apiKey"
                              label="API Key"
                              type="password"
                              placeholder="sk-..."
                              persistent-hint
                              hint="For image generation and editing"
                            />
                            <v-switch
                              v-model="apiConfigs.stabilityAi.enabled"
                              label="Enable Stability AI integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- ElevenLabs -->
                        <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">ElevenLabs</v-card-title>
                            <v-text-field
                              v-model="apiConfigs.elevenLabs.apiKey"
                              label="API Key"
                              type="password"
                              placeholder="Your ElevenLabs API key"
                              persistent-hint
                              hint="For AI voice synthesis"
                            />
                            <v-switch
                              v-model="apiConfigs.elevenLabs.enabled"
                              label="Enable ElevenLabs integration"
                              color="primary"
                            />
                          </v-card>
                        </v-col>

                        <!-- Deepgram - Removed for research -->
                        <!-- <v-col cols="12" md="6">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Deepgram</v-card-title>
                            <p class="text-caption mb-2">Advanced speech-to-text transcription</p>
                            <v-alert type="info" variant="tonal" class="mb-3">
                              Research this service before enabling
                            </v-alert>
                          </v-card>
                        </v-col> -->
                      </v-row>
                    </v-expansion-panel-text>
                  </v-expansion-panel>

                  <!-- Custom & Generic APIs -->
                  <v-expansion-panel value="custom-apis">
                    <v-expansion-panel-title>
                      <v-icon left class="mr-3">mdi-cog</v-icon>
                      Custom & Generic APIs
                    </v-expansion-panel-title>
                    <v-expansion-panel-text>
                      <v-row>
                        <v-col cols="12">
                          <v-card variant="outlined" class="pa-4">
                            <v-card-title class="text-subtitle-1">Generic API Endpoints</v-card-title>
                            <p class="text-body-2 mb-4">Configure custom API endpoints for specialized services</p>
                            
                            <div v-for="(endpoint, index) in apiConfigs.customEndpoints" :key="index" class="mb-4 pa-3 border rounded">
                              <v-row>
                                <v-col cols="12" md="3">
                                  <v-text-field
                                    v-model="endpoint.name"
                                    label="Service Name"
                                    placeholder="My Custom API"
                                  />
                                </v-col>
                                <v-col cols="12" md="4">
                                  <v-text-field
                                    v-model="endpoint.url"
                                    label="Base URL"
                                    placeholder="https://api.example.com"
                                  />
                                </v-col>
                                <v-col cols="12" md="3">
                                  <v-text-field
                                    v-model="endpoint.apiKey"
                                    label="API Key"
                                    type="password"
                                    placeholder="API Key"
                                  />
                                </v-col>
                                <v-col cols="12" md="2" class="d-flex align-center">
                                  <v-btn
                                    color="error"
                                    variant="outlined"
                                    size="small"
                                    @click="removeCustomEndpoint(index)"
                                  >
                                    <v-icon>mdi-delete</v-icon>
                                  </v-btn>
                                </v-col>
                              </v-row>
                              <v-row>
                                <v-col cols="12">
                                  <v-textarea
                                    v-model="endpoint.customPrompt"
                                    label="Custom Prompt Template (optional)"
                                    placeholder="Custom prompt template for this service..."
                                    rows="2"
                                    auto-grow
                                  />
                                </v-col>
                              </v-row>
                            </div>
                            
                            <v-btn
                              color="primary"
                              variant="outlined"
                              @click="addCustomEndpoint"
                            >
                              <v-icon left>mdi-plus</v-icon>
                              Add Custom Endpoint
                            </v-btn>
                          </v-card>
                        </v-col>
                      </v-row>
                    </v-expansion-panel-text>
                  </v-expansion-panel>

                </v-expansion-panels>

                <!-- Save Button -->
                <v-row class="mt-4">
                  <v-col class="text-center">
                    <v-btn
                      color="primary"
                      size="large"
                      @click="saveApiConfigs"
                      :loading="savingApiConfigs"
                    >
                      <v-icon left>mdi-content-save</v-icon>
                      Save API Configuration
                    </v-btn>
                  </v-col>
                </v-row>
              </v-card-text>
            </v-card>
          </v-tabs-window-item>

          <!-- Interface Tab -->
          <v-tabs-window-item value="interface">
            <v-card class="pa-4">
              <v-card-title class="text-h6 mb-4">
                <v-icon left>mdi-monitor</v-icon>
                Interface Settings
              </v-card-title>
              <v-card-text>
                <p class="text-body-2 mb-4">Interface configuration options will be added here.</p>
                <!-- Future interface settings will go here -->
                <v-alert type="info" variant="tonal">
                  Interface settings coming soon...
                </v-alert>
              </v-card-text>
            </v-card>
          </v-tabs-window-item>

          <!-- Rundown Tab -->
          <v-tabs-window-item value="rundown">
            <v-card class="pa-4">
              <v-card-title class="text-h6 mb-4">
                <v-icon left>mdi-format-list-bulleted</v-icon>
                Rundown Settings
              </v-card-title>
              <v-card-text>
                <p class="text-body-2 mb-4">Configure rundown behavior and defaults.</p>
                <!-- Future rundown settings will go here -->
                <v-alert type="info" variant="tonal">
                  Rundown settings coming soon...
                </v-alert>
              </v-card-text>
            </v-card>
          </v-tabs-window-item>

          <!-- System Tab -->
          <v-tabs-window-item value="system">
            <v-card class="pa-4">
              <v-card-title class="text-h6 mb-4">
                <v-icon left>mdi-cog</v-icon>
                System Settings
              </v-card-title>
              <v-card-text>
                <p class="text-body-2 mb-4">System-wide configuration options.</p>
                <!-- Future system settings will go here -->
                <v-alert type="info" variant="tonal">
                  System settings coming soon...
                </v-alert>
              </v-card-text>
            </v-card>
          </v-tabs-window-item>
        </v-tabs-window>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import ColorSelector from '@/components/ColorSelector.vue'

export default {
  name: 'SettingsView',
  components: {
    ColorSelector
  },
  data() {
    return {
      activeTab: 'colors', // Start with the color configuration tab
      expandedPanels: [],
      apiConfigs: {
        ollama: {
          host: '',
          apiKey: '',
          enabled: false
        },
        whisper: {
          host: '',
          endpoint: '',
          enabled: false
        },
        openai: {
          apiKey: '',
          organization: '',
          enabled: false
        },
        anthropic: {
          apiKey: '',
          enabled: false
        },
        gemini: {
          apiKey: '',
          enabled: false
        },
        grok: {
          apiKey: '',
          enabled: false
        },
        google: {
          clientId: '',
          clientSecret: '',
          serviceAccount: '',
          driveEnabled: false,
          calendarEnabled: false
        },
        youtube: {
          apiKey: '',
          clientId: '',
          enabled: false
        },
        vimeo: {
          accessToken: '',
          enabled: false
        },
        aws: {
          accessKeyId: '',
          secretAccessKey: '',
          region: '',
          bucket: '',
          enabled: false
        },
        slack: {
          botToken: '',
          webhookUrl: '',
          enabled: false
        },
        discord: {
          botToken: '',
          webhookUrl: '',
          enabled: false
        },
        twilio: {
          accountSid: '',
          authToken: '',
          phoneNumber: '',
          enabled: false
        },
        email: {
          provider: '',
          apiKey: '',
          fromEmail: '',
          enabled: false
        },
        github: {
          accessToken: '',
          organization: '',
          enabled: false
        },
        gitlab: {
          accessToken: '',
          baseUrl: 'https://gitlab.com',
          enabled: false
        },
        zapier: {
          webhookUrl: '',
          enabled: false
        },
        stabilityAi: {
          apiKey: '',
          enabled: false
        },
        elevenLabs: {
          apiKey: '',
          enabled: false
        },
        webhooks: [],
        customEndpoints: []
      },
      savingApiConfigs: false,
      emailProviders: [
        { name: 'SendGrid', value: 'sendgrid' },
        { name: 'Mailgun', value: 'mailgun' },
        { name: 'AWS SES', value: 'ses' },
        { name: 'SMTP', value: 'smtp' },
        { name: 'Postmark', value: 'postmark' }
      ],
      webhookEvents: [
        'rundown.created',
        'rundown.updated',
        'rundown.deleted',
        'item.created',
        'item.updated',
        'item.deleted',
        'export.completed',
        'system.error'
      ]
    }
  },
  methods: {
    authorizeGoogle() {
      // Google authorization logic - opens OAuth flow
      // Implementation would redirect to Google OAuth
    },
    addCustomEndpoint() {
      this.apiConfigs.customEndpoints.push({
        name: '',
        url: '',
        apiKey: '',
        customPrompt: ''
      })
    },
    removeCustomEndpoint(index) {
      this.apiConfigs.customEndpoints.splice(index, 1)
    },
    addWebhook() {
      this.apiConfigs.webhooks.push({
        url: '',
        event: ''
      })
    },
    removeWebhook(index) {
      this.apiConfigs.webhooks.splice(index, 1)
    },
    async saveApiConfigs() {
      try {
        // Convert Vue data structure to backend structure
        const backendConfig = {
          preproduction: {
            ai_services: {
              ollama: this.apiConfigs.ollama,
              whisper: this.apiConfigs.whisper,
              openai: this.apiConfigs.openai,
              anthropic: this.apiConfigs.anthropic,
              gemini: this.apiConfigs.gemini,
              grok: this.apiConfigs.grok,
              stabilityAi: this.apiConfigs.stabilityAi,
              elevenLabs: this.apiConfigs.elevenLabs
            },
            storage: {
              google: this.apiConfigs.google,
              aws: this.apiConfigs.aws
            },
            communication: {
              slack: this.apiConfigs.slack,
              discord: this.apiConfigs.discord,
              twilio: this.apiConfigs.twilio,
              email: this.apiConfigs.email
            }
          },
          promotion: {
            social_media: {
              youtube: this.apiConfigs.youtube,
              vimeo: this.apiConfigs.vimeo
            }
          },
          development: {
            github: this.apiConfigs.github,
            gitlab: this.apiConfigs.gitlab,
            zapier: this.apiConfigs.zapier,
            webhooks: this.apiConfigs.webhooks,
            customEndpoints: this.apiConfigs.customEndpoints
          }
        }

        const response = await fetch('/api/settings/api-configs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.$store.state.auth.token}`
          },
          body: JSON.stringify({ config: backendConfig })
        })
        
        const result = await response.json()
        
        if (response.ok && result.success) {
          this.$toast.success('API configurations saved successfully!')
        } else {
          throw new Error(result.message || 'Failed to save configurations')
        }
      } catch (error) {
        this.$toast.error('Failed to save API configurations. Please try again.')
      } finally {
        this.savingApiConfigs = false
      }
    },
    async loadApiConfigs() {
      this.isLoading = true;
      try {
        const response = await this.$axios.get('/api/config');
        if (response.data) {
          this.apiConfigs = response.data;
        }
      } catch (error) {
        alert('Failed to load API configurations.');
      }
      this.isLoading = false;
    },
    async testApiConnection(service) {
      try {
        const response = await fetch(`/api/settings/test/${service}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.$store.state.auth.token}`
          }
        })
        
        const result = await response.json()
        
        if (response.ok && result.success) {
          this.$toast.success(`${service} connection successful!`)
          return true
        } else {
          this.$toast.error(result.message || `${service} connection failed`)
          return false
        }
      } catch (error) {
        this.$toast.error(`Failed to test ${service} connection`)
        return false
      }
    }
  },
  async mounted() {
    // Load existing API configurations when component mounts
    await this.loadApiConfigs()
  }
}
</script>

<style scoped>
.v-tabs {
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
}

.v-card {
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
}
</style>
===== END disaffected-ui/src/views/SettingsView.vue =====

===== disaffected-ui/src/plugins/vuetify.js =====
// Styles
import '@mdi/font/css/materialdesignicons.css'
import 'vuetify/styles'

// Vuetify
import { createVuetify } from 'vuetify'
import * as components from 'vuetify/components'
import * as directives from 'vuetify/directives'

export const vuetify = createVuetify({
  components,
  directives,
  theme: {
    themes: {
      light: {
        colors: {
          // Red family
          'red-base': '#F44336',
          'red-accent': '#FF5252',
          'red-dark': '#D32F2F',
          'red-light': '#FFCDD2',

          // Deep Purple family
          'deep-purple-base': '#673AB7',
          'deep-purple-accent': '#7C4DFF',
          'deep-purple-dark': '#512DA8',
          'deep-purple-light': '#D1C4E9',

          // Blue family
          'blue-base': '#2196F3',
          'blue-accent': '#448AFF',
          'blue-dark': '#1976D2',
          'blue-light': '#BBDEFB',

          // Indigo family
          'indigo-base': '#3F51B5',
          'indigo-accent': '#536DFE',
          'indigo-dark': '#303F9F',
          'indigo-light': '#C5CAE9',

          // Teal family
          'teal-base': '#009688',
          'teal-accent': '#64FFDA',
          'teal-dark': '#00796B',
          'teal-light': '#B2DFDB',

          // Green family
          'green-base': '#4CAF50',
          'green-accent': '#69F0AE',
          'green-dark': '#388E3C',
          'green-light': '#C8E6C9',

          // Lime family
          'lime-base': '#CDDC39',
          'lime-accent': '#EEFF41',
          'lime-dark': '#AFB42B',
          'lime-light': '#F0F4C3',

          // Yellow family (add before Grey family)
          'yellow-base': '#FFEB3B',
          'yellow-accent': '#FFD740',
          'yellow-dark': '#FBC02D',
          'yellow-light': '#FFF9C4',

          // Grey family
          'grey-base': '#9E9E9E',
          'grey-accent': '#BDBDBD',
          'grey-dark': '#616161',
          'grey-light': '#F5F5F5',

          // Purple family
          'purple-base': '#9C27B0',
          'purple-accent': '#E040FB',
          'purple-accent-2': '#CE93D8', // Added for advert rows
          'purple-dark': '#7B1FA2',
          'purple-light': '#E1BEE7',

          // Keep any existing theme colors you need
          primary: '#1976D2',
          secondary: '#424242',
          accent: '#82B1FF',
          error: '#FF5252',
          info: '#2196F3',
          success: '#4CAF50',
          warning: '#FB8C00',
        }
      }
    }
  }
})


===== END disaffected-ui/src/plugins/vuetify.js =====

===== disaffected-ui/src/router/index.js =====
import { createRouter, createWebHistory } from 'vue-router'
import RundownManager from '@/components/RundownManager.vue'
import ContentEditor from '@/components/ContentEditor.vue'
import DashboardView from '@/views/DashboardView.vue'
import { useAuth } from '@/composables/useAuth';

// Authentication check function
function isAuthenticated() {
  const { isAuthenticated: isAuth } = useAuth();
  return isAuth.value;
}

const routes = [
  {
    path: '/',
    redirect: '/dashboard'
  },
  {
    path: '/dashboard',
    name: 'dashboard',
    component: DashboardView
  },
  {
    // Keep existing RundownManager route with episode parameter
    path: '/rundown/:episode?',
    name: 'rundown',
    component: RundownManager,
    props: true
  },
  {
    path: '/rundown-manager/:episode?',
    redirect: to => {
      return { path: `/rundown/${to.params.episode || ''}` }
    }
  },
  {
    path: '/content-editor/:episode?',
    name: 'content-editor',
    component: ContentEditor,
    props: true
  },
  // Add new routes for other sections
  {
    path: '/assets',
    name: 'assets',
    component: () => import('@/views/AssetsView.vue')
  },
  {
    path: '/templates',
    name: 'templates',
    component: () => import('@/views/TemplatesView.vue')
  },
  {
    path: '/settings',
    name: 'settings',
    component: () => import('@/views/SettingsView.vue')
  },
  {
    path: '/profile',
    name: 'profile',
    component: () => import('@/views/ProfileView.vue'),
    meta: { requiresAuth: true }
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

// Navigation guard to check authentication
router.beforeEach((to, from, next) => {
  if (to.meta.requiresAuth && !isAuthenticated()) {
    // Redirect to dashboard if not authenticated
    next('/dashboard')
  } else {
    next()
  }
})

export default router

===== END disaffected-ui/src/router/index.js =====

